class RecordDecl;

      /// \brief Retrieve the outermost lexically enclosing record context.
      RecordDecl *getOuterLexicalRecordContext();
      const RecordDecl *getOuterLexicalRecordContext() const {
        return const_cast<DeclContext *>(this)->getOuterLexicalRecordContext();
      }
    

      const Expr *getExpr() const {
        assert(Field->getInClassInitializer() && "initializer hasn't been parsed");
        return Field->getInClassInitializer();
      }
      Expr *getExpr() {
        assert(Field->getInClassInitializer() && "initializer hasn't been parsed");
        return Field->getInClassInitializer();
      }

    def note_template_nsdmi_here : Note<
      "in instantiation of default member initializer %q0 requested here">;

    def err_in_class_initializer_not_yet_parsed
        : Error<"cannot use defaulted default constructor of %0 within the class "
                "outside of member functions because %1 has an initializer">;
    def err_in_class_initializer_not_yet_parsed_outer_class
        : Error<"cannot use defaulted default constructor of %0 within "
                "%1 outside of member functions because %2 has an initializer">;

      ExprResult BuildCXXDefaultInitExpr(SourceLocation Loc, FieldDecl *Field);
    

      bool InstantiateInClassInitializer(
          SourceLocation PointOfInstantiation, FieldDecl *Instantiation,
          FieldDecl *Pattern, const MultiLevelTemplateArgumentList &TemplateArgs);
    

    RecordDecl *DeclContext::getOuterLexicalRecordContext() {
      // Loop until we find a non-record context.
      RecordDecl *OutermostRD = nullptr;
      DeclContext *DC = this;
      while (DC->isRecord()) {
        OutermostRD = cast<RecordDecl>(DC);
        DC = DC->getLexicalParent();
      }
      return OutermostRD;
    }
    

      case CXXDefaultInitExprClass: {
        const FieldDecl *FD = cast<CXXDefaultInitExpr>(this)->getField();
        if (const Expr *E = FD->getInClassInitializer())

      }

    #include "clang/Sema/Template.h"

        ExprResult DIE =
            SemaRef.BuildCXXDefaultInitExpr(Info.Ctor->getLocation(), Field);
        if (DIE.isInvalid())
          return true;

          Init = new (SemaRef.Context)
              CXXCtorInitializer(SemaRef.Context, Indirect, SourceLocation(),
                                 SourceLocation(), DIE.get(), SourceLocation());

          Init = new (SemaRef.Context)
              CXXCtorInitializer(SemaRef.Context, Field, SourceLocation(),
                                 SourceLocation(), DIE.get(), SourceLocation());

    ExprResult Sema::BuildCXXDefaultInitExpr(SourceLocation Loc, FieldDecl *Field) {
      assert(Field->hasInClassInitializer());
    
      // If we already have the in-class initializer nothing needs to be done.
      if (Field->getInClassInitializer())
        return CXXDefaultInitExpr::Create(Context, Loc, Field);
    
      // Maybe we haven't instantiated the in-class initializer. Go check the
      // pattern FieldDecl to see if it has one.
      CXXRecordDecl *ParentRD = cast<CXXRecordDecl>(Field->getParent());
    
      if (isTemplateInstantiation(ParentRD->getTemplateSpecializationKind())) {
        CXXRecordDecl *ClassPattern = ParentRD->getTemplateInstantiationPattern();
        DeclContext::lookup_result Lookup =
            ClassPattern->lookup(Field->getDeclName());
        assert(Lookup.size() == 1);
        FieldDecl *Pattern = cast<FieldDecl>(Lookup[0]);
        if (InstantiateInClassInitializer(Loc, Field, Pattern,
                                          getTemplateInstantiationArgs(Field)))
          return ExprError();
        return CXXDefaultInitExpr::Create(Context, Loc, Field);
      }
    
      // DR1351:
      //   If the brace-or-equal-initializer of a non-static data member
      //   invokes a defaulted default constructor of its class or of an
      //   enclosing class in a potentially evaluated subexpression, the
      //   program is ill-formed.
      //
      // This resolution is unworkable: the exception specification of the
      // default constructor can be needed in an unevaluated context, in
      // particular, in the operand of a noexcept-expression, and we can be
      // unable to compute an exception specification for an enclosed class.
      //
      // Any attempt to resolve the exception specification of a defaulted default
    
      // come here at which point we can diagnose it.
      RecordDecl *OutermostClass = ParentRD->getOuterLexicalRecordContext();
      if (OutermostClass == ParentRD) {
        Diag(Field->getLocEnd(), diag::err_in_class_initializer_not_yet_parsed)
            << ParentRD << Field;
      } else {
        Diag(Field->getLocEnd(),
             diag::err_in_class_initializer_not_yet_parsed_outer_class)
            << ParentRD << OutermostClass << Field;
      }
    
      return ExprError();
    }
    

          ExprResult DIE = SemaRef.BuildCXXDefaultInitExpr(Loc, Field);
          if (DIE.isInvalid()) {
            hadError = true;
            return;
          }

            ILE->setInit(Init, DIE.get());

            ILE->updateInit(SemaRef.Context, Init, DIE.get());

