"cannot specify any part of a return type in the "
      "declaration of a conversion function"
      "%select{"
      "; put the complete type after 'operator'|"
      "; use a typedef to declare a conversion to %1|"
      "; use an alias template to declare a conversion to %1|"
      "}0">;

      SourceRange getSourceRange() const {
        if (EndLoc.isInvalid())
          return SourceRange(Loc, Loc);
        return SourceRange(Loc, EndLoc);
      }
    

        I.Loc           = SS.getBeginLoc();
        I.EndLoc        = Loc;

      typedef SmallVectorImpl<DeclaratorChunk>::const_iterator type_object_iterator;
      typedef llvm::iterator_range<type_object_iterator> type_object_range;
    
      /// Returns the range of type objects, from the identifier outwards.
      type_object_range type_objects() const {
        return type_object_range(DeclTypeInfo.begin(), DeclTypeInfo.end());
      }
    

                                                          DS.getLocEnd()),

    static void extendLeft(SourceRange &R, const SourceRange &Before) {
      if (Before.isInvalid())
        return;
      R.setBegin(Before.getBegin());
      if (R.getEnd().isInvalid())
        R.setEnd(Before.getEnd());
    }
    
    static void extendRight(SourceRange &R, const SourceRange &After) {
      if (After.isInvalid())
        return;
      if (R.getBegin().isInvalid())
        R.setBegin(After.getBegin());
      R.setEnd(After.getEnd());
    }
    

      TypeSourceInfo *ConvTSI = nullptr;
      QualType ConvType =
          GetTypeFromParser(D.getName().ConversionFunctionId, &ConvTSI);

        bool NeedsTypedef = false;
        SourceRange Before, After;
    
        // Walk the chunks and extract information on them for our diagnostic.
        bool PastFunctionChunk = false;
        for (auto &Chunk : D.type_objects()) {
          switch (Chunk.Kind) {
          case DeclaratorChunk::Function:
            if (!PastFunctionChunk) {
              if (Chunk.Fun.HasTrailingReturnType) {
                TypeSourceInfo *TRT = nullptr;
                GetTypeFromParser(Chunk.Fun.getTrailingReturnType(), &TRT);
                if (TRT) extendRight(After, TRT->getTypeLoc().getSourceRange());
              }
              PastFunctionChunk = true;
              break;
            }
            // Fall through.
          case DeclaratorChunk::Array:
            NeedsTypedef = true;
            extendRight(After, Chunk.getSourceRange());
            break;
    
          case DeclaratorChunk::Pointer:
          case DeclaratorChunk::BlockPointer:
          case DeclaratorChunk::Reference:
          case DeclaratorChunk::MemberPointer:
            extendLeft(Before, Chunk.getSourceRange());
            break;
    
          case DeclaratorChunk::Paren:
            extendLeft(Before, Chunk.Loc);
            extendRight(After, Chunk.EndLoc);
            break;
          }
        }
    
        SourceLocation Loc = Before.isValid() ? Before.getBegin() :
                             After.isValid()  ? After.getBegin() :
                                                D.getIdentifierLoc();
        auto &&DB = Diag(Loc, diag::err_conv_function_with_complex_decl);
        DB << Before << After;
    
        if (!NeedsTypedef) {
          DB << /*don't need a typedef*/0;
    
          // If we can provide a correct fix-it hint, do so.
          if (After.isInvalid() && ConvTSI) {
            SourceLocation InsertLoc =
                PP.getLocForEndOfToken(ConvTSI->getTypeLoc().getLocEnd());
            DB << FixItHint::CreateInsertion(InsertLoc, " ")
               << FixItHint::CreateInsertionFromRange(
                      InsertLoc, CharSourceRange::getTokenRange(Before))
               << FixItHint::CreateRemoval(Before);
          }
        } else if (!Proto->getReturnType()->isDependentType()) {
          DB << /*typedef*/1 << Proto->getReturnType();
        } else if (getLangOpts().CPlusPlus11) {
          DB << /*alias template*/2 << Proto->getReturnType();
        } else {
          DB << /*might not be fixable*/3;
        }
    
        // Recover by incorporating the other type chunks into the result type.
        // Note, this does *not* change the name of the function. This is compatible
        // with the GCC extension:
        //   struct S { &operator int(); } s;
        //   int &r = s.operator int(); // ok in GCC
        //   S::operator int&() {} // error in GCC, function name is 'operator int'.

