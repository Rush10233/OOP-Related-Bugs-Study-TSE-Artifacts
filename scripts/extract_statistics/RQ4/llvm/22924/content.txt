def ImplicitConversionFloatingPointToBool :
      DiagGroup<"implicit-conversion-floating-point-to-bool">;
    def ObjCLiteralConversion : DiagGroup<"objc-literal-conversion">;
    def MacroRedefined : DiagGroup<"macro-redefined">;
    def BuiltinMacroRedefined : DiagGroup<"builtin-macro-redefined">;
    def BuiltinRequiresHeader : DiagGroup<"builtin-requires-header">;

    def note_block_var_fixit_add_initialization : Note<
      "did you mean to use __block %0?">;
    def note_in_omitted_aggregate_initializer : Note<

    def note_in_reference_temporary_list_initializer : Note<
      "in initialization of temporary of type %0 created to "
      "list-initialize this reference">;

      "function declaration cannot have variably modified type">;
    def err_array_too_large : Error<
      "array is too large (%0 elements)">;
    
    // -Wpadded, -Wpacked
    def warn_padded_struct_field : Warning<

      "packed attribute is unnecessary for %0">, InGroup<Packed>, DefaultIgnore;
    
    def err_typecheck_negative_array_size : Error<"array size is negative">;
    def warn_typecheck_function_qualifiers_ignored : Warning<
      "'%0' qualifier on function type %1 has no effect">,
      InGroup<IgnoredQualifiers>;

        return Base & 0x1;
      }
    

      /// \brief Determine the location of the 'return' keyword when initializing
      /// the result of a function call.
      SourceLocation getReturnLoc() const {

      CharUnits ElementAlign =
        BeginPtr.getAlignment().alignmentOfArrayElement(ElementSize);
    

      // If the initializer is an initializer list, first do the explicit elements.
      if (const InitListExpr *ILE = dyn_cast<InitListExpr>(Init)) {

        InitListElements = ILE->getNumInits();
    
        // If this is a multi-dimensional array new, we will initialize multiple

        CurPtr = Builder.CreateBitCast(CurPtr, BeginPtr.getType());
      }
    
      // If all elements have already been initialized, skip any further
      // initialization.
      llvm::ConstantInt *ConstNum = dyn_cast<llvm::ConstantInt>(NumElements);

      // If there is a brace-initializer, cannot allocate fewer elements than inits.
      unsigned minElements = 0;
      if (E->isArray() && E->hasInitializer()) {

          minElements = ILE->getNumInits();
      }
    

      //   conversion function to integral or unscoped enumeration type exists.
      // C++1y [expr.new]p6: The expression [...] is implicitly converted to
      //   std::size_t.

      if (ArraySize && !ArraySize->isTypeDependent()) {
        ExprResult ConvertedSize;
        if (getLangOpts().CPlusPlus14) {

        //   The expression in a direct-new-declarator shall have integral type
        //   with a non-negative value.
        //

        if (!ArraySize->isValueDependent()) {
          llvm::APSInt Value;
          // We've already performed any required implicit conversion to integer or
          // unscoped enumeration type.

          if (ArraySize->isIntegerConstantExpr(Value, Context)) {

              unsigned ActiveSizeBits =
                ConstantArrayType::getNumAddressingBits(Context, AllocType, Value);

            }

          } else if (TypeIdParens.isValid()) {
            // Can't have dynamic array size when the type-id is in parentheses.
            Diag(ArraySize->getLocStart(), diag::ext_new_paren_array_nonconst)

        }
      }
    
      // Array 'new' can't have any initializers except empty parentheses.
      // Initializer lists are also allowed, in C++11. Rely on the parser for the
      // dialect distinction.

      }
    
      // If we can perform the initialization, and we've not already done so,
      // do it now.
      if (!AllocType->isDependentType() &&
          !Expr::hasAnyTypeDependentArguments(
              llvm::makeArrayRef(Inits, NumInits))) {

        // C++11 [expr.new]p15:
        //   A new-expression that creates an object of type T initializes that
        //   object as follows:

    
        InitializedEntity Entity
          = InitializedEntity::InitializeNew(StartLoc, InitType);

        ExprResult FullInit = InitSeq.Perform(*this, Entity, Kind,
                                              MultiExprArg(Inits, NumInits));
        if (FullInit.isInvalid())
          return ExprError();
    
        // FullInit is our initializer; strip off CXXBindTemporaryExprs, because
        // we don't want the initialized object to be destructed.

        if (CXXBindTemporaryExpr *Binder =
                dyn_cast_or_null<CXXBindTemporaryExpr>(FullInit.get()))
          FullInit = Binder->getSubExpr();

            SemaRef.Diag(Entity.getDecl()->getLocation(),
                         diag::note_in_omitted_aggregate_initializer)
              << /*field*/1 << Entity.getDecl();

            SemaRef.Diag(Loc, diag::note_in_omitted_aggregate_initializer)

        }
        return ExprError();
      }

      unsigned NumElements = NumInits;
      if (const ArrayType *AType = SemaRef.Context.getAsArrayType(ILE->getType())) {
        ElementType = AType->getElementType();

          NumElements = CAType->getSize().getZExtValue();

        ElementEntity = InitializedEntity::InitializeElement(SemaRef.Context,
                                                             0, Entity);
      } else if (const VectorType *VType = ILE->getType()->getAs<VectorType>()) {

                                                         ArrayType::Normal, 0);
      }
      if (!hadError && VerifyOnly) {

        // FIXME: This needs to detect holes left by designated initializers too.

          CheckEmptyInitializable(InitializedEntity::InitializeElement(
                                                      SemaRef.Context, 0, Entity),
                                  IList->getLocEnd());

