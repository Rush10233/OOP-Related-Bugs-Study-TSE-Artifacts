ParsedType getConstructorName(IdentifierInfo &II, SourceLocation NameLoc,
                                    Scope *S, CXXScopeSpec &SS);

      CXXRecordDecl *getCurrentClass(Scope *S, const CXXScopeSpec *SS);

          // If we're in a context where the identifier could be a class name,
          // check whether this is a constructor declaration.
          if (getLangOpts().CPlusPlus && DSContext == DeclSpecContext::DSC_class &&
              Actions.isCurrentClassName(*Tok.getIdentifierInfo(), getCurScope()) &&
              isConstructorDeclarator(/*Unqualified*/true))
            goto DoneWithDeclSpec;
    

          ParsedType Ty = Actions.getConstructorName(*Id, IdLoc, getCurScope(), SS);
          if (!Ty)
            return true;

            ParsedType Ty = Actions.getConstructorName(
                *TemplateId->Name, TemplateId->TemplateNameLoc, getCurScope(), SS);
            if (!Ty)
              return true;

    /// Get the class that is directly named by the current context. This is the
    /// class for which an unqualified-id in this scope could name a constructor
    /// or destructor.
    ///
    /// If the scope specifier denotes a class, this will be that class.
    /// If the scope specifier is empty, this will be the class whose
    /// member-specification we are currently within. Otherwise, there
    /// is no such class.
    CXXRecordDecl *Sema::getCurrentClass(Scope *, const CXXScopeSpec *SS) {
      assert(getLangOpts().CPlusPlus && "No class names in C!");
    
      if (SS && SS->isInvalid())
        return nullptr;
    
      if (SS && SS->isNotEmpty()) {
        DeclContext *DC = computeDeclContext(*SS, true);
        return dyn_cast_or_null<CXXRecordDecl>(DC);
      }
    
      return dyn_cast_or_null<CXXRecordDecl>(CurContext);
    }
    

    bool Sema::isCurrentClassName(const IdentifierInfo &II, Scope *S,

      CXXRecordDecl *CurDecl = getCurrentClass(S, SS);
      return CurDecl && &II == CurDecl->getIdentifier();

          NamedDecl *D = (*I)->getUnderlyingDecl();
          if (((isa<FieldDecl>(D) || isa<UnresolvedUsingValueDecl>(D)) &&
               Record->hasUserDeclaredConstructor()) ||

            Diag((*I)->getLocation(), diag::err_member_name_of_class)

        if (auto *RD = dyn_cast<CXXRecordDecl>(D)) {
          // C++ [class.mem]p19:
          //   If T is the name of a class, then [every named member other than
          //   a non-static data member] shall have a name different from T
          if (RD->isInjectedClassName() && !isa<FieldDecl>(Target) &&
              !isa<IndirectFieldDecl>(Target) &&
              !isa<UnresolvedUsingValueDecl>(Target) &&
              DiagnoseClassNameShadow(
                  CurContext,
                  DeclarationNameInfo(Using->getDeclName(), Using->getLocation())))
            return true;
        }
    

    ParsedType Sema::getConstructorName(IdentifierInfo &II,
                                        SourceLocation NameLoc,
                                        Scope *S, CXXScopeSpec &SS) {
      CXXRecordDecl *CurClass = getCurrentClass(S, &SS);
      assert(CurClass && &II == CurClass->getIdentifier() &&
             "not a constructor name");
    
      if (SS.isNotEmpty() && RequireCompleteDeclContext(SS, CurClass))
        return ParsedType();
    
      // Find the injected-class-name declaration. Note that we make no attempt to
      // diagnose cases where the injected-class-name is shadowed: the only
      // declaration that can validly shadow the injected-class-name is a
      // non-static data member, and if the class contains both a non-static data
      // member and a constructor then it is ill-formed (we check that in
      // CheckCompletedCXXClass).
      CXXRecordDecl *InjectedClassName = nullptr;
      for (NamedDecl *ND : CurClass->lookup(&II)) {
        auto *RD = dyn_cast<CXXRecordDecl>(ND);
        if (RD && RD->isInjectedClassName()) {
          InjectedClassName = RD;
          break;
        }
      }
      assert(InjectedClassName && "couldn't find injected class name");
    
      QualType T = Context.getTypeDeclType(InjectedClassName);
      DiagnoseUseOfDecl(InjectedClassName, NameLoc);
      MarkAnyDeclReferenced(NameLoc, InjectedClassName, /*OdrUse=*/false);
    
      return ParsedType::make(T);
    }
    

