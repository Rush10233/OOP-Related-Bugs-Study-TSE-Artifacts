void CheckForIntOverflow(Expr *E);

                                     const ASTContext &Ctx, bool &IsConst) {

          !Ctx.getLangOpts().CPlusPlus11) {

      if (FastEvaluateAsRValue(this, Result, Ctx, IsConst))

      if (!FastEvaluateAsRValue(this, EvalResult, Ctx, IsConst)) {

    /// Diagnose when expression is an integer constant expression and its evaluation
    /// results in integer overflow
    void Sema::CheckForIntOverflow (Expr *E) {
      // Use a work list to deal with nested struct initializers.
      SmallVector<Expr *, 2> Exprs(1, E);
    
      do {
        Expr *E = Exprs.pop_back_val();
    
        if (isa<BinaryOperator>(E->IgnoreParenCasts())) {
          E->IgnoreParenCasts()->EvaluateForOverflow(Context);
          continue;
        }
    
        if (auto InitList = dyn_cast<InitListExpr>(E))
          Exprs.append(InitList->inits().begin(), InitList->inits().end());
    
        if (isa<ObjCBoxedExpr>(E))
          E->IgnoreParenCasts()->EvaluateForOverflow(Context);
      } while (!Exprs.empty());
    }
    

        CheckForIntOverflow(E);

FillInEmptyInitializations(BaseEntity, InnerILE,
                                   RequiresSecondPass, FillWithNoInit);

                                   RequiresSecondPass, /*FillWithNoInit =*/true);

                                   RequiresSecondPass, FillWithNoInit);

                                   RequiresSecondPass, /*FillWithNoInit =*/ true);

    /// appropriate type.

                                     FillWithNoInit);

                                     RequiresSecondPass, /*FillWithNoInit =*/ true);

        FillInEmptyInitializations(Entity, FullyStructuredList, RequiresSecondPass);

                                     RequiresSecondPass);

                                       RequiresSecondPass);

                                         RequiresSecondPass);

