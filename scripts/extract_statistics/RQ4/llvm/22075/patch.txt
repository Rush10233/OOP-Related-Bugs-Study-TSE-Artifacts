def err_declspec_after_virtspec : Error<
      "'%0' qualifier may not appear after the virtual specifier '%1'">;

      void MaybeParseAndDiagnoseDeclSpecAfterCXX11VirtSpecifierSeq(Declarator &D,
                                                                   VirtSpecifiers &VS);

      VirtSpecifiers() : Specifiers(0), LastSpecifier(VS_None) { }

      SourceLocation getFirstLocation() const { return FirstLocation; }

      Specifier getLastSpecifier() const { return LastSpecifier; }

      Specifier LastSpecifier;

      SourceLocation FirstLocation;

          // with the pure-specifier in the same way.

      } else {

        if (!VS.isUnset())
          MaybeParseAndDiagnoseDeclSpecAfterCXX11VirtSpecifierSeq(DeclaratorInfo, VS);
      }

          MaybeParseAndDiagnoseDeclSpecAfterCXX11VirtSpecifierSeq(DeclaratorInfo, VS);

    /// \brief Look for declaration specifiers possibly occurring after C++11
    /// virt-specifier-seq and diagnose them.
    void Parser::MaybeParseAndDiagnoseDeclSpecAfterCXX11VirtSpecifierSeq(
        Declarator &D,
        VirtSpecifiers &VS) {
      DeclSpec DS(AttrFactory);
    
      // GNU-style and C++11 attributes are not allowed here, but they will be
      // handled by the caller.  Diagnose everything else.
      ParseTypeQualifierListOpt(DS, AR_NoAttributesParsed, false);
      D.ExtendWithDeclSpec(DS);
    
      if (DS.getTypeQualifiers() != DeclSpec::TQ_unspecified) {
        auto DeclSpecCheck = [&] (DeclSpec::TQ TypeQual,
                                  const char *FixItName,
                                  SourceLocation SpecLoc,
                                  unsigned* QualifierLoc) {
          FixItHint Insertion;
          auto &Function = D.getFunctionTypeInfo();
          if (DS.getTypeQualifiers() & TypeQual) {
            if (!(Function.TypeQuals & TypeQual)) {
              std::string Name(FixItName);
              Name += " ";
              Insertion = FixItHint::CreateInsertion(VS.getFirstLocation(), Name.c_str());
              Function.TypeQuals |= TypeQual;
              *QualifierLoc = SpecLoc.getRawEncoding();
            }
            Diag(SpecLoc, diag::err_declspec_after_virtspec)
              << FixItName
              << VirtSpecifiers::getSpecifierName(VS.getLastSpecifier())
              << FixItHint::CreateRemoval(SpecLoc)
              << Insertion;
          }
        };
        auto &Function = D.getFunctionTypeInfo();
        DeclSpecCheck(DeclSpec::TQ_const, "const", DS.getConstSpecLoc(),
                      &Function.ConstQualifierLoc);
        DeclSpecCheck(DeclSpec::TQ_volatile, "volatile", DS.getVolatileSpecLoc(),
                      &Function.VolatileQualifierLoc);
        DeclSpecCheck(DeclSpec::TQ_restrict, "restrict", DS.getRestrictSpecLoc(),
                      &Function.RestrictQualifierLoc);
      }
    }
    

      if (!FirstLocation.isValid())
        FirstLocation = Loc;

      LastSpecifier = VS;

