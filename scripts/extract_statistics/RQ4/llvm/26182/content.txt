static void
    addAssociatedClassesAndNamespaces(AssociatedLookup &Result, QualType T);
    

    static void CollectEnclosingNamespace(Sema::AssociatedNamespaceSet &Namespaces,
                                          DeclContext *Ctx) {

    

      // contains all names of all its nested inline namespaces anyway, so we can
      // replace the entire inline namespace tree with its root.

        Ctx = Ctx->getParent();
    

    }
    
    // Add the associated classes and namespaces for argument-dependent

    static void
    addAssociatedClassesAndNamespaces(AssociatedLookup &Result,
                                      const TemplateArgument &Arg) {

      //   -- [...] ;
      switch (Arg.getKind()) {
        case TemplateArgument::Null:

      }
    }
    

    static void
    addAssociatedClassesAndNamespaces(AssociatedLookup &Result,
                                      CXXRecordDecl *Class) {

      if (Class->getDeclName() == Result.S.VAListTagName)
        return;
    

      //   [...]
      //     -- If T is a class type (including unions), its associated
      //        classes are: the class itself; the class of which it is a

    
      // Add the class of which it is a member, if any.
      DeclContext *Ctx = Class->getDeclContext();
      if (CXXRecordDecl *EnclosingClass = dyn_cast<CXXRecordDecl>(Ctx))
        Result.Classes.insert(EnclosingClass);

      // Add the associated namespace for this class.
      CollectEnclosingNamespace(Result.Namespaces, Ctx);
    

          break;
    
        //     -- If T is a class type (including unions), its associated

        case Type::Record: {
          CXXRecordDecl *Class =
              cast<CXXRecordDecl>(cast<RecordType>(T)->getDecl());
          addAssociatedClassesAndNamespaces(Result, Class);
          break;
        }
    

        case Type::Enum: {
          EnumDecl *Enum = cast<EnumType>(T)->getDecl();
    
          DeclContext *Ctx = Enum->getDeclContext();
          if (CXXRecordDecl *EnclosingClass = dyn_cast<CXXRecordDecl>(Ctx))
            Result.Classes.insert(EnclosingClass);
    

          CollectEnclosingNamespace(Result.Namespaces, Ctx);
    
          break;

