void PushFunctionScope();
      void PushBlockScope(Scope *BlockScope, BlockDecl *Block);
      sema::LambdaScopeInfo *PushLambdaScope();

      /// \brief This is used to inform Sema what the current TemplateParameterDepth
      /// is during Parsing.  Currently it is used to pass on the depth
      /// when parsing generic lambda 'auto' parameters.

                                     MultiTemplateParamsArg TemplateParameterLists,
                                     Expr *BitfieldWidth, const VirtSpecifiers &VS,
                                     InClassInitStyle InitStyle);

    
      MemInitResult ActOnMemInitializer(Decl *ConstructorD,
                                        Scope *S,

    
      SourceLocation EqualLoc;
    

      ExprResult Init = ParseCXXMemberInitializer(MI.Field, /*IsFunction=*/false, 
                                                  EqualLoc);
    

    
      // The next token should be our artificial terminating EOF token.
      if (Tok.isNot(tok::eof)) {

      }
    } // namespace
    

      FieldDecl *FD = cast<FieldDecl>(D);
      assert(FD->getInClassInitStyle() != ICIS_NoInit &&
             "must set init style when field is created");

          FieldDecl *NewField = FieldsWithMemberInitializers[I].second;
          Expr *OldInit = OldField->getInClassInitializer();
    

          ExprResult NewInit = SubstInitializer(OldInit, TemplateArgs,
                                                /*CXXDirectInit=*/false);

        }
      }
      // Instantiate late parsed attributes, and attach them to their decls.

