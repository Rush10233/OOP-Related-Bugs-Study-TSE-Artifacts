const TemplateSpecializationType *SpecParam =
              cast<TemplateSpecializationType>(Param);
    
          // When Arg cannot be a derived class, we can just try to deduce template
          // arguments from the template-id.
          const RecordType *RecordT = Arg->getAs<RecordType>();
          if (!(TDF & TDF_DerivedClass) || !RecordT)
            return DeduceTemplateArguments(S, TemplateParams, SpecParam, Arg, Info,
                                           Deduced);
    
          SmallVector<DeducedTemplateArgument, 8> DeducedOrig(Deduced.begin(),
                                                              Deduced.end());
    
          Sema::TemplateDeductionResult Result = DeduceTemplateArguments(
              S, TemplateParams, SpecParam, Arg, Info, Deduced);
    
          if (Result == Sema::TDK_Success)
            return Result;
    
          // We cannot inspect base classes as part of deduction when the type
          // is incomplete, so either instantiate any templates necessary to
          // complete the type, or skip over it if it cannot be completed.
          if (!S.isCompleteType(Info.getLocation(), Arg))
            return Result;
    
          // C++14 [temp.deduct.call] p4b3:
          //   If P is a class and P has the form simple-template-id, then the
          //   transformed A can be a derived class of the deduced A. Likewise if
          //   P is a pointer to a class of the form simple-template-id, the
          //   transformed A can be a pointer to a derived class pointed to by the
          //   deduced A.
          //
          //   These alternatives are considered only if type deduction would
          //   otherwise fail. If they yield more than one possible deduced A, the
          //   type deduction fails.
    
          // Reset the incorrectly deduced argument from above.
          Deduced = DeducedOrig;
    
          // Use data recursion to crawl through the list of base classes.
          // Visited contains the set of nodes we have already visited, while
          // ToVisit is our stack of records that we still need to visit.
          llvm::SmallPtrSet<const RecordType *, 8> Visited;
          SmallVector<const RecordType *, 8> ToVisit;
          ToVisit.push_back(RecordT);
          bool Successful = false;
          while (!ToVisit.empty()) {
            // Retrieve the next class in the inheritance hierarchy.
            const RecordType *NextT = ToVisit.pop_back_val();
    
            // If we have already seen this type, skip it.
            if (!Visited.insert(NextT).second)
              continue;

            // If this is a base class, try to perform template argument
            // deduction from it.
            if (NextT != RecordT) {
              TemplateDeductionInfo BaseInfo(Info.getLocation());
              Sema::TemplateDeductionResult BaseResult =
                  DeduceTemplateArguments(S, TemplateParams, SpecParam,
                                          QualType(NextT, 0), BaseInfo, Deduced);
    
              // If template argument deduction for this base was successful,
              // note that we had some success. Otherwise, ignore any deductions
              // from this base class.
              if (BaseResult == Sema::TDK_Success) {
                Successful = true;
                DeducedOrig.clear();
                DeducedOrig.append(Deduced.begin(), Deduced.end());
                Info.Param = BaseInfo.Param;
                Info.FirstArg = BaseInfo.FirstArg;
                Info.SecondArg = BaseInfo.SecondArg;
              } else
                Deduced = DeducedOrig;

            // Visit base classes
            CXXRecordDecl *Next = cast<CXXRecordDecl>(NextT->getDecl());
            for (const auto &Base : Next->bases()) {
              assert(Base.getType()->isRecordType() &&
                     "Base class that isn't a record?");
              ToVisit.push_back(Base.getType()->getAs<RecordType>());
            }

          if (Successful)
            return Sema::TDK_Success;
    

