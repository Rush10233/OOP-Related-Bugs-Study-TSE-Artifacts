if (getCXXABI().useThunkForDtorVariant(Dtor, GD.getDtorType())) {
          // Don't dllexport/import destructor thunks.
          GV->setDLLStorageClass(llvm::GlobalValue::DefaultStorageClass);
          return;
        }

      if (isa<CXXDestructorDecl>(D) &&
          getCXXABI().useThunkForDtorVariant(cast<CXXDestructorDecl>(D),
                                             GD.getDtorType())) {
        // Destructor variants in the Microsoft C++ ABI are always internal or
        // linkonce_odr thunks emitted on an as-needed basis.
        return Linkage == GVA_Internal ? llvm::GlobalValue::InternalLinkage
                                       : llvm::GlobalValue::LinkOnceODRLinkage;
      }

      // The complete destructor is equivalent to the base destructor for
      // classes with no virtual bases, so try to emit it as an alias.
      if (!dtor->getParent()->getNumVBases() &&
          (dtorType == StructorType::Complete || dtorType == StructorType::Base)) {
        bool ProducedAlias = !CGM.TryEmitDefinitionAsAlias(
            GlobalDecl(dtor, Dtor_Complete), GlobalDecl(dtor, Dtor_Base));
        if (ProducedAlias) {
          if (dtorType == StructorType::Complete)
            return;
          if (dtor->isVirtual())
            CGM.getVTables().EmitThunks(GlobalDecl(dtor, Dtor_Complete));
        }
      }

