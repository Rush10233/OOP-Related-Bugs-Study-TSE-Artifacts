/// a call of a virtual function.
      /// The "VirtualCall" argument is true iff the call itself is virtual.
      virtual llvm::Value *
      adjustThisArgumentForVirtualFunctionCall(CodeGenFunction &CGF, GlobalDecl GD,
                                               llvm::Value *This,
                                               bool VirtualCall) {

      if (MD->isVirtual()) {
        This = CGM.getCXXABI().adjustThisArgumentForVirtualFunctionCall(
            *this, MD, This, UseVirtualCall);
      }

      llvm::Value *
      adjustThisArgumentForVirtualFunctionCall(CodeGenFunction &CGF, GlobalDecl GD,
                                               llvm::Value *This,
                                               bool VirtualCall) override;

      CharUnits getVirtualFunctionPrologueThisAdjustment(GlobalDecl GD);
    

    CharUnits
    MicrosoftCXXABI::getVirtualFunctionPrologueThisAdjustment(GlobalDecl GD) {
      GD = GD.getCanonicalDecl();
      const CXXMethodDecl *MD = cast<CXXMethodDecl>(GD.getDecl());
    
      GlobalDecl LookupGD = GD;
      if (const CXXDestructorDecl *DD = dyn_cast<CXXDestructorDecl>(MD)) {
        // Complete destructors take a pointer to the complete object as a
        // parameter, thus don't need this adjustment.
        if (GD.getDtorType() == Dtor_Complete)
          return CharUnits();
    
        // There's no Dtor_Base in vftable but it shares the this adjustment with
        // the deleting one, so look it up instead.
        LookupGD = GlobalDecl(DD, Dtor_Deleting);
      }
    
      MicrosoftVTableContext::MethodVFTableLocation ML =
          CGM.getMicrosoftVTableContext().getMethodVFTableLocation(LookupGD);
      CharUnits Adjustment = ML.VFPtrOffset;
    
      // Normal virtual instance methods need to adjust from the vfptr that first
      // defined the virtual method to the virtual base subobject, but destructors
      // do not.  The vector deleting destructor thunk applies this adjustment for
      // us if necessary.
      if (isa<CXXDestructorDecl>(MD))
        Adjustment = CharUnits::Zero();
    
      if (ML.VBase) {
        const ASTRecordLayout &DerivedLayout =
            CGM.getContext().getASTRecordLayout(MD->getParent());
        Adjustment += DerivedLayout.getVBaseClassOffset(ML.VBase);
      }
    
      return Adjustment;
    }
    
    llvm::Value *MicrosoftCXXABI::adjustThisArgumentForVirtualFunctionCall(
        CodeGenFunction &CGF, GlobalDecl GD, llvm::Value *This, bool VirtualCall) {
      if (!VirtualCall) {
        // If the call of a virtual function is not virtual, we just have to
        // compensate for the adjustment the virtual function does in its prologue.
        CharUnits Adjustment = getVirtualFunctionPrologueThisAdjustment(GD);
        if (Adjustment.isZero())
          return This;
    
        unsigned AS = cast<llvm::PointerType>(This->getType())->getAddressSpace();
        llvm::Type *charPtrTy = CGF.Int8Ty->getPointerTo(AS);
        This = CGF.Builder.CreateBitCast(This, charPtrTy);
        assert(Adjustment.isPositive());
        return CGF.Builder.CreateConstGEP1_32(This, Adjustment.getQuantity());
      }
    

        This = CGF.Builder.CreateBitCast(This, charPtrTy);
        llvm::Value *VBaseOffset =
            GetVirtualBaseClassOffset(CGF, This, MD->getParent(), ML.VBase);
        This = CGF.Builder.CreateInBoundsGEP(This, VBaseOffset);

      CharUnits Adjustment = getVirtualFunctionPrologueThisAdjustment(GD);

      if (DD->isVirtual()) {
        assert(Type != CXXDtorType::Dtor_Deleting &&
               "The deleting destructor should only be called via a virtual call");
        This = adjustThisArgumentForVirtualFunctionCall(CGF, GlobalDecl(DD, Type),
                                                        This, false);
      }

      llvm::Value *VPtr =
          adjustThisArgumentForVirtualFunctionCall(CGF, GD, This, true);

      This = adjustThisArgumentForVirtualFunctionCall(CGF, GD, This, true);

