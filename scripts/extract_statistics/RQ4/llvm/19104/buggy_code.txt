/// a virtual function call.
      virtual llvm::Value *adjustThisArgumentForVirtualCall(CodeGenFunction &CGF,
                                                            GlobalDecl GD,
                                                            llvm::Value *This) {

      if (MD->isVirtual())
        This = CGM.getCXXABI().adjustThisArgumentForVirtualCall(*this, MD, This);

      if (DD->isVirtual())
        This = adjustThisArgumentForVirtualCall(CGF, GD, This);
    

      llvm::Value *adjustThisArgumentForVirtualCall(CodeGenFunction &CGF,
                                                    GlobalDecl GD,
                                                    llvm::Value *This) override;

    llvm::Value *MicrosoftCXXABI::adjustThisArgumentForVirtualCall(
        CodeGenFunction &CGF, GlobalDecl GD, llvm::Value *This) {

      // FIXME: consider splitting the vdtor vs regular method code into two
      // functions.

        bool AvoidVirtualOffset = false;
        if (isa<CXXDestructorDecl>(MD) && GD.getDtorType() == Dtor_Base) {
          // A base destructor can only be called from a complete destructor of the
          // same record type or another destructor of a more derived type;
          // or a constructor of the same record type if an exception is thrown.
          assert(isa<CXXDestructorDecl>(CGF.CurGD.getDecl()) ||
                 isa<CXXConstructorDecl>(CGF.CurGD.getDecl()));
          const CXXRecordDecl *CurRD =
              cast<CXXMethodDecl>(CGF.CurGD.getDecl())->getParent();
    
          if (MD->getParent() == CurRD) {
            if (isa<CXXDestructorDecl>(CGF.CurGD.getDecl()))
              assert(CGF.CurGD.getDtorType() == Dtor_Complete);
            if (isa<CXXConstructorDecl>(CGF.CurGD.getDecl()))
              assert(CGF.CurGD.getCtorType() == Ctor_Complete);
            // We're calling the main base dtor from a complete structor,
            // so we know the "this" offset statically.
            AvoidVirtualOffset = true;
          } else {
            // Let's see if we try to call a destructor of a non-virtual base.
            for (const auto &I : CurRD->bases()) {
              if (I.getType()->getAsCXXRecordDecl() != MD->getParent())
                continue;
              // If we call a base destructor for a non-virtual base, we statically
              // know where it expects the vfptr and "this" to be.
              // The total offset should reflect the adjustment done by
              // adjustThisParameterInVirtualFunctionPrologue().
              AvoidVirtualOffset = true;
              break;
            }
          }
        }
    
        if (AvoidVirtualOffset) {
          const ASTRecordLayout &Layout =
              CGF.getContext().getASTRecordLayout(MD->getParent());
          StaticOffset += Layout.getVBaseClassOffset(ML.VBase);
        } else {
          This = CGF.Builder.CreateBitCast(This, charPtrTy);
          llvm::Value *VBaseOffset =
              GetVirtualBaseClassOffset(CGF, This, MD->getParent(), ML.VBase);
          This = CGF.Builder.CreateInBoundsGEP(This, VBaseOffset);
        }

      GD = GD.getCanonicalDecl();
      const CXXMethodDecl *MD = cast<CXXMethodDecl>(GD.getDecl());
    
      GlobalDecl LookupGD = GD;
      if (const CXXDestructorDecl *DD = dyn_cast<CXXDestructorDecl>(MD)) {
        // Complete destructors take a pointer to the complete object as a
        // parameter, thus don't need this adjustment.
        if (GD.getDtorType() == Dtor_Complete)
          return This;
    
        // There's no Dtor_Base in vftable but it shares the this adjustment with
        // the deleting one, so look it up instead.
        LookupGD = GlobalDecl(DD, Dtor_Deleting);
      }
    

    
      MicrosoftVTableContext::MethodVFTableLocation ML =
          CGM.getMicrosoftVTableContext().getMethodVFTableLocation(LookupGD);
      CharUnits Adjustment = ML.VFPtrOffset;
    
      // Normal virtual instance methods need to adjust from the vfptr that first
      // defined the virtual method to the virtual base subobject, but destructors
      // do not.  The vector deleting destructor thunk applies this adjustment for
      // us if necessary.
      if (isa<CXXDestructorDecl>(MD))
        Adjustment = CharUnits::Zero();
    
      if (ML.VBase) {
        const ASTRecordLayout &DerivedLayout =
            CGF.getContext().getASTRecordLayout(MD->getParent());
        Adjustment += DerivedLayout.getVBaseClassOffset(ML.VBase);
      }
    

      if (DD->isVirtual())
        This = adjustThisArgumentForVirtualCall(CGF, GlobalDecl(DD, Type), This);

      llvm::Value *VPtr = adjustThisArgumentForVirtualCall(CGF, GD, This);

      This = adjustThisArgumentForVirtualCall(CGF, GD, This);

