EmitStmt(S.getInit());
    
      if (S.getConditionVariable())

    
      // If the condition constant folds and can be elided, try to avoid emitting
      // the condition and the dead arm of the if/else.

      RunCleanupsScope ConditionScope(*this);
    
      if (S.getConditionVariable())

    
      // Evaluate the conditional in the while header.  C99 6.8.5.1: The
      //

        // If the for statement has a condition scope, emit the local variable
        // declaration.
        if (S.getConditionVariable()) {

        }
    
        llvm::BasicBlock *ExitBlock = LoopExit.getBlock();

          // Emit the condition variable if needed inside the entire cleanup scope
          // used by this special case for constant folded switches.
          if (S.getConditionVariable())

    
          // At this point, we are no longer "within" a switch instance, so
          // we can temporarily enforce this to ensure that any embedded case

        EmitStmt(S.getInit());
    
      if (S.getConditionVariable())

      llvm::Value *CondV = EmitScalarExpr(S.getCond());
    
      // Create basic block to hold stuff that comes after switch

