
      enum class InlineVariableDefinitionKind {
        None,        ///< Not an inline variable.
        Weak,        ///< Weak definition of inline variable.
        WeakUnknown, ///< Weak for now, might become strong later in this TU.
        Strong       ///< Strong definition.
      };
      /// \brief Determine whether a definition of this inline variable should
      /// be treated as a weak or strong definition. For compatibility with
      //
      /// out-of-line declaration of the member, we may promote it from weak to
      /// strong.
      InlineVariableDefinitionKind
      getInlineVariableDefinitionKind(const VarDecl *VD) const;
    

    ASTContext::InlineVariableDefinitionKind
    ASTContext::getInlineVariableDefinitionKind(const VarDecl *VD) const {
      if (!VD->isInline())
        return InlineVariableDefinitionKind::None;
    
      // In almost all cases, it's a weak definition.
      auto *First = VD->getFirstDecl();
      if (!First->isConstexpr() || First->isInlineSpecified() ||
          !VD->isStaticDataMember())
        return InlineVariableDefinitionKind::Weak;
    
      // If there's a file-context declaration in this translation unit, it's a
      // non-discardable definition.
      for (auto *D : VD->redecls())
        if (D->getLexicalDeclContext()->isFileContext())
          return InlineVariableDefinitionKind::Strong;
    
      // If we've not seen one yet, we don't know.
      return InlineVariableDefinitionKind::WeakUnknown;
    }
    

      // Most non-template variables have strong linkage; inline variables are
      // linkonce_odr or (occasionally, for compatibility) weak_odr.
      GVALinkage StrongLinkage;
      switch (Context.getInlineVariableDefinitionKind(VD)) {
      case ASTContext::InlineVariableDefinitionKind::None:
        StrongLinkage = GVA_StrongExternal;
        break;
      case ASTContext::InlineVariableDefinitionKind::Weak:
      case ASTContext::InlineVariableDefinitionKind::WeakUnknown:

        break;
      case ASTContext::InlineVariableDefinitionKind::Strong:
        StrongLinkage = GVA_StrongODR;
        break;
      }

      if (const auto *VD = dyn_cast<VarDecl>(Global))
        if (Context.getInlineVariableDefinitionKind(VD) ==
            ASTContext::InlineVariableDefinitionKind::WeakUnknown)
          // A definition of an inline constexpr static data member may change
          // linkage later if it's redeclared outside the class.
          return false;

            !Context.isMSStaticDataMemberInlineDefinition(VD)) {
          // If this declaration may have caused an inline variable definition to
          // change linkage, make sure that it's emitted.
          if (Context.getInlineVariableDefinitionKind(VD) ==
              ASTContext::InlineVariableDefinitionKind::Strong)
            GetAddrOfGlobalVar(VD);

        }

