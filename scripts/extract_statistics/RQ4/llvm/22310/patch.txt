bool OnlyListConstructors) {

          //   ... and the constructor or user-defined conversion function is a
          //   candidate by
          //   ¡ª 13.3.1.3, when the argument is the temporary in the second step
          //     of a class copy-initialization, or
          //   ¡ª 13.3.1.4, 13.3.1.5, or 13.3.1.6 (in all cases),
          //   user-defined conversion sequences are not considered.
          if (CopyInitializing && Constructor->isCopyOrMoveConstructor())

      // C++11 [over.match.list]p1, per DR1467:

                                              /*OnlyListConstructor=*/true);

                                            /*OnlyListConstructors=*/false);

      // C++11 [dcl.init.list]p3, per DR1467:

      // - Otherwise, if T is an aggregate, [...] (continue below).
      if (S.getLangOpts().CPlusPlus11 && InitList->getNumInits() == 1) {

    
      // List-initialization sequence L1 is a better conversion sequence than
      // list-initialization sequence L2 if:
      // - L1 converts to std::initializer_list<X> for some X and L2 does not, or,
      //   if not that,
      // - L1 converts to type ¡°array of N1 T¡±, L2 converts to type ¡°array of N2 T¡±,
      //   and N1 is smaller than N2.,
      // even if one of the other rules in this paragraph would otherwise apply.
      if (!ICS1.isBad()) {
        if (ICS1.isStdInitializerListElement() &&
            !ICS2.isStdInitializerListElement())
          return ImplicitConversionSequence::Better;
        if (!ICS1.isStdInitializerListElement() &&
            ICS2.isStdInitializerListElement())
          return ImplicitConversionSequence::Worse;
      }
    

        // Standard conversion sequence S1 is a better conversion sequence than
        // standard conversion sequence S2 if [...]

      // Per DR1467:
      //   If the parameter type is a class X and the initializer list has a single
      //   element of type cv U, where U is X or a class derived from X, the
      //   implicit conversion sequence is the one required to convert the element
      //   to the parameter type.
      //
      //   Otherwise, if the parameter type is a character array [... ]
      //   and the initializer list has a single element that is an
      //   appropriately-typed string literal (8.5.2 [dcl.init.string]), the
      //   implicit conversion sequence is the identity conversion.
      if (From->getNumInits() == 1) {
        if (ToType->isRecordType()) {
          QualType InitType = From->getInit(0)->getType();
          if (S.Context.hasSameUnqualifiedType(InitType, ToType) ||
              S.IsDerivedFrom(InitType, ToType))
            return TryCopyInitialization(S, From->getInit(0), ToType,
                                         SuppressUserConversions,
                                         InOverloadResolution,
                                         AllowObjCWritebackConversion);
        }
        if (S.Context.getAsArrayType(ToType)) {
          InitializedEntity Entity =
            InitializedEntity::InitializeParameter(S.Context, ToType,
                                                   /*Consumed=*/false);
          if (S.CanPerformCopyInitialization(Entity, From)) {
            Result.setStandard();
            Result.Standard.setAsIdentityConversion();
            Result.Standard.setFromType(ToType);
            Result.Standard.setAllToTypes(ToType);
            return Result;
          }
        }
      }
    
      // C++14 [over.ics.list]p2: Otherwise, if the parameter type [...] (below).

      //
      // C++14 [over.ics.list]p3:
      //   Otherwise, if the parameter type is ¡°array of N X¡±, if the initializer
      //   list has exactly N elements or if it has fewer than N elements and X is
      //   default-constructible, and if all the elements of the initializer list
      //   can be implicitly converted to X, the implicit conversion sequence is
      //   the worst conversion necessary to convert an element of the list to X.

      // C++14 [over.ics.list]p4:

      // C++14 [over.ics.list]p5:

      // C++14 [over.ics.list]p6:

      // C++14 [over.ics.list]p7:

        //    - if the initializer list has one element that is not itself an
        //      initializer list, the implicit conversion sequence is the one
        //      required to convert the element to the parameter type.

        if (NumInits == 1 && !dyn_cast<InitListExpr>(From->getInit(0)))

      // C++14 [over.ics.list]p8:

