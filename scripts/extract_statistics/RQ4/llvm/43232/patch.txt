/// Determine whether Entity is an entity for which it is idiomatic to elide
    /// the braces in aggregate initialization.
    static bool isIdiomaticBraceElisionEntity(const InitializedEntity &Entity) {
      // Recursive initialization of the one and only field within an aggregate
      // class is considered idiomatic. This case arises in particular for
      // initialization of std::array, where the C++ standard suggests the idiom of
      //
      //   std::array<T, N> arr = {1, 2, 3};
      //
      // (where std::array is an aggregate struct containing a single array field.
    
      // FIXME: Should aggregate initialization of a struct with a single
      // base class and no members also suppress the warning?
      if (Entity.getKind() != InitializedEntity::EK_Member || !Entity.getParent())
        return false;
    
      auto *ParentRD =
          Entity.getParent()->getType()->castAs<RecordType>()->getDecl();
      if (CXXRecordDecl *CXXRD = dyn_cast<CXXRecordDecl>(ParentRD))
        if (CXXRD->getNumBases())
          return false;
    
      auto FieldIt = ParentRD->field_begin();
      assert(FieldIt != ParentRD->field_end() &&
             "no fields but have initializer for member?");
      return ++FieldIt == ParentRD->field_end();
    }
    

            !ParentIList->isIdiomaticZeroInitializer(SemaRef.getLangOpts()) &&
            !isIdiomaticBraceElisionEntity(Entity)) {

