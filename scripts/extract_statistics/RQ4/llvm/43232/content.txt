return InitializableMembers - structDecl->hasFlexibleArrayMember();
    }
    

    /// Check whether the range of the initializer \p ParentIList from element
    /// \p Index onwards can be used to initialize an object of type \p T. Update
    /// \p Index to indicate how many elements of the list were consumed.

    
        // Complain about missing braces.
        if ((T->isArrayType() || T->isRecordType()) &&

          SemaRef.Diag(StructuredSubobjectInitList->getLocStart(),
                       diag::warn_missing_braces)
              << StructuredSubobjectInitList->getSourceRange()

