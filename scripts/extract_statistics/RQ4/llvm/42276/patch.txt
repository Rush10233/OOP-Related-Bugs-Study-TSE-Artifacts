Address CodeGenModule::createUnnamedGlobalFrom(const VarDecl &D,
                                                   llvm::Constant *Constant,
                                                   CharUnits Align) {

          return getMangledName(FD);

          llvm_unreachable("expected a function or method");

      // Form a simple per-variable cache of these values in case we find we
      // want to reuse them.
      llvm::GlobalVariable *&CacheEntry = InitializerConstants[&D];
      if (!CacheEntry || CacheEntry->getInitializer() != Constant) {
        auto *Ty = Constant->getType();
        bool isConstant = true;
        llvm::GlobalVariable *InsertBefore = nullptr;
        unsigned AS =
            getContext().getTargetAddressSpace(getStringLiteralAddressSpace());
        std::string Name;
        if (D.hasGlobalStorage())
          Name = getMangledName(&D).str() + ".const";
        else if (const DeclContext *DC = D.getParentFunctionOrMethod())
          Name = ("__const." + FunctionName(DC) + "." + D.getName()).str();
        else
          llvm_unreachable("local variable has no parent function or method");
        llvm::GlobalVariable *GV = new llvm::GlobalVariable(
            getModule(), Ty, isConstant, llvm::GlobalValue::PrivateLinkage,
            Constant, Name, InsertBefore, llvm::GlobalValue::NotThreadLocal, AS);
        GV->setAlignment(Align.getQuantity());
        GV->setUnnamedAddr(llvm::GlobalValue::UnnamedAddr::Global);
        CacheEntry = GV;
      } else if (CacheEntry->getAlignment() < Align.getQuantity()) {
        CacheEntry->setAlignment(Align.getQuantity());
      }
    
      return Address(CacheEntry, Align);
    }
    
    static Address createUnnamedGlobalForMemcpyFrom(CodeGenModule &CGM,
                                                    const VarDecl &D,
                                                    CGBuilderTy &Builder,
                                                    llvm::Constant *Constant,
                                                    CharUnits Align) {
      Address SrcPtr = CGM.createUnnamedGlobalFrom(D, Constant, Align);
      llvm::Type *BP = llvm::PointerType::getInt8PtrTy(CGM.getLLVMContext(),
                                                       SrcPtr.getAddressSpace());

      Builder.CreateMemCpy(Loc,
                           createUnnamedGlobalForMemcpyFrom(
                               CGM, D, Builder, constant, Loc.getAlignment()),
                           SizeVal, isVolatile);

          Builder.CreateMemCpy(Address(Cur, CurAlign),
                               createUnnamedGlobalForMemcpyFrom(
                                   CGM, D, Builder, Constant, ConstantAlign),
                               BaseSizeInChars, isVolatile);

    /// an l-value.  This is just an optimization, but it avoids us needing
    /// to emit global copies of variables if they're named without triggering
    /// a formal use in a context where we can't emit a direct reference to them,
    /// for instance if a block or lambda or a member of a local class uses a
    /// const int variable or constexpr variable from an enclosing function.

    /// Determine whether we can emit a reference to \p VD from the current
    /// context, despite not necessarily having seen an odr-use of the variable in
    /// this context.
    static bool canEmitSpuriousReferenceToVariable(CodeGenFunction &CGF,
                                                   const DeclRefExpr *E,
                                                   const VarDecl *VD,
                                                   bool IsConstant) {
      // For a variable declared in an enclosing scope, do not emit a spurious
      // reference even if we have a capture, as that will emit an unwarranted
      // reference to our capture state, and will likely generate worse code than
      // emitting a local copy.
      if (E->refersToEnclosingVariableOrCapture())
        return false;
    
      // For a local declaration declared in this function, we can always reference
      // it even if we don't have an odr-use.
      if (VD->hasLocalStorage()) {
        return VD->getDeclContext() ==
               dyn_cast_or_null<DeclContext>(CGF.CurCodeDecl);
      }
    
      // For a global declaration, we can emit a reference to it if we know
      // for sure that we are able to emit a definition of it.
      VD = VD->getDefinition(CGF.getContext());
      if (!VD)
        return false;
    
      // Don't emit a spurious reference if it might be to a variable that only
      // exists on a different device / target.
      // FIXME: This is unnecessarily broad. Check whether this would actually be a
      // cross-target reference.
      if (CGF.getLangOpts().OpenMP || CGF.getLangOpts().CUDA ||
          CGF.getLangOpts().OpenCL) {
        return false;
      }
    
      // We can emit a spurious reference only if the linkage implies that we'll
      // be emitting a non-interposable symbol that will be retained until link
      // time.
      switch (CGF.CGM.getLLVMLinkageVarDefinition(VD, IsConstant)) {
      case llvm::GlobalValue::ExternalLinkage:
      case llvm::GlobalValue::LinkOnceODRLinkage:
      case llvm::GlobalValue::WeakODRLinkage:
      case llvm::GlobalValue::InternalLinkage:
      case llvm::GlobalValue::PrivateLinkage:
        return true;
      default:
        return false;
      }
    }
    

      assert(E->isNonOdrUse() != NOUR_Unevaluated &&
             "should not emit an unevaluated operand");
    

        // If this DeclRefExpr does not constitute an odr-use of the variable,
        // we're not permitted to emit a reference to it in general, and it might
        // not be captured if capture would be necessary for a use. Emit the
        // constant value directly instead.
        if (E->isNonOdrUse() == NOUR_Constant &&
            (VD->getType()->isReferenceType() ||
             !canEmitSpuriousReferenceToVariable(*this, E, VD, true))) {
          VD->getAnyInitializer(VD);
          llvm::Constant *Val = ConstantEmitter(*this).emitAbstract(
              E->getLocation(), *VD->evaluateValue(), VD->getType());
          assert(Val && "failed to emit constant expression");
    
          Address Addr = Address::invalid();
          if (!VD->getType()->isReferenceType()) {
            // Spill the constant value to a global.
            Addr = CGM.createUnnamedGlobalFrom(*VD, Val,
                                               getContext().getDeclAlign(VD));
          } else {
            // Should we be using the alignment of the constant pointer we emitted?
            CharUnits Alignment =
                getNaturalTypeAlignment(E->getType(),
                                        /* BaseInfo= */ nullptr,
                                        /* TBAAInfo= */ nullptr,
                                        /* forPointeeType= */ true);
            Addr = Address(Val, Alignment);
          }
          return MakeAddrLValue(Addr, T, AlignmentSource::Decl);

      assert((ND->isUsed(false) || !isa<VarDecl>(ND) || E->isNonOdrUse() ||

      /// Variables for which we've emitted globals containing their constant
      /// values along with the corresponding globals, for opportunistic reuse.
      llvm::DenseMap<const VarDecl*, llvm::GlobalVariable*> InitializerConstants;
    

      Address createUnnamedGlobalFrom(const VarDecl &D, llvm::Constant *Constant,
                                      CharUnits Align);
    

/// Perform a load from a glvalue, producing an rvalue.
        SK_LValueToRValue,
    

      /// Add a new step that performs a load of the given type.
      ///
      /// Although the term "LValueToRValue" is conventional, this applies to both
      /// lvalues and xvalues.
      void AddLValueToRValueStep(QualType Ty);
    

    static Address createUnnamedGlobalFrom(CodeGenModule &CGM, const VarDecl &D,
                                           CGBuilderTy &Builder,
                                           llvm::Constant *Constant,
                                           CharUnits Align) {

          return CGM.getMangledName(FD);

      auto *Ty = Constant->getType();
      bool isConstant = true;
      llvm::GlobalVariable *InsertBefore = nullptr;
      unsigned AS = CGM.getContext().getTargetAddressSpace(
          CGM.getStringLiteralAddressSpace());
      llvm::GlobalVariable *GV = new llvm::GlobalVariable(
          CGM.getModule(), Ty, isConstant, llvm::GlobalValue::PrivateLinkage,
          Constant,
          "__const." + FunctionName(D.getParentFunctionOrMethod()) + "." +
              D.getName(),
          InsertBefore, llvm::GlobalValue::NotThreadLocal, AS);
      GV->setAlignment(Align.getQuantity());
      GV->setUnnamedAddr(llvm::GlobalValue::UnnamedAddr::Global);
    
      Address SrcPtr = Address(GV, Align);
      llvm::Type *BP = llvm::PointerType::getInt8PtrTy(CGM.getLLVMContext(), AS);

      Builder.CreateMemCpy(
          Loc,
          createUnnamedGlobalFrom(CGM, D, Builder, constant, Loc.getAlignment()),
          SizeVal, isVolatile);

          Builder.CreateMemCpy(
              Address(Cur, CurAlign),
              createUnnamedGlobalFrom(CGM, D, Builder, Constant, ConstantAlign),
              BaseSizeInChars, isVolatile);

    /// an l-value.  This is actually more than an optimization: we can't
    /// produce an l-value for variables that we never actually captured
    /// in a block or lambda, which means const int variables or constexpr
    /// literals or similar.

        // A DeclRefExpr for a reference initialized by a constant expression can
        // appear without being odr-used. Directly emit the constant initializer.
        VD->getAnyInitializer(VD);
        if (E->isNonOdrUse() == NOUR_Constant && VD->getType()->isReferenceType()) {
          llvm::Constant *Val =
            ConstantEmitter(*this).emitAbstract(E->getLocation(),
                                                *VD->evaluateValue(),
                                                VD->getType());
          assert(Val && "failed to emit reference constant expression");
          // FIXME: Eventually we will want to emit vector element references.
    
          // Should we be using the alignment of the constant pointer we emitted?
          CharUnits Alignment = getNaturalTypeAlignment(E->getType(),
                                                        /* BaseInfo= */ nullptr,
                                                        /* TBAAInfo= */ nullptr,
                                                        /* forPointeeType= */ true);
          return MakeAddrLValue(Address(Val, Alignment), T, AlignmentSource::Decl);

      assert((ND->isUsed(false) || !isa<VarDecl>(ND) ||

            CGF.getTypes().isPointerZeroInitializable(E->getType());

          (void) Visit(E);

          (void) Visit(E);

