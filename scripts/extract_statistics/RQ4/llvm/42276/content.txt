return constant;
    }
    

      auto FunctionName = [&](const DeclContext *DC) -> std::string {
        if (const auto *FD = dyn_cast<FunctionDecl>(DC)) {
          if (const auto *CC = dyn_cast<CXXConstructorDecl>(FD))
            return CC->getNameAsString();
          if (const auto *CD = dyn_cast<CXXDestructorDecl>(FD))
            return CD->getNameAsString();

        } else if (const auto *OM = dyn_cast<ObjCMethodDecl>(DC)) {
          return OM->getNameAsString();
        } else if (isa<BlockDecl>(DC)) {
          return "<block>";
        } else if (isa<CapturedDecl>(DC)) {
          return "<captured>";
        } else {

        }
      };
    

      if (SrcPtr.getType() != BP)
        SrcPtr = Builder.CreateBitCast(SrcPtr, BP);
      return SrcPtr;

      }
    
      // Copy from a global.

    }
    
    static void emitStoresForZeroInit(CodeGenModule &CGM, const VarDecl &D,

          llvm::PHINode *Cur = Builder.CreatePHI(Begin.getType(), 2, "vla.cur");
          Cur->addIncoming(Begin.getPointer(), OriginBB);
          CharUnits CurAlign = Loc.getAlignment().alignmentOfArrayElement(EltSize);

          llvm::Value *Next =
              Builder.CreateInBoundsGEP(Int8Ty, Cur, BaseSizeInChars, "vla.next");
          llvm::Value *Done = Builder.CreateICmpEQ(Next, End, "vla-init.isdone");

    }
    
    /// Try to emit a reference to the given value without producing it as

    CodeGenFunction::ConstantEmission
    CodeGenFunction::tryEmitAsConstant(DeclRefExpr *refExpr) {
      ValueDecl *value = refExpr->getDecl();

      return LValue::MakeGlobalReg(Address(Ptr, Alignment), VD->getType());
    }
    

    LValue CodeGenFunction::EmitDeclRefLValue(const DeclRefExpr *E) {
      const NamedDecl *ND = E->getDecl();
      QualType T = E->getType();
    

      if (const auto *VD = dyn_cast<VarDecl>(ND)) {
        // Global Named registers access via intrinsics only
        if (VD->getStorageClass() == SC_Register &&
            VD->hasAttr<AsmLabelAttr>() && !VD->isLocalVarDecl())
          return EmitGlobalNamedRegister(VD, CGM);
    

        }
    
        // FIXME: Handle other kinds of non-odr-use DeclRefExprs.

      // FIXME: We should be able to assert this for FunctionDecls as well!
      // FIXME: We should be able to assert this for all DeclRefExprs, not just
      // those with a valid source location.

              !E->getLocation().isValid()) &&
             "Should not use decl without marking it used!");
    

      llvm::SmallVector<std::pair<llvm::GlobalValue *, llvm::Constant *>, 8>
        GlobalValReplacements;
    

      /// Set of global decls for which we already diagnosed mangled name conflict.
      /// Required to not issue a warning (on a mangling conflict) multiple times
      /// for the same decl.

        StaticLocalDeclGuardMap[D] = C;
      }
    

      bool lookupRepresentativeDecl(StringRef MangledName,
                                    GlobalDecl &Result) const;
    

/// Perform a conversion adding _Atomic to a type.
        SK_AtomicConversion,
    

        /// Perform an implicit conversion sequence.
        SK_ConversionSequence,
    

      /// type.
      void AddAtomicConversionStep(QualType Ty);
    

      /// Add a new step that applies an implicit conversion sequence.
      void AddConversionSequenceStep(const ImplicitConversionSequence &ICS,
                                     QualType T, bool TopLevelOfInitList = false);

                                               ExprValueKind VK) {
      unsigned PathSize = (BasePath ? BasePath->size() : 0);
      void *Buffer = C.Allocate(totalSizeToAlloc<CXXBaseSpecifier *>(PathSize));
      ImplicitCastExpr *E =
        new (Buffer) ImplicitCastExpr(T, Kind, Operand, PathSize, VK);
      if (PathSize)

      return constant;
    }
    

      auto FunctionName = [&](const DeclContext *DC) -> std::string {
        if (const auto *FD = dyn_cast<FunctionDecl>(DC)) {
          if (const auto *CC = dyn_cast<CXXConstructorDecl>(FD))
            return CC->getNameAsString();
          if (const auto *CD = dyn_cast<CXXDestructorDecl>(FD))
            return CD->getNameAsString();

        } else if (const auto *OM = dyn_cast<ObjCMethodDecl>(DC)) {
          return OM->getNameAsString();
        } else if (isa<BlockDecl>(DC)) {

        }
      };
    

      if (SrcPtr.getType() != BP)
        SrcPtr = Builder.CreateBitCast(SrcPtr, BP);
      return SrcPtr;

      }
    
      // Copy from a global.

    }
    
    static void emitStoresForZeroInit(CodeGenModule &CGM, const VarDecl &D,

          llvm::PHINode *Cur = Builder.CreatePHI(Begin.getType(), 2, "vla.cur");
          Cur->addIncoming(Begin.getPointer(), OriginBB);
          CharUnits CurAlign = Loc.getAlignment().alignmentOfArrayElement(EltSize);

          llvm::Value *Next =
              Builder.CreateInBoundsGEP(Int8Ty, Cur, BaseSizeInChars, "vla.next");
          llvm::Value *Done = Builder.CreateICmpEQ(Next, End, "vla-init.isdone");

    }
    
    /// Try to emit a reference to the given value without producing it as

    CodeGenFunction::ConstantEmission
    CodeGenFunction::tryEmitAsConstant(DeclRefExpr *refExpr) {
      ValueDecl *value = refExpr->getDecl();

      return LValue::MakeGlobalReg(Address(Ptr, Alignment), VD->getType());
    }
    
    LValue CodeGenFunction::EmitDeclRefLValue(const DeclRefExpr *E) {
      const NamedDecl *ND = E->getDecl();
      QualType T = E->getType();
    
      if (const auto *VD = dyn_cast<VarDecl>(ND)) {
        // Global Named registers access via intrinsics only
        if (VD->getStorageClass() == SC_Register &&
            VD->hasAttr<AsmLabelAttr>() && !VD->isLocalVarDecl())
          return EmitGlobalNamedRegister(VD, CGM);
    

        }
    
        // FIXME: Handle other kinds of non-odr-use DeclRefExprs.

      // FIXME: We should be able to assert this for FunctionDecls as well!
      // FIXME: We should be able to assert this for all DeclRefExprs, not just
      // those with a valid source location.

              !E->getLocation().isValid()) &&
             "Should not use decl without marking it used!");
    

      // (int*)0 - Null pointer expressions.
      if (const CastExpr *ICE = dyn_cast<CastExpr>(E))
        return ICE->getCastKind() == CK_NullToPointer &&

      // '\0'
      if (const CharacterLiteral *CL = dyn_cast<CharacterLiteral>(E))
        return CL->getValue() == 0;

    
      case CK_NullToPointer:
        if (MustVisitNullValue(E))

    
        return CGF.CGM.getNullPointer(cast<llvm::PointerType>(ConvertType(DestTy)),
                                  DestTy);
    
      case CK_NullToMemberPointer: {
        if (MustVisitNullValue(E))

    
        const MemberPointerType *MPT = CE->getType()->getAs<MemberPointerType>();
        return CGF.CGM.getCXXABI().EmitNullMemberPointer(MPT);

      llvm::SmallVector<std::pair<llvm::GlobalValue *, llvm::Constant *>, 8>
        GlobalValReplacements;
    
      /// Set of global decls for which we already diagnosed mangled name conflict.
      /// Required to not issue a warning (on a mangling conflict) multiple times
      /// for the same decl.

        StaticLocalDeclGuardMap[D] = C;
      }
    
      bool lookupRepresentativeDecl(StringRef MangledName,
                                    GlobalDecl &Result) const;
    

