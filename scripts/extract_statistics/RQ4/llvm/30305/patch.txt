def note_ovl_candidate_inherited_constructor_slice : Note<
        "constructor inherited from base class cannot be used to initialize from "
        "an argument of the derived class type">;

    
        /// This inherited constructor is not viable because it would slice the
        /// argument.
        ovl_fail_inhctor_slice,

      // C++ [over.best.ics]p4+: (proposed DR resolution)
      //   If the target is the first parameter of an inherited constructor when
      //   constructing an object of type C with an argument list that has exactly
      //   one expression, an implicit conversion sequence cannot be formed if C is
      //   reference-related to the type that the argument would have after the
    
      //   standard conversion sequence. 
      auto *Shadow = dyn_cast<ConstructorUsingShadowDecl>(FoundDecl.getDecl());
      if (Shadow && Args.size() == 1 && !isa<InitListExpr>(Args.front())) {
        bool DerivedToBase, ObjCConversion, ObjCLifetimeConversion;
        QualType ConvertedArgumentType = Args.front()->getType();
        if (Candidate.Conversions[0].isUserDefined())
          ConvertedArgumentType =
              Candidate.Conversions[0].UserDefined.After.getFromType();
        if (CompareReferenceRelationship(Args.front()->getLocStart(),
                                         Context.getRecordType(Shadow->getParent()),
                                         ConvertedArgumentType, DerivedToBase,
                                         ObjCConversion,
                                         ObjCLifetimeConversion) >= Ref_Related) {
          Candidate.Viable = false;
          Candidate.FailureKind = ovl_fail_inhctor_slice;
          return;
        }
      }
    

      case ovl_fail_inhctor_slice:
        S.Diag(Fn->getLocation(),
               diag::note_ovl_candidate_inherited_constructor_slice);
        MaybeEmitInheritedConstructorNote(S, Cand->FoundDecl);
        return;
    

