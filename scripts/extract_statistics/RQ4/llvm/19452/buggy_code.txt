OverloadCandidateSet(SourceLocation Loc) : Loc(Loc), NumInlineSequences(0){}

                                                bool Operator, SourceLocation Loc,

      void ArgumentDependentLookup(DeclarationName Name, bool Operator,
                                   SourceLocation Loc,
                                   ArrayRef<Expr *> Args,
                                   ADLResult &Functions);

      OverloadCandidateSet CandidateSet(Loc);

            OverloadCandidateSet OCS(R.getNameLoc());

            OverloadCandidateSet OCS(NameLoc);

      OverloadCandidateSet Candidates(StartLoc);

      OverloadCandidateSet CandidateSet(QuestionLoc);

        : FailedCandidateSet(Kind.getLocation()) {

      OverloadCandidateSet CandidateSet(Loc);

      OverloadCandidateSet CandidateSet(Loc);

    /// IsAcceptableNonMemberOperatorCandidate - Determine whether Fn is
    /// an acceptable non-member overloaded operator for a call whose
    /// arguments have types T1 (and, if non-empty, T2). This routine
    /// implements the check in C++ [over.match.oper]p3b2 concerning
    /// enumeration types.
    static bool
    IsAcceptableNonMemberOperatorCandidate(FunctionDecl *Fn,
                                           QualType T1, QualType T2,
                                           ASTContext &Context) {
      if (T1->isDependentType() || (!T2.isNull() && T2->isDependentType()))
        return true;
    
      if (T1->isRecordType() || (!T2.isNull() && T2->isRecordType()))
        return true;
    
      const FunctionProtoType *Proto = Fn->getType()->getAs<FunctionProtoType>();
      if (Proto->getNumParams() < 1)
        return false;
    
      if (T1->isEnumeralType()) {
        QualType ArgType = Proto->getParamType(0).getNonReferenceType();
        if (Context.hasSameUnqualifiedType(T1, ArgType))
          return true;
      }
    
      if (Proto->getNumParams() < 2)
        return false;
    
      if (!T2.isNull() && T2->isEnumeralType()) {
        QualType ArgType = Proto->getParamType(1).getNonReferenceType();
        if (Context.hasSameUnqualifiedType(T2, ArgType))
          return true;
      }
    
      return false;
    }
    

      //        functions are ignored. However, if no operand has a class
      //        type, only those non-member functions in the lookup set
      //        that have a first parameter of type T1 or "reference to
      //        (possibly cv-qualified) T1", when T1 is an enumeration
      //        type, or (if there is a right operand) a second parameter
      //        of type T2 or "reference to (possibly cv-qualified) T2",
      //        when T2 is an enumeration type, are candidate functions.

    
      if (Operators.empty())
        return;
    
      for (auto I = Operators.begin(), E = Operators.end(); I != E; ++I)
        addOverloadedOperatorToUnresolvedSet(Functions, I.getPair(), T1, T2);
    }
    
    void Sema::addOverloadedOperatorToUnresolvedSet(UnresolvedSetImpl &Functions,
                                                    DeclAccessPair Op,
                                                    QualType T1, QualType T2) {
      NamedDecl *Found = Op->getUnderlyingDecl();
      if (FunctionDecl *FD = dyn_cast<FunctionDecl>(Found)) {
        if (IsAcceptableNonMemberOperatorCandidate(FD, T1, T2, Context))
          Functions.addDecl(Op, Op.getAccess()); // FIXME: canonical FD
      } else if (FunctionTemplateDecl *FunTmpl
                   = dyn_cast<FunctionTemplateDecl>(Found)) {
        // FIXME: friend operators?
        // FIXME: do we need to check IsAcceptableNonMemberOperatorCandidate,
        // later?
        if (!FunTmpl->getDeclContext()->isRecord())
          Functions.addDecl(Op, Op.getAccess());
      }

      OverloadCandidateSet OCS(RD->getLocation());

    void Sema::ArgumentDependentLookup(DeclarationName Name, bool Operator,
                                       SourceLocation Loc, ArrayRef<Expr *> Args,
                                       ADLResult &Result) {

      QualType T1, T2;
      if (Operator) {
        T1 = Args[0]->getType();
        if (Args.size() >= 2)
          T2 = Args[1]->getType();
      }
    

          if (isa<FunctionDecl>(D)) {
            if (Operator &&
                !IsAcceptableNonMemberOperatorCandidate(cast<FunctionDecl>(D),
                                                        T1, T2, Context))
              continue;
          } else if (!isa<FunctionTemplateDecl>(D))

