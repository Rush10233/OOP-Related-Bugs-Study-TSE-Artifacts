bool shouldLinkPossiblyHiddenDecl(LookupResult &Old, const NamedDecl *New);

        Filter.erase();

      if (!shouldLinkPossiblyHiddenDecl(Previous, New))
        return;
    

      LookupResult PrevR(*this, Alias, AliasLoc, LookupOrdinaryName,
                         ForRedeclaration);
      LookupQualifiedName(PrevR, CurContext->getRedeclContext());
      NamedDecl *PrevDecl = PrevR.getAsSingle<NamedDecl>();
      if (PrevDecl && !isVisible(PrevDecl))

    bool Sema::shouldLinkPossiblyHiddenDecl(LookupResult &R, const NamedDecl *New) {
      for (auto *D : R) {
        if (isVisible(D))
          return true;
      }
      return New->isExternallyVisible();
    }
    

NamedDecl *ND = R.getFoundDecl();

      LookupName(PrevR, S);

      // Check we're not shadowing a template parameter.
      if (PrevR.isSingleResult() && PrevR.getFoundDecl()->isTemplateParameter()) {
        DiagnoseTemplateParameterShadow(AliasLoc, PrevR.getFoundDecl());
        PrevR.clear();
      }
    
      // Filter out any other lookup result from an enclosing scope.
      FilterLookupForScope(PrevR, CurContext, S, /*ConsiderLinkage*/false,
                           /*AllowInlineNamespace*/false);

      // Find the previous declaration and check that we can redeclare it.
      NamespaceAliasDecl *Prev = nullptr; 
      if (NamedDecl *PrevDecl = PrevR.getAsSingle<NamedDecl>()) {

          if (AD->getNamespace()->Equals(getNamespaceDecl(ND))) {
            Prev = AD;
          } else if (isVisible(PrevDecl)) {

        } else if (isVisible(PrevDecl)) {

      if (Prev)
        AliasDecl->setPreviousDecl(Prev);

