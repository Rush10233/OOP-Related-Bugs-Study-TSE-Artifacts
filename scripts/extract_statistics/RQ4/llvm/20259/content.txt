"dependent nested name specifier '%0' for friend template declaration is "
      "not supported; ignoring this friend declaration">,
      InGroup<UnsupportedFriend>;

    def err_invalid_member_in_interface : Error<
      "%select{data member |non-public member function |static member function |"
              "user-declared constructor|user-declared destructor|operator |"

      return false;
    }
    

    /// ActOnTag - This is invoked when we see 'struct foo' or 'struct {'.  In the
    /// former case, Name will be non-null.  In the later case, Name will be null.
    /// TagSpec indicates what kind of tag this is. TUK indicates whether this is a

        Redecl = NotForRedeclaration;
    
      LookupResult Previous(*this, Name, NameLoc, LookupTagName, Redecl);
      if (Name && SS.isNotEmpty()) {
        // We have a nested-name tag ('struct foo::bar').
    

        //   the entity has been previously declared shall not consider
        //   any scopes outside the innermost enclosing namespace.
        //

        // Does it matter that this should be by scope instead of by
        // semantic context?
        if (!Previous.empty() && TUK == TUK_Friend) {
          DeclContext *EnclosingNS = SearchDC->getEnclosingNamespaceContext();
          LookupResult::Filter F = Previous.makeFilter();

          while (F.hasNext()) {
            NamedDecl *ND = F.next();
            DeclContext *DC = ND->getDeclContext()->getRedeclContext();
            if (DC->isFileContext() &&
                !EnclosingNS->Encloses(ND->getDeclContext())) {

            }
          }
          F.done();

        }

        // Note:  there used to be some attempt at recovery here.
        if (Previous.isAmbiguous())
          return nullptr;

      // declaration so we always pass true to setObjectOfFriendDecl to make
      // the tag name visible.
      if (TUK == TUK_Friend)

    
      // Set the access specifier.
      if (!Invalid && SearchDC->isRecord())

