def ext_friend_tag_redecl_outside_namespace : ExtWarn<
      "unqualified friend declaration referring to type outside of the nearest "
      "enclosing namespace is a Microsoft extension; add a nested name specifier">,
      InGroup<Microsoft>;
    

    /// Add a minimal nested name specifier fixit hint to allow lookup of a tag name
    /// from an outer enclosing namespace or file scope inside a friend declaration.
    /// This should provide the commented out code in the following snippet:
    ///   namespace N {
    ///     struct X;
    ///     namespace M {
    ///       struct Y { friend struct /*N::*/ X; };
    ///     }
    ///   }
    static void addFriendTagNNSFixIt(Sema &SemaRef, Sema::SemaDiagnosticBuilder &D,
                                     NamedDecl *ND, Scope *S,
                                     SourceLocation NameLoc) {
      // While the decl is in a namespace, do repeated lookup of that name and see
      // if we get the same namespace back.  If we do not, continue until
      // translation unit scope, at which point we have a fully qualified NNS.
      SmallVector<IdentifierInfo *, 4> Namespaces;
      DeclContext *DC = ND->getDeclContext()->getRedeclContext();
      for (; !DC->isTranslationUnit(); DC = DC->getParent()) {
        // This tag should be declared in a namespace, which can only be enclosed by
        // other namespaces.  Bail if there's an anonymous namespace in the chain.
        NamespaceDecl *Namespace = dyn_cast<NamespaceDecl>(DC);
        if (!Namespace || Namespace->isAnonymousNamespace())
          return;
        IdentifierInfo *II = Namespace->getIdentifier();
        Namespaces.push_back(II);
        NamedDecl *Lookup = SemaRef.LookupSingleName(
            S, II, NameLoc, Sema::LookupNestedNameSpecifierName);
        if (Lookup == Namespace)
          break;
      }
    
      // Once we have all the namespaces, reverse them to go outermost first, and
      // build an NNS.
      SmallString<64> Insertion;
      llvm::raw_svector_ostream OS(Insertion);
      if (DC->isTranslationUnit())
        OS << "::";
      std::reverse(Namespaces.begin(), Namespaces.end());
      for (auto *II : Namespaces)
        OS << II->getName() << "::";
      OS.flush();
      D << FixItHint::CreateInsertion(NameLoc, Insertion);
    }
    

        // MSVC doesn't implement the above rule for types, so a friend tag
        // declaration may be a redeclaration of a type declared in an enclosing
        // scope.  They do implement this rule for friend functions.
        //

          bool FriendSawTagOutsideEnclosingNamespace = false;

              if (getLangOpts().MSVCCompat)
                FriendSawTagOutsideEnclosingNamespace = true;
              else
                F.erase();

    
          // Diagnose this MSVC extension in the easy case where lookup would have
          // unambiguously found something outside the enclosing namespace.
          if (Previous.isSingleResult() && FriendSawTagOutsideEnclosingNamespace) {
            NamedDecl *ND = Previous.getFoundDecl();
            auto D = Diag(NameLoc, diag::ext_friend_tag_redecl_outside_namespace);
            addFriendTagNNSFixIt(*this, D, ND, S, NameLoc);
          }

    

        New->setObjectOfFriendDecl(getLangOpts().MSVCCompat);

