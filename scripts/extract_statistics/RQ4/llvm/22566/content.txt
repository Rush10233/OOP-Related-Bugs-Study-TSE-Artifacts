QualType FromType = getToType(0);
      QualType ToType = getToType(1);
      switch (Second) {

      // -- from a floating-point type to an integer type, or
      //
      // -- from an integer type or unscoped enumeration type to a floating-point
      //    type, except where the source is a constant expression and the actual
      //    value after conversion will fit into the target type and will produce
      //    the original value when converted back to the original type, or
      case ICK_Floating_Integral:

        if (FromType->isRealFloatingType() && ToType->isIntegralType(Ctx)) {
          return NK_Type_Narrowing;
        } else if (FromType->isIntegralType(Ctx) && ToType->isRealFloatingType()) {

      //    the source is a constant expression and the actual value after
      //    conversion will fit into the target type and will produce the original
      //    value when converted back to the original type.

        assert(FromType->isIntegralOrUnscopedEnumerationType());
        assert(ToType->isIntegralOrUnscopedEnumerationType());
        const bool FromSigned = FromType->isSignedIntegerOrEnumerationType();

