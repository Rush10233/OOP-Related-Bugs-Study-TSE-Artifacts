/// Determine whether the given expression was formed from the token '0'. This
    /// test is necessary to determine whether an initializer is really a
    /// pure-specifier.
    static bool isZeroToken(Sema &S, Expr *E) {
      auto *IL = dyn_cast<IntegerLiteral>(E);
      if (!IL || !!IL->getValue() ||
          !IL->getType()->isSpecificBuiltinType(BuiltinType::Int))
        return false;
    
      SmallString<8> Buffer;
      return S.PP.getSpelling(E->getLocStart(), Buffer) == "0";
    }
    

        //
        // FIXME: The parser should instead treat anything that looks like a
        // pure-specifier as a pure-specifier, and Sema should convert it to an
        // initializer when necessary, rather than doing things this way around.
        if (!DirectInit && isZeroToken(*this, Init))

