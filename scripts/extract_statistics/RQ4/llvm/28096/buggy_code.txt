bool AllowFunctionParameters);

                                  bool AllowFunctionParameters);

    /// \param AllowFunctionParameter Whether we allow function parameters to
    /// be considered NRVO candidates. C++ prohibits this for NRVO itself, but
    /// we re-use this logic to determine whether we should try to move as part of
    /// a return or throw (which does allow function parameters).

    VarDecl *Sema::getCopyElisionCandidate(QualType ReturnType,
                                           Expr *E,
                                           bool AllowFunctionParameter) {

      if (isCopyElisionCandidate(ReturnType, VD, AllowFunctionParameter))

                                      bool AllowFunctionParameter) {

        if (!VDType->isDependentType() &&

          !(AllowFunctionParameter && VD->getKind() == Decl::ParmVar))

    /// This routine implements C++0x [class.copy]p33, which attempts to treat

      // C++0x [class.copy]p33:
      //   When the criteria for elision of a copy operation are met or would
      //   be met save for the fact that the source object is a function
      //   parameter, and the object to be copied is designated by an lvalue,
      //   overload resolution to select the constructor for the copy is first
      //   performed as if the object were designated by an rvalue.

      if (AllowNRVO &&
          (NRVOCandidate || getCopyElisionCandidate(ResultType, Value, true))) {
        ImplicitCastExpr AsRvalue(ImplicitCastExpr::OnStack,
                                  Value->getType(), CK_NoOp, Value, VK_XValue);

        InitializationKind Kind
          = InitializationKind::CreateCopy(Value->getLocStart(),
                                           Value->getLocStart());
        InitializationSequence Seq(*this, Entity, Kind, InitExpr);

        //   [...] If overload resolution fails, or if the type of the first
        //   parameter of the selected constructor is not an rvalue reference
        //   to the object's type (possibly cv-qualified), overload resolution
        //   is performed again, considering the object as an lvalue.

          for (InitializationSequence::step_iterator Step = Seq.step_begin(),
               StepEnd = Seq.step_end();
               Step != StepEnd; ++Step) {
            if (Step->Kind != InitializationSequence::SK_ConstructorInitialization)

            CXXConstructorDecl *Constructor
            = cast<CXXConstructorDecl>(Step->Function.Function);

            // If we don't meet the criteria, break out now.

                                Context.getTypeDeclType(Constructor->getParent())))

            Value = ImplicitCastExpr::Create(Context, Value->getType(),
                                             CK_NoOp, Value, nullptr, VK_XValue);

