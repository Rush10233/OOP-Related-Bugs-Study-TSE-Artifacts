T.consumeClose();

        if (!NoexceptExpr.isInvalid()) {

          NoexceptRange = SourceRange(KeywordLoc, T.getCloseLocation());
        } else {
          NoexceptType = EST_None;
        }

      } else if (Expr *Arg = OldParm->getDefaultArg()) {
        FunctionDecl *OwningFunc = cast<FunctionDecl>(OldParm->getDeclContext());
        CXXRecordDecl *ClassD = dyn_cast<CXXRecordDecl>(OwningFunc->getDeclContext());
        if (ClassD && ClassD->isLocalClass() && !ClassD->isLambda()) {
          // If this is a method of a local class, as per DR1484 its default
          // arguments must be instantiated.
          Sema::ContextRAII SavedContext(*this, ClassD);
          LocalInstantiationScope Local(*this);
          ExprResult NewArg = SubstExpr(Arg, TemplateArgs);
          if (NewArg.isUsable())
            NewParm->setDefaultArg(NewArg.get());
        } else {
          // FIXME: if we non-lazily instantiated non-dependent default args for
          // non-dependent parameter types we could remove a bunch of duplicate
          // conversion warnings for such arguments.
          NewParm->setUninstantiatedDefaultArg(Arg);
        }
      }

        // DR1484: Local classes and their members are instantiated along with the
        // containing function.
        bool RequireInstantiation = false;
        if (CXXRecordDecl *Cls = dyn_cast<CXXRecordDecl>(Tmpl->getDeclContext())) {
          if (Cls->isLocalClass())
            RequireInstantiation = true;
        }

            EPI.ExceptionSpec.Type != EST_BasicNoexcept &&
            !RequireInstantiation) {

