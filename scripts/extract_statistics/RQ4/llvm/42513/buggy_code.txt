def err_qualified_friend_not_found : Error<
      "no function named %0 with type %1 was found in the specified scope">;

      bool CheckFunctionTemplateSpecialization(FunctionDecl *FD,
                             TemplateArgumentListInfo *ExplicitTemplateArgs,
                                               LookupResult &Previous);

      if (New->getDeclName() && AddToScope) {
        // Only make a locally-scoped extern declaration visible if it is the first
        // declaration of this entity. Qualified lookup for such an entity should
        // only find this declaration if there is no visible declaration of it.
        bool AddToContext = !D.isRedeclaration() || !New->isLocalExternDecl();
        PushOnScopeChains(New, S, AddToContext);
        if (!AddToContext)
          CurContext->addHiddenDecl(New);
      }

      unsigned DiagMsg = IsLocalFriend ? diag::err_no_matching_local_friend
                                       : diag::err_member_decl_does_not_match;

        // Ignore things found implicitly in the wrong scope.
        // TODO: better diagnostics for this case.  Suggesting the right
        // qualified scope would be nice...
        LookupResult::Filter F = Previous.makeFilter();
        while (F.hasNext()) {
          NamedDecl *D = F.next();
          if (!DC->InEnclosingNamespaceSetOf(
                  D->getDeclContext()->getRedeclContext()))
            F.erase();
        }
        F.done();
    
        if (Previous.empty()) {
          D.setInvalidType();
          Diag(Loc, diag::err_qualified_friend_not_found)
              << Name << TInfo->getType();
          return nullptr;
        }
    

          if (!isVisible(D)) {
            D = findAcceptableDecl(
                *this, D, (Decl::IDNS_Ordinary | Decl::IDNS_OrdinaryFriend));
            if (!D)
              continue;
            if (auto *USD = dyn_cast<UsingShadowDecl>(D))
              Underlying = USD->getTargetDecl();
          }
    
          // If the only declaration here is an ordinary friend, consider
          // it only if it was declared in an associated classes.
          if ((D->getIdentifierNamespace() & Decl::IDNS_Ordinary) == 0) {
            // If it's neither ordinarily visible nor a friend, we can't find it.
            if ((D->getIdentifierNamespace() & Decl::IDNS_OrdinaryFriend) == 0)
              continue;
    
            bool DeclaredInAssociatedClass = false;
            for (Decl *DI = D; DI; DI = DI->getPreviousDecl()) {
              DeclContext *LexDC = DI->getLexicalDeclContext();
              if (isa<CXXRecordDecl>(LexDC) &&
                  AssociatedClasses.count(cast<CXXRecordDecl>(LexDC)) &&
                  isVisible(cast<NamedDecl>(DI))) {
                DeclaredInAssociatedClass = true;

            if (!DeclaredInAssociatedClass)
              continue;

          Result.insert(Underlying);

        LookupResult &Previous) {

          Candidates.begin(), Candidates.end(), FailedCandidates,
          FD->getLocation(),

