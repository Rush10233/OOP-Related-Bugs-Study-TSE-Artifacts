gcc_checking_assert (!TYPE_P (expression));
    

      else if (TREE_CODE (decl) == UNBOUND_CLASS_TEMPLATE)
        {
          gcc_checking_assert (scope);
          *idk = CP_ID_KIND_QUALIFIED;
          cp_warn_deprecated_use_scopes (scope);
          decl = finish_qualified_id_expr (scope, decl, done, address_p,
    				       template_p, template_arg_p,
    				       tf_warning_or_error);
        }

/* SCmode and DImode can be tied.  */
      if ((mode1 == E_SCmode && mode2 == E_DImode)
          || (mode1 == E_DImode && mode2 == E_SCmode))
        return TARGET_64BIT;
    
      /* [SD]Cmode and V2[SD]Fmode modes can be tied.  */
      if ((mode1 == E_SCmode && mode2 == E_V2SFmode)
          || (mode1 == E_V2SFmode && mode2 == E_SCmode)
          || (mode1 == E_DCmode && mode2 == E_V2DFmode)
          || (mode1 == E_V2DFmode && mode2 == E_DCmode))
        return true;
    

case NEW_EXPR:
        case VEC_NEW_EXPR:
          /* The second operand is a type, which type_dependent_expression_p
    	 (and therefore value_dependent_expression_p) doesn't want to see.  */
          return (value_dependent_expression_p (TREE_OPERAND (expression, 0))
    	      || value_dependent_expression_p (TREE_OPERAND (expression, 2))
    	      || value_dependent_expression_p (TREE_OPERAND (expression, 3)));
    

