finish_member_declaration (member);

    /* Return true iff our current scope is a default capturing generic lambda
       defined within a template.  FIXME: This is part of a workaround (see
       semantics.c) to handle building lambda closure types correctly in templates
       which we ultimately want to defer to instantiation time. */
    
    bool
    parsing_default_capturing_generic_lambda_in_template (void)
    {
      if (!processing_template_decl || !current_class_type)
        return false;
    
      tree lam = CLASSTYPE_LAMBDA_EXPR (current_class_type);
      if (!lam || LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lam) == CPLD_NONE)
        return false;
    
      tree callop = lambda_function (lam);
      if (!callop)
        return false;
    
      return (DECL_TEMPLATE_INFO (callop)
    	  && (DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (callop)) == callop)
    	  && ((current_nonlambda_class_type ()
    	       && CLASSTYPE_TEMPLATE_INFO (current_nonlambda_class_type ()))
    	      || ((current_nonlambda_function ()
    		   && DECL_TEMPLATE_INFO (current_nonlambda_function ())))));
    }
    

      else if (BASELINK_P (expr) && !processing_template_decl)

      else if (BASELINK_P (expr))
        ;

    	  && !currently_open_class (qualifying_class))

          /* If the name was dependent on a template parameter and we're not in a
    	 default capturing generic lambda within a template, we will resolve the
    	 name at instantiation time.  FIXME: For lambdas, we should defer
    	 building the closure type until instantiation time then we won't need
    	 the extra test here.  */

    	  && !parsing_default_capturing_generic_lambda_in_template ())
    	{
    	  if (DECL_P (decl)
    	      && any_dependent_type_attributes_p (DECL_ATTRIBUTES (decl)))
    	    /* Dependent type attributes on the decl mean that the TREE_TYPE is
    	       wrong, so just return the identifier.  */
    	    return id_expression;
    
    	  /* If we found a variable, then name lookup during the
    	     instantiation will always resolve to the same VAR_DECL
    	     (or an instantiation thereof).  */
    	  if (VAR_P (decl)
    	      || TREE_CODE (decl) == CONST_DECL
    	      || TREE_CODE (decl) == PARM_DECL)
    	    {
    	      mark_used (decl);
    	      return convert_from_reference (decl);
    	    }
    
    	  /* Create a SCOPE_REF for qualified names, if the scope is
    	     dependent.  */
    	  if (scope)
    	    {
    	      if (TYPE_P (scope))
    		{
    		  if (address_p && done)
    		    decl = finish_qualified_id_expr (scope, decl,
    						     done, address_p,
    						     template_p,
    						     template_arg_p,
    						     tf_warning_or_error);
    		  else
    		    {
    		      tree type = NULL_TREE;
    		      if (DECL_P (decl) && !dependent_scope_p (scope))
    			type = TREE_TYPE (decl);
    		      decl = build_qualified_name (type,
    						   scope,
    						   id_expression,
    						   template_p);
    		    }
    		}
    	      if (TREE_TYPE (decl))
    		decl = convert_from_reference (decl);
    	      return decl;
    	    }
    	  /* A TEMPLATE_ID already contains all the information we
    	     need.  */
    	  if (TREE_CODE (id_expression) == TEMPLATE_ID_EXPR)
    	    return id_expression;
    	  /* The same is true for FIELD_DECL, but we also need to
    	     make sure that the syntax is correct.  */
    	  else if (TREE_CODE (decl) == FIELD_DECL)
    	    {
    	      /* Since SCOPE is NULL here, this is an unqualified name.
    		 Access checking has been performed during name lookup
    		 already.  Turn off checking to avoid duplicate errors.  */
    	      push_deferring_access_checks (dk_no_check);
    	      decl = finish_non_static_data_member
    		       (decl, NULL_TREE,
    			/*qualifying_scope=*/NULL_TREE);
    	      pop_deferring_access_checks ();
    	      return decl;
    	    }
    	  return id_expression;
    	}

