initializer, it's initialized from {}.  But use build_value_init
         directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */
      tree val;
      if (CP_AGGREGATE_TYPE_P (elem_type))
        {
          tree empty_ctor = build_constructor (init_list_type_node, NULL);
          val = digest_init (elem_type, empty_ctor, tf_warning_or_error);
        }
      else
        val = build_value_init (elem_type, tf_warning_or_error);

initializer, it's initialized from {}.  But use build_value_init
         directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */
      tree val;
      if (CP_AGGREGATE_TYPE_P (elem_type))
        {
          tree empty_ctor = build_constructor (init_list_type_node, NULL);
          val = digest_init (elem_type, empty_ctor, tf_warning_or_error);
        }
      else
        val = build_value_init (elem_type, tf_warning_or_error);

initializer, it's initialized from {}.  But use build_value_init
         directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */
      tree val;
      if (CP_AGGREGATE_TYPE_P (elem_type))
        {
          tree empty_ctor = build_constructor (init_list_type_node, NULL);
          val = digest_init (elem_type, empty_ctor, tf_warning_or_error);
        }
      else
        val = build_value_init (elem_type, tf_warning_or_error);

