type = refs->pop();

    	break;

      if (*valp && TREE_CODE (*valp) == CONSTRUCTOR
          && TREE_CODE (init) == CONSTRUCTOR)

          if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (init),
    						      TREE_TYPE (*valp)))
    	{
    	  /* For initialization of an empty base, the original target will be
    	   *(base*)this, evaluation of which resolves to the object
    	   argument, which has the derived type rather than the base type.  In
    	   this situation, just evaluate the initializer and return, since
    	   there's no actual data to store.  */
    	  gcc_assert (is_empty_class (TREE_TYPE (init)));
    	  return lval ? target : init;
    	}

      else if (TREE_CODE (init) == CONSTRUCTOR
    	   && !same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (init),
    							  type))
        {
          /* See above on initialization of empty bases.  */
          gcc_assert (is_empty_class (TREE_TYPE (init)) && !lval);
          if (!*valp)
    	{
    	  /* But do make sure we have something in *valp.  */
    	  *valp = build_constructor (type, nullptr);
    	  CONSTRUCTOR_NO_CLEARING (*valp) = no_zero_init;
    	}
          return init;
        }

    			     (TREE_TYPE (target), type));

      if (*non_constant_p)
        return t;
      else if (lval)

