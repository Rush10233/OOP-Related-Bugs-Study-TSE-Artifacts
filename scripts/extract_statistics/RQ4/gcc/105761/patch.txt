extern bool non_templated_friend_p		(tree);

    	  if (!DECL_UNIQUE_FRIEND_P (new_result))
    	    DECL_UNIQUE_FRIEND_P (old_result) = false;

    	  if (DECL_TEMPLATE_INFO (newdecl))

    
    	  if (non_templated_friend_p (olddecl))
    	    /* Don't copy tinfo from a non-templated friend (PR105761).  */;

    /* True iff T is a friend function declaration that is not itself a template
       and is not defined in a class template.  */
    
    bool
    non_templated_friend_p (tree t)
    {
      if (t && TREE_CODE (t) == FUNCTION_DECL
          && DECL_UNIQUE_FRIEND_P (t))
        {
          tree ti = DECL_TEMPLATE_INFO (t);
          if (!ti)
    	return true;
          /* DECL_FRIEND_CONTEXT is set for a friend defined in class.  */
          if (DECL_FRIEND_CONTEXT (t))
    	return false;
          /* Non-templated friends in a class template are still represented with a
    	 TEMPLATE_DECL; check that its primary template is the befriending
    	 class.  Note that DECL_PRIMARY_TEMPLATE is null for
    	 template <class T> friend A<T>::f(); */
          tree tmpl = TI_TEMPLATE (ti);
          tree primary = DECL_PRIMARY_TEMPLATE (tmpl);
          return (primary && primary != tmpl);
        }
      else
        return false;
    }
    

    	   friend void f<int>(int, double);

if (new_defines_function
    	      && DECL_TEMPLATE_INFO (olddecl)
    	      && DECL_UNIQUE_FRIEND_P (DECL_TEMPLATE_RESULT
    				       (DECL_TI_TEMPLATE (olddecl))))
    	    /* Don't copy template info from a non-template friend declaration
    	       in a class template (PR105761).  */;
    	  else if (DECL_TEMPLATE_INFO (newdecl))

    	      DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);

    	  else
    	    DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);

if (new_defines_function
    	      && DECL_TEMPLATE_INFO (olddecl)
    	      && DECL_UNIQUE_FRIEND_P (DECL_TEMPLATE_RESULT
    				       (DECL_TI_TEMPLATE (olddecl))))
    	    /* Don't copy template info from a non-template friend declaration
    	       in a class template (PR105761).  */;
    	  else if (DECL_TEMPLATE_INFO (newdecl))

    	      DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);

    	  else
    	    DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);

extern bool non_templated_friend_p		(tree);

    	  if (!DECL_UNIQUE_FRIEND_P (new_result))
    	    DECL_UNIQUE_FRIEND_P (old_result) = false;

    	  if (DECL_TEMPLATE_INFO (newdecl))

    
    	  if (non_templated_friend_p (olddecl))
    	    /* Don't copy tinfo from a non-templated friend (PR105761).  */;

    /* True iff T is a friend function declaration that is not itself a template
       and is not defined in a class template.  */
    
    bool
    non_templated_friend_p (tree t)
    {
      if (t && TREE_CODE (t) == FUNCTION_DECL
          && DECL_UNIQUE_FRIEND_P (t))
        {
          tree ti = DECL_TEMPLATE_INFO (t);
          if (!ti)
    	return true;
          /* DECL_FRIEND_CONTEXT is set for a friend defined in class.  */
          if (DECL_FRIEND_CONTEXT (t))
    	return false;
          /* Non-templated friends in a class template are still represented with a
    	 TEMPLATE_DECL; check that its primary template is the befriending
    	 class.  Note that DECL_PRIMARY_TEMPLATE is null for
    	 template <class T> friend A<T>::f(); */
          tree tmpl = TI_TEMPLATE (ti);
          tree primary = DECL_PRIMARY_TEMPLATE (tmpl);
          return (primary && primary != tmpl);
        }
      else
        return false;
    }
    

    	   friend void f<int>(int, double);

if (new_defines_function
    	      && DECL_TEMPLATE_INFO (olddecl)
    	      && DECL_UNIQUE_FRIEND_P (DECL_TEMPLATE_RESULT
    				       (DECL_TI_TEMPLATE (olddecl))))
    	    /* Don't copy template info from a non-template friend declaration
    	       in a class template (PR105761).  */;
    	  else if (DECL_TEMPLATE_INFO (newdecl))

    	      DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);

    	  else
    	    DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);

extern bool non_templated_friend_p		(tree);

    	  if (!DECL_UNIQUE_FRIEND_P (new_result))
    	    DECL_UNIQUE_FRIEND_P (old_result) = false;

    	  if (DECL_TEMPLATE_INFO (newdecl))

    
    	  if (non_templated_friend_p (olddecl))
    	    /* Don't copy tinfo from a non-templated friend (PR105761).  */;

    /* True iff T is a friend function declaration that is not itself a template
       and is not defined in a class template.  */
    
    bool
    non_templated_friend_p (tree t)
    {
      if (t && TREE_CODE (t) == FUNCTION_DECL
          && DECL_UNIQUE_FRIEND_P (t))
        {
          tree ti = DECL_TEMPLATE_INFO (t);
          if (!ti)
    	return true;
          /* DECL_FRIEND_CONTEXT is set for a friend defined in class.  */
          if (DECL_FRIEND_CONTEXT (t))
    	return false;
          /* Non-templated friends in a class template are still represented with a
    	 TEMPLATE_DECL; check that its primary template is the befriending
    	 class.  Note that DECL_PRIMARY_TEMPLATE is null for
    	 template <class T> friend A<T>::f(); */
          tree tmpl = TI_TEMPLATE (ti);
          tree primary = DECL_PRIMARY_TEMPLATE (tmpl);
          return (primary && primary != tmpl);
        }
      else
        return false;
    }
    

    	   friend void f<int>(int, double);

