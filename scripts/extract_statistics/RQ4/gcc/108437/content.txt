or static operator(), in which cases the source expression
       would be `obj[...]' or `obj(...)'.  */
    

    keep_unused_object_arg (tree result, tree obj, tree fn)
    {
      if (result == NULL_TREE

      return build_new_op (loc, code, flags, arg1, arg2, NULL_TREE, NULL_TREE,
    		       NULL, complain);
    }

    extern tree build_op_call			(tree, vec<tree, va_gc> **,
    						 tsubst_flags_t);
    extern tree build_op_subscript			(const op_location_t &, tree,

    {
      va_list p;
      int nargs, expected_nargs;

    
      non_dep = extract_call_expr (non_dep);
    
      nargs = call_expr_nargs (non_dep);
    
      expected_nargs = cp_tree_code_length (op);

        expected_nargs -= 1;
      if ((op == POSTINCREMENT_EXPR
           || op == POSTDECREMENT_EXPR)

      if (TREE_CODE (TREE_TYPE (overload)) == FUNCTION_TYPE)
        {
          fn = overload;

          for (int i = 0; i < nargs; i++)
    	{
    	  tree arg = va_arg (p, tree);

      CALL_EXPR_ORDERED_ARGS (call_expr) = CALL_EXPR_ORDERED_ARGS (non_dep);
      CALL_EXPR_REVERSE_ARGS (call_expr) = CALL_EXPR_REVERSE_ARGS (non_dep);
    

      return call;
    }
    

      non_dep = extract_call_expr (non_dep);
    
      unsigned int nargs = call_expr_nargs (non_dep);

      gcc_assert (vec_safe_length (args) == nargs);
    
      tree call = build_min_non_dep_call_vec (non_dep, fn, args);

      CALL_EXPR_ORDERED_ARGS (call_expr) = CALL_EXPR_ORDERED_ARGS (non_dep);
      CALL_EXPR_REVERSE_ARGS (call_expr) = CALL_EXPR_REVERSE_ARGS (non_dep);
    

      return call;
    }
    

