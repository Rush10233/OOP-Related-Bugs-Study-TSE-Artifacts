/* Initialize current class with INIT, a TREE_LIST of arguments for
       a target constructor.  If TREE_LIST is void_type_node, an empty
       initializer list was given.  Return the target constructor.  */

    static tree

      init = build_aggr_init (decl, init, LOOKUP_NORMAL|LOOKUP_DELEGATING_CONS,
    			  tf_warning_or_error);
      finish_expr_stmt (init);

      return init;

    /* Data structure for find_uninit_fields_r, below.  */
    
    struct find_uninit_data {
      /* The set tracking the yet-uninitialized members.  */
      hash_set<tree> *uninitialized;
      /* The data member we are currently initializing.  It can be either
         a type (initializing a base class/delegating constructors), or
         a COMPONENT_REF.  */
      tree member;
    };
    
    /* walk_tree callback that warns about using uninitialized data in
       a member-initializer-list.  */
    
    static tree
    find_uninit_fields_r (tree *tp, int *walk_subtrees, void *data)
    {
      find_uninit_data *d = static_cast<find_uninit_data *>(data);
      hash_set<tree> *uninitialized = d->uninitialized;
      tree init = *tp;
      const tree_code code = TREE_CODE (init);
    
      /* No need to look into types or unevaluated operands.  */
      if (TYPE_P (init) || unevaluated_p (code))
        {
          *walk_subtrees = false;
          return NULL_TREE;
        }
    
      switch (code)
        {
        /* We'd need data flow info to avoid false positives.  */
        case COND_EXPR:
        case VEC_COND_EXPR:
        case BIND_EXPR:
        /* We might see a MODIFY_EXPR in cases like S() : a((b = 42)), c(b) { }
           where the initializer for 'a' surreptitiously initializes 'b'.  Let's
           not bother with these complicated scenarios in the front end.  */
        case MODIFY_EXPR:
        /* Don't attempt to handle statement-expressions, either.  */
        case STATEMENT_LIST:
          uninitialized->empty ();
          gcc_fallthrough ();
        /* If we're just taking the address of an object, it doesn't matter
           whether it's been initialized.  */
        case ADDR_EXPR:
          *walk_subtrees = false;
          return NULL_TREE;
        default:
          break;
        }
    
      /* We'd need data flow info to avoid false positives.  */
      if (truth_value_p (code))
        goto give_up;
      /* Attempt to handle a simple a{b}, but no more.  */
      else if (BRACE_ENCLOSED_INITIALIZER_P (init))
        {
          if (CONSTRUCTOR_NELTS (init) == 1
    	  && !BRACE_ENCLOSED_INITIALIZER_P (CONSTRUCTOR_ELT (init, 0)->value))
    	init = CONSTRUCTOR_ELT (init, 0)->value;
          else
    	goto give_up;
        }
      /* Warn about uninitialized 'this'.  */
      else if (code == CALL_EXPR)
        {
          tree fn = get_callee_fndecl (init);
          if (fn && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))
    	{
    	  tree op = CALL_EXPR_ARG (init, 0);
    	  if (TREE_CODE (op) == ADDR_EXPR)
    	    op = TREE_OPERAND (op, 0);
    	  temp_override<tree> ovr (d->member, DECL_ARGUMENTS (fn));
    	  cp_walk_tree_without_duplicates (&op, find_uninit_fields_r, data);
    	}
          /* Functions (whether static or nonstatic member) may have side effects
    	 and initialize other members; it's not the front end's job to try to
    	 figure it out.  But don't give up for constructors: we still want to
    	 warn when initializing base classes:
    
    	   struct D : public B {
    	     int x;
    	     D() : B(x) {}
    	   };
    
    	 so carry on to detect that 'x' is used uninitialized.  */
          if (!fn || !DECL_CONSTRUCTOR_P (fn))
    	goto give_up;
        }
    
      /* If we find FIELD in the uninitialized set, we warn.  */
      if (code == COMPONENT_REF)
        {
          tree field = TREE_OPERAND (init, 1);
          tree type = TYPE_P (d->member) ? d->member : TREE_TYPE (d->member);
    
          /* We're initializing a reference member with itself.  */
          if (TYPE_REF_P (type) && cp_tree_equal (d->member, init))
    	warning_at (EXPR_LOCATION (init), OPT_Winit_self,
    		    "%qD is initialized with itself", field);
          else if (cp_tree_equal (TREE_OPERAND (init, 0), current_class_ref)
    	       && uninitialized->contains (field))
    	{
    	  if (TYPE_REF_P (TREE_TYPE (field)))
    	    warning_at (EXPR_LOCATION (init), OPT_Wuninitialized,
    			"reference %qD is not yet bound to a value when used "
    			"here", field);
    	  else if (!INDIRECT_TYPE_P (type) || is_this_parameter (d->member))
    	    warning_at (EXPR_LOCATION (init), OPT_Wuninitialized,
    			"member %qD is used uninitialized", field);
    	  *walk_subtrees = false;
    	}
        }
    
      return NULL_TREE;
    
    give_up:
      *walk_subtrees = false;
      uninitialized->empty ();
      return integer_zero_node;
    }
    
    /* Wrapper around find_uninit_fields_r above.  */
    
    static void
    find_uninit_fields (tree *t, hash_set<tree> *uninitialized, tree member)
    {
      if (!uninitialized->is_empty ())
        {
          find_uninit_data data = { uninitialized, member };
          cp_walk_tree_without_duplicates (t, find_uninit_fields_r, &data);
        }
    }
    

       list was given; if NULL_TREE no initializer was given.  UNINITIALIZED
       is the hash set that tracks uninitialized fields.  */

    perform_member_init (tree member, tree init, hash_set<tree> &uninitialized)

      if ((warn_init_self || warn_uninitialized)
          && init
          && TREE_CODE (init) == TREE_LIST

          else
    	find_uninit_fields (&val, &uninitialized, decl);

      /* Assume we are initializing the member.  */
      bool member_initialized_p = true;
    

    
    	  /* We left the member uninitialized.  */
    	  member_initialized_p = false;

      if (member_initialized_p && warn_uninitialized)
        /* This member is now initialized, remove it from the uninitialized
           set.  */
        uninitialized.remove (member);
    

      /* Keep a set holding fields that are not initialized.  */
      hash_set<tree> uninitialized;
    
      /* Initially that is all of them.  */
      if (warn_uninitialized)
        for (tree f = next_initializable_field (TYPE_FIELDS (current_class_type));
    	 f != NULL_TREE;
    	 f = next_initializable_field (DECL_CHAIN (f)))
          if (!DECL_ARTIFICIAL (f))
    	uninitialized.add (f);
    

          tree ctor = perform_target_ctor (TREE_VALUE (mem_inits));
          find_uninit_fields (&ctor, &uninitialized, current_class_type);

    	  if (STATEMENT_LIST_TAIL (cur_stmt_list))
    	    find_uninit_fields (&STATEMENT_LIST_TAIL (cur_stmt_list)->stmt,
    				&uninitialized, BINFO_TYPE (subobject));

    			   TREE_VALUE (mem_inits),
    			   uninitialized);
    

    In C++, this warning also warns about using uninitialized objects in
    member-initializer-lists.  For example, GCC warns about @code{b} being
    uninitialized in the following snippet:
    
    @smallexample
    struct A @{
      int a;
      int b;
      A() : a(b) @{ @}
    @};
    @end smallexample
    

