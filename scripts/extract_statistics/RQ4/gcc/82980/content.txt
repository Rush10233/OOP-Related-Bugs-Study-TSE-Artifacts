return lambda;
    }
    

    /* Returns the type to use for the FIELD_DECL corresponding to the
       capture of EXPR.  EXPLICIT_INIT_P indicates whether this is a
       C++14 init capture, and BY_REFERENCE_P indicates whether we're

          else
    	type = do_auto_deduction (type, expr, auto_node);
        }

        {
          type = cxx_make_type (DECLTYPE_TYPE);
          DECLTYPE_TYPE_EXPR (type) = expr;

return lambda;
    }
    

    /* Returns the type to use for the FIELD_DECL corresponding to the
       capture of EXPR.  EXPLICIT_INIT_P indicates whether this is a
       C++14 init capture, and BY_REFERENCE_P indicates whether we're

          else
    	type = do_auto_deduction (type, expr, auto_node);
        }

        {
          type = cxx_make_type (DECLTYPE_TYPE);
          DECLTYPE_TYPE_EXPR (type) = expr;

return lambda;
    }
    

    /* Returns the type to use for the FIELD_DECL corresponding to the
       capture of EXPR.  EXPLICIT_INIT_P indicates whether this is a
       C++14 init capture, and BY_REFERENCE_P indicates whether we're

          else
    	type = do_auto_deduction (type, expr, auto_node);
        }

        {
          type = cxx_make_type (DECLTYPE_TYPE);
          DECLTYPE_TYPE_EXPR (type) = expr;

|| TREE_CODE (expr) == EXPR_PACK_EXPANSION)
        return false;
      tree t = non_reference (TREE_TYPE (expr));

    }
    
    /* Returns the type to use for the FIELD_DECL corresponding to the

