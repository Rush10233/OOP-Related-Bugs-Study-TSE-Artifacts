tsi_delink (&iter);
    	}
          tree dtor = build_cleanup (retval);

          tree cond = build3 (COND_EXPR, void_type_node, current_retval_sentinel,
    			  dtor, void_node);
          tree cleanup = build_stmt (loc, CLEANUP_STMT,

      tree var;
      tree result;
      hash_table<nofree_ptr_hash <tree_node> > visited;

    };
    
    /* Helper function for walk_tree, used by finalize_nrv below.  */

         thrown.  */
      else if (TREE_CODE (*tp) == CLEANUP_STMT
    	   && CLEANUP_DECL (*tp) == dp->var)

      /* Replace the DECL_EXPR for the NRV with an initialization of the
         RESULT_DECL, if needed.  */
      else if (TREE_CODE (*tp) == DECL_EXPR

    
      data.var = var;
      data.result = result;

      cp_walk_tree (tp, finalize_nrv_r, &data, 0);
    }
    

current_retval_sentinel so that we know that the return value needs to be
       destroyed on throw.  Do the same if the current function might use the
       named return value optimization, so we don't destroy it on return.

    
    tree
    maybe_set_retval_sentinel ()

    	  tsi_delink (&iter);
    	}
          tree dtor = build_cleanup (retval);

          tree cond = build3 (COND_EXPR, void_type_node, current_retval_sentinel,
    			  dtor, void_node);
          tree cleanup = build_stmt (loc, CLEANUP_STMT,

      tree result;
      hash_table<nofree_ptr_hash <tree_node> > visited;
      bool simple;

    };
    
    /* Helper function for walk_tree, used by finalize_nrv below.  */

      if (TYPE_P (*tp))
        *walk_subtrees = 0;
      /* If there's a label, we might need to destroy the NRV on goto (92407).  */

        dp->simple = false;
      /* Change NRV returns to just refer to the RESULT_DECL; this is a nop,
         but differs from using NULL_TREE in that it indicates that we care

      else if (TREE_CODE (*tp) == CLEANUP_STMT
    	   && CLEANUP_DECL (*tp) == dp->var)
        {

          if (dp->simple)

    	CLEANUP_EH_ONLY (*tp) = true;
          else
    	{

    	  tree cond = build3 (COND_EXPR, void_type_node,
    			      current_retval_sentinel,
    			      void_node, CLEANUP_EXPR (*tp));
    	  CLEANUP_EXPR (*tp) = cond;
    	}

        }

      /* Replace the DECL_EXPR for the NRV with an initialization of the
         RESULT_DECL, if needed.  */
      else if (TREE_CODE (*tp) == DECL_EXPR

    
      data.var = var;
      data.result = result;

    
      /* This is simpler for variables declared in the outer scope of
         the function so we know that their lifetime always ends with a

current_retval_sentinel, boolean_true_node);
    }
    

    
    void
    maybe_splice_retval_cleanup (tree compound_stmt)
    {

          && !DECL_DESTRUCTOR_P (current_function_decl)
          && current_retval_sentinel)
        {
          location_t loc = DECL_SOURCE_LOCATION (current_function_decl);
          tree_stmt_iterator iter = tsi_start (compound_stmt);
          tree retval = DECL_RESULT (current_function_decl);

    
          /* Skip past other decls, they can't contain a return.  */
          while (TREE_CODE (tsi_stmt (iter)) == DECL_EXPR)

      /* Parse an (optional) statement-seq.  */
      cp_parser_statement_seq_opt (parser, in_statement_expr);
    
      /* Consume the `}'.  */
      braces.require_close (parser);
    

    {
      tree block = NULL;
    

      if (stmts_are_full_exprs_p ())
        block = poplevel (kept_level_p (), 1, 0);
    

tsi_delink (&iter);
    	}
          tree dtor = build_cleanup (retval);

          tree cond = build3 (COND_EXPR, void_type_node, current_retval_sentinel,
    			  dtor, void_node);
          tree cleanup = build_stmt (loc, CLEANUP_STMT,

      tree var;
      tree result;
      hash_table<nofree_ptr_hash <tree_node> > visited;

    };
    
    /* Helper function for walk_tree, used by finalize_nrv below.  */

         thrown.  */
      else if (TREE_CODE (*tp) == CLEANUP_STMT
    	   && CLEANUP_DECL (*tp) == dp->var)

      /* Replace the DECL_EXPR for the NRV with an initialization of the
         RESULT_DECL, if needed.  */
      else if (TREE_CODE (*tp) == DECL_EXPR

    
      data.var = var;
      data.result = result;

      cp_walk_tree (tp, finalize_nrv_r, &data, 0);
    }
    

