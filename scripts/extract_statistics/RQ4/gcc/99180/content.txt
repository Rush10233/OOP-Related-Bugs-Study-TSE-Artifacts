unsigned len = TREE_VEC_LENGTH (ftparms);
    	  tree targs = make_tree_vec (len);
    	  int err = unify (ftparms, targs, ret, utype, UNIFY_ALLOW_NONE, false);

    
    	  /* The number of parms for f' is the number of parms for A plus
    	     non-deduced parms of f.  */

    	     guideness, and explicit-specifier.  */
    	  tree g = tsubst_decl (DECL_TEMPLATE_RESULT (f), targs, complain);
    	  if (g == error_mark_node)

    	  DECL_USE_TEMPLATE (g) = 0;
    	  fprime = build_template_decl (g, gtparms, false);
    	  DECL_TEMPLATE_RESULT (fprime) = g;

    	  if (ci)
    	    ci = tsubst_constraint_info (ci, targs, complain, in_decl);
    	  if (ci == error_mark_node)

    
    	  /* Add a constraint that the return type matches the instantiation of
    	     A with the same template arguments.  */

unsigned len = TREE_VEC_LENGTH (ftparms);
    	  tree targs = make_tree_vec (len);
    	  int err = unify (ftparms, targs, ret, utype, UNIFY_ALLOW_NONE, false);

    
    	  /* The number of parms for f' is the number of parms for A plus
    	     non-deduced parms of f.  */

    	     guideness, and explicit-specifier.  */
    	  tree g = tsubst_decl (DECL_TEMPLATE_RESULT (f), targs, complain);
    	  if (g == error_mark_node)

    	  DECL_USE_TEMPLATE (g) = 0;
    	  fprime = build_template_decl (g, gtparms, false);
    	  DECL_TEMPLATE_RESULT (fprime) = g;

    	  if (ci)
    	    ci = tsubst_constraint_info (ci, targs, complain, in_decl);
    	  if (ci == error_mark_node)

    
    	  /* Add a constraint that the return type matches the instantiation of
    	     A with the same template arguments.  */

