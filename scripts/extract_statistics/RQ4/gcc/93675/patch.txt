if (DECL_FRIEND_P (space))
    	  do_friend (NULL_TREE, DECL_NAME (eq), eq,
    		     NULL_TREE, NO_SPECIAL, true);
    	else
    	  add_method (t, eq, false);

    extern bool decl_remember_implicit_trigger_p	(tree);

          if (decl_remember_implicit_trigger_p (decl))

    /* True iff DECL is an implicitly-declared special member function with no real
       source location, so we can use its DECL_SOURCE_LOCATION to remember where we
       triggered its synthesis.  */
    
    bool
    decl_remember_implicit_trigger_p (tree decl)
    {
      if (!DECL_ARTIFICIAL (decl))
        return false;
      special_function_kind sfk = special_function_p (decl);
      /* Inherited constructors have the location of their using-declaration, and
         operator== has the location of the corresponding operator<=>.  */
      return (sfk != sfk_inheriting_constructor
    	  && sfk != sfk_comparison);
    }
    

      if (decl_remember_implicit_trigger_p (fndecl))

      if (friend_p)
        fn_type = build_function_type (return_type, parameter_types);
      else
        {
          tree this_type = cp_build_qualified_type (type, this_quals);
          fn_type = build_method_type_directly (this_type, return_type,
    					    parameter_types);
        }
    

      if (friend_p)
        DECL_CONTEXT (fn) = DECL_CONTEXT (pattern_fn);
      else
        {
          /* Add the "this" parameter.  */
          this_parm = build_this_parm (fn, fn_type, this_quals);
          DECL_CHAIN (this_parm) = DECL_ARGUMENTS (fn);
          DECL_ARGUMENTS (fn) = this_parm;
    
          grokclassfn (type, fn, kind == sfk_destructor ? DTOR_FLAG : NO_SPECIAL);
        }
    

if (DECL_FRIEND_P (space))
    	  do_friend (NULL_TREE, DECL_NAME (eq), eq,
    		     NULL_TREE, NO_SPECIAL, true);
    	else
    	  add_method (t, eq, false);

    extern bool decl_remember_implicit_trigger_p	(tree);

          if (decl_remember_implicit_trigger_p (decl))

    /* True iff DECL is an implicitly-declared special member function with no real
       source location, so we can use its DECL_SOURCE_LOCATION to remember where we
       triggered its synthesis.  */
    
    bool
    decl_remember_implicit_trigger_p (tree decl)
    {
      if (!DECL_ARTIFICIAL (decl))
        return false;
      special_function_kind sfk = special_function_p (decl);
      /* Inherited constructors have the location of their using-declaration, and
         operator== has the location of the corresponding operator<=>.  */
      return (sfk != sfk_inheriting_constructor
    	  && sfk != sfk_comparison);
    }
    

      if (decl_remember_implicit_trigger_p (fndecl))

      if (friend_p)
        fn_type = build_function_type (return_type, parameter_types);
      else
        {
          tree this_type = cp_build_qualified_type (type, this_quals);
          fn_type = build_method_type_directly (this_type, return_type,
    					    parameter_types);
        }
    

      if (friend_p)
        DECL_CONTEXT (fn) = DECL_CONTEXT (pattern_fn);
      else
        {
          /* Add the "this" parameter.  */
          this_parm = build_this_parm (fn, fn_type, this_quals);
          DECL_CHAIN (this_parm) = DECL_ARGUMENTS (fn);
          DECL_ARGUMENTS (fn) = this_parm;
    
          grokclassfn (type, fn, kind == sfk_destructor ? DTOR_FLAG : NO_SPECIAL);
        }
    

