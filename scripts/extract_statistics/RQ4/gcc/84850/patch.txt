namespace
    {

    /* Return the DECL of the first non-static subobject of class TYPE
       that satisfies the predicate PRED or null if none can be found.  */
    
    template <class Predicate>
    tree
    first_non_static_field (tree type, Predicate pred)

      if (!type || !CLASS_TYPE_P (type))

          if (pred (field))

          if (pred (base))
    	return base;
          if (tree field = first_non_static_field (base, pred))

    struct NonPublicField
    {
      bool operator() (const_tree t)
      {
        return DECL_P (t) && (TREE_PRIVATE (t) || TREE_PROTECTED (t));
      }
    };
    
    /* Return the DECL of the first non-public subobject of class TYPE
       or null if none can be found.  */
    
    static inline tree
    first_non_public_field (tree type)
    {
      return first_non_static_field (type, NonPublicField ());
    }
    
    struct NonTrivialField
    {
      bool operator() (const_tree t)
      {
        return !trivial_type_p (DECL_P (t) ? TREE_TYPE (t) : t);
      }
    };
    
    /* Return the DECL of the first non-trivial subobject of class TYPE
       or null if none can be found.  */
    
    static inline tree
    first_non_trivial_field (tree type)
    {
      return first_non_static_field (type, NonTrivialField ());
    }
    
    }   /* unnamed namespace */
    

      /* Check to see if the raw memory call is made by a non-static member
         function with THIS as the destination argument for the destination
         type.  If so, and if the class has no non-trivial bases or members,
         be more permissive.  */

          && DECL_NONSTATIC_MEMBER_FUNCTION_P (current_function_decl)

          /* FIXME: The following if statement is overly permissive (see
    	 bug 84851).  Remove it in GCC 9.  */
          if (special
    	  && !BINFO_VTABLE (binfo)
    	  && !BINFO_N_BASE_BINFOS (binfo)
    	  && (DECL_CONSTRUCTOR_P (current_function_decl)
    	      || DECL_DESTRUCTOR_P (current_function_decl)))
    	return;
    
          if (special
    	  && !BINFO_VTABLE (binfo)
    	  && !first_non_trivial_field (desttype))

