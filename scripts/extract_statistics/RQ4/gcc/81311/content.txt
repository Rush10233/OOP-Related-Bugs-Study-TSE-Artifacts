creating a garbage BASELINK; constructors can't be inherited.  */
        ctors = get_class_binding (totype, complete_ctor_identifier);
    
      if (MAYBE_CLASS_TYPE_P (fromtype))
        {
          tree to_nonref = non_reference (totype);

      if (conv_fns)
        {
          if (BRACE_ENCLOSED_INITIALIZER_P (expr))
    	first_arg = CONSTRUCTOR_ELT (expr, 0)->value;
          else
    	first_arg = expr;

    	  && !AGGR_INIT_VIA_CTOR_P (init));
    }
    

    /* Subroutine of the various build_*_call functions.  Overload resolution
       has chosen a winning candidate CAND; build up a CALL_EXPR accordingly.
       ARGS is a TREE_LIST of the unconverted arguments to the call.  FLAGS is a

    	joust (cand, w->loser, 1, complain);
        }
    

      /* OK, we're actually calling this inherited constructor; set its deletedness
         appropriately.  We can get away with doing this here because calling is
         the only way to refer to a constructor.  */

          /* else continue to get conversion error.  */
        }
    

      /* N3276 magic doesn't apply to nested calls.  */
      tsubst_flags_t decltype_flag = (complain & tf_decltype);
      complain &= ~tf_decltype;

      /* Avoid actually calling copy constructors and copy assignment operators,
         if possible.  */
    

        /* Do things the hard way.  */;
      else if (cand->num_convs == 1 
               && (DECL_COPY_CONSTRUCTOR_P (fn) 
                   || DECL_MOVE_CONSTRUCTOR_P (fn))
    	   /* It's unsafe to elide the constructor when handling
    	      a noexcept-expression, it may evaluate to the wrong
    	      value (c++/53025).  */

        {
          tree targ;
          tree arg = argarray[num_artificial_parms_for (fn)];

    	 subobject.  */
          if (CHECKING_P && cxx_dialect >= cxx17)
    	gcc_assert (TREE_CODE (arg) != TARGET_EXPR

    		    /* It's from binding the ref parm to a packed field. */
    		    || convs[0]->need_temporary_p
    		    || seen_error ()

    
          /* [class.copy]: the copy constructor is implicitly defined even if
    	 the implementation elided its use.  */

    	{
    	  if (!mark_used (fn, complain) && !(complain & tf_error))
    	    return error_mark_node;

    	}
        }
    

      if (!already_used
          && !mark_used (fn, complain))
        return error_mark_node;

        {
          tree arg = (**args)[0];
    
          if (BRACE_ENCLOSED_INITIALIZER_P (arg)

          if ((TREE_CODE (arg) == TARGET_EXPR
    	   || TREE_CODE (arg) == CONSTRUCTOR)
    	  && (same_type_ignoring_top_level_qualifiers_p

