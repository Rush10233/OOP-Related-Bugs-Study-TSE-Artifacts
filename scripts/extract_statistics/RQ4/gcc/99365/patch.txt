tparm = do_auto_deduction (tparm, arg, a,
    					 complain, adc_unify, targs);

    /* Returns true if the placeholder type constraint T has any dependent
       (explicit) template arguments.  */
    
    static bool
    placeholder_type_constraint_dependent_p (tree t)
    {
      tree id = unpack_concept_check (t);
      tree args = TREE_OPERAND (id, 1);
      tree first = TREE_VEC_ELT (args, 0);
      gcc_checking_assert (TREE_CODE (first) == WILDCARD_DECL
    		       || is_auto (first));
      for (int i = 1; i < TREE_VEC_LENGTH (args); ++i)
        if (dependent_template_arg_p (TREE_VEC_ELT (args, i)))
          return true;
      return false;
    }
    

      if (processing_template_decl && context == adc_unify)
        /* Constraints will be checked after deduction.  */;
      else if (tree constr = NON_ERROR (PLACEHOLDER_TYPE_CONSTRAINTS (auto_node)))
        {
          if (processing_template_decl)
    	{
    	  gcc_checking_assert (context == adc_variable_type
    			       || context == adc_return_type);
    	  gcc_checking_assert (!type_dependent_expression_p (init));
    	  /* If the constraint is dependent, we need to wait until
    	     instantiation time to resolve the placeholder.  */
    	  if (placeholder_type_constraint_dependent_p (constr))
    	    return type;
    	}

          if ((context == adc_return_type || context == adc_variable_type)
    	  && current_function_decl
    	  && DECL_TEMPLATE_INFO (current_function_decl))
    	outer_targs = DECL_TI_ARGS (current_function_decl);

          tree full_targs = add_to_template_args (outer_targs, targs);
    
          /* HACK: Compensate for callers not always communicating all levels of
    	 outer template arguments by filling in the outermost missing levels
    
    	 if the constraint depends on a template argument belonging to one of
    	 these missing levels, but this hack otherwise allows us to handle a
    	 large subset of possible constraints (including all non-dependent
    	 constraints).  */
          if (int missing_levels = (TEMPLATE_TYPE_ORIG_LEVEL (auto_node)
    				- TMPL_ARGS_DEPTH (full_targs)))
    	{
    	  tree dummy_levels = make_tree_vec (missing_levels);
    	  for (int i = 0; i < missing_levels; ++i)
    	    TREE_VEC_ELT (dummy_levels, i) = make_tree_vec (0);
    	  full_targs = add_to_template_args (dummy_levels, full_targs);
    	}
    
          if (!constraints_satisfied_p (auto_node, full_targs))
    	{
    	  if (complain & tf_warning_or_error)
    	    {
    	      auto_diagnostic_group d;
    	      switch (context)
    		{
    		case adc_unspecified:
    		case adc_unify:
    		  error("placeholder constraints not satisfied");
    		  break;
    		case adc_variable_type:
    		case adc_decomp_type:
    		  error ("deduced initializer does not satisfy "
    			 "placeholder constraints");
    		  break;
    		case adc_return_type:
    		  error ("deduced return type does not satisfy "
    			 "placeholder constraints");
    		  break;
    		case adc_requirement:
    		  error ("deduced expression type does not satisfy "
    			 "placeholder constraints");
    		  break;
    		}
    	      diagnose_constraints (input_location, auto_node, full_targs);
    	    }
    	  return error_mark_node;
    	}
        }

      if (TEMPLATE_TYPE_LEVEL (auto_node) == 1)
        /* The outer template arguments are already substituted into type
           (but we still may have used them for constraint checking above).  */;
      else if (context == adc_unify)

