base_binfo = lookup_base (cand->conversion_path,

    
          /* If we know the dynamic type of the object, look up the final overrider
    	 in the BINFO.  */
          if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0
    	  && resolves_to_fixed_type_p (arg))
    	{
    	  tree ov = lookup_vfn_in_binfo (DECL_VINDEX (fn), base_binfo);
    
    	  /* And unwind base_binfo to match.  If we don't find the type we're
    	     looking for in BINFO_INHERITANCE_CHAIN, we're looking at diamond
    	     inheritance; for now do a normal virtual call in that case.  */
    	  tree octx = DECL_CONTEXT (ov);
    	  tree obinfo = base_binfo;
    	  while (obinfo && !SAME_BINFO_TYPE_P (BINFO_TYPE (obinfo), octx))
    	    obinfo = BINFO_INHERITANCE_CHAIN (obinfo);
    	  if (obinfo)
    	    {
    	      fn = ov;
    	      base_binfo = obinfo;
    	      flags |= LOOKUP_NONVIRTUAL;
    	    }
    	}
    
          converted_arg = build_base_path (PLUS_EXPR, arg,

tree ov = lookup_vfn_in_binfo (DECL_VINDEX (fn), base_binfo);
    
    	  /* And unwind base_binfo to match.  If we don't find the type we're
    	     looking for in BINFO_INHERITANCE_CHAIN, we're looking at diamond
    	     inheritance; for now do a normal virtual call in that case.  */
    	  tree octx = DECL_CONTEXT (ov);
    	  tree obinfo = base_binfo;
    	  while (obinfo && !SAME_BINFO_TYPE_P (BINFO_TYPE (obinfo), octx))
    	    obinfo = BINFO_INHERITANCE_CHAIN (obinfo);
    	  if (obinfo)
    	    {
    	      fn = ov;
    	      base_binfo = obinfo;
    	      flags |= LOOKUP_NONVIRTUAL;
    	    }

          tree converted_arg = build_base_path (PLUS_EXPR, arg,
    					    base_binfo, 1, complain);
    

base_binfo = lookup_base (cand->conversion_path,

    
          /* If we know the dynamic type of the object, look up the final overrider
    	 in the BINFO.  */
          if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0
    	  && resolves_to_fixed_type_p (arg))
    	{
    	  tree ov = lookup_vfn_in_binfo (DECL_VINDEX (fn), base_binfo);
    
    	  /* And unwind base_binfo to match.  If we don't find the type we're
    	     looking for in BINFO_INHERITANCE_CHAIN, we're looking at diamond
    	     inheritance; for now do a normal virtual call in that case.  */
    	  tree octx = DECL_CONTEXT (ov);
    	  tree obinfo = base_binfo;
    	  while (obinfo && !SAME_BINFO_TYPE_P (BINFO_TYPE (obinfo), octx))
    	    obinfo = BINFO_INHERITANCE_CHAIN (obinfo);
    	  if (obinfo)
    	    {
    	      fn = ov;
    	      base_binfo = obinfo;
    	      flags |= LOOKUP_NONVIRTUAL;
    	    }
    	}
    
          converted_arg = build_base_path (PLUS_EXPR, arg,

tree ov = lookup_vfn_in_binfo (DECL_VINDEX (fn), base_binfo);
    
    	  /* And unwind base_binfo to match.  If we don't find the type we're
    	     looking for in BINFO_INHERITANCE_CHAIN, we're looking at diamond
    	     inheritance; for now do a normal virtual call in that case.  */
    	  tree octx = DECL_CONTEXT (ov);
    	  tree obinfo = base_binfo;
    	  while (obinfo && !SAME_BINFO_TYPE_P (BINFO_TYPE (obinfo), octx))
    	    obinfo = BINFO_INHERITANCE_CHAIN (obinfo);
    	  if (obinfo)
    	    {
    	      fn = ov;
    	      base_binfo = obinfo;
    	      flags |= LOOKUP_NONVIRTUAL;
    	    }

          tree converted_arg = build_base_path (PLUS_EXPR, arg,
    					    base_binfo, 1, complain);
    

