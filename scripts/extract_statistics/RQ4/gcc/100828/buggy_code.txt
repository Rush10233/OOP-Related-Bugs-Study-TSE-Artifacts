/* This should call emplace_back(). There's an extra copy being
           invoked by using push_back().  */
        m_clauses.push_back (t);

        m_clauses.push_back (*m_current);
        return m_clauses.back ();

    /* Decompose the logical formula F according to the logical
       rules determined by R.  The result is a formula containing
       clauses that contain only atomic terms.  */
    
    void
    decompose_formula (formula& f, rules r)
    {
      while (!f.done ())
        decompose_clause (f, *f.current (), r);
    }
    
    /* Fully decomposing T into a list of sequents, each comprised of
       a list of atomic constraints, as if T were an antecedent.  */
    
    static formula
    decompose_antecedents (tree t)
    {
      formula f (t);
      decompose_formula (f, left);
      return f;
    }
    
    /* Fully decomposing T into a list of sequents, each comprised of
       a list of atomic constraints, as if T were a consequent.  */
    
    static formula
    decompose_consequents (tree t)
    {
      formula f (t);
      decompose_formula (f, right);
      return f;
    }
    

    /* Derive a proof of T from disjunctive clauses in F.  */
    
    static bool
    derive_proofs (formula& f, tree t, rules r)
    {
      for (formula::iterator i = f.begin(); i != f.end(); ++i)
        if (!derive_proof (*i, t, r))
          return false;
      return true;
    }
    
    /* The largest number of clauses in CNF or DNF we accept as input
       for subsumption. This an upper bound of 2^16 expressions.  */
    static int max_problem_size = 16;
    
    static inline bool
    diagnose_constraint_size (tree t)
    {
      error_at (input_location, "%qE exceeds the maximum constraint complexity", t);
      return false;
    }
    

      int n1 = dnf_size (lhs);
      int n2 = cnf_size (rhs);
    
      /* Make sure we haven't exceeded the largest acceptable problem.  */
      if (std::min (n1, n2) >= max_problem_size)
        {
          if (n1 < n2)
            diagnose_constraint_size (lhs);
          else
    	diagnose_constraint_size (rhs);
          return false;
        }
    
      /* Decompose the smaller of the two formulas, and recursively
         check for implication of the larger.  */
      bool result;
      if (n1 <= n2)
        {
          formula dnf = decompose_antecedents (lhs);
          result = derive_proofs (dnf, rhs, left);
        }

          formula cnf = decompose_consequents (rhs);
          result = derive_proofs (cnf, lhs, right);

/* This should call emplace_back(). There's an extra copy being
           invoked by using push_back().  */
        m_clauses.push_back (t);

        m_clauses.push_back (*m_current);
        return m_clauses.back ();

    /* Decompose the logical formula F according to the logical
       rules determined by R.  The result is a formula containing
       clauses that contain only atomic terms.  */
    
    void
    decompose_formula (formula& f, rules r)
    {
      while (!f.done ())
        decompose_clause (f, *f.current (), r);
    }
    
    /* Fully decomposing T into a list of sequents, each comprised of
       a list of atomic constraints, as if T were an antecedent.  */
    
    static formula
    decompose_antecedents (tree t)
    {
      formula f (t);
      decompose_formula (f, left);
      return f;
    }
    
    /* Fully decomposing T into a list of sequents, each comprised of
       a list of atomic constraints, as if T were a consequent.  */
    
    static formula
    decompose_consequents (tree t)
    {
      formula f (t);
      decompose_formula (f, right);
      return f;
    }
    

    /* Derive a proof of T from disjunctive clauses in F.  */
    
    static bool
    derive_proofs (formula& f, tree t, rules r)
    {
      for (formula::iterator i = f.begin(); i != f.end(); ++i)
        if (!derive_proof (*i, t, r))
          return false;
      return true;
    }
    
    /* The largest number of clauses in CNF or DNF we accept as input
       for subsumption. This an upper bound of 2^16 expressions.  */
    static int max_problem_size = 16;
    
    static inline bool
    diagnose_constraint_size (tree t)
    {
      error_at (input_location, "%qE exceeds the maximum constraint complexity", t);
      return false;
    }
    

      int n1 = dnf_size (lhs);
      int n2 = cnf_size (rhs);
    
      /* Make sure we haven't exceeded the largest acceptable problem.  */
      if (std::min (n1, n2) >= max_problem_size)
        {
          if (n1 < n2)
            diagnose_constraint_size (lhs);
          else
    	diagnose_constraint_size (rhs);
          return false;
        }
    
      /* Decompose the smaller of the two formulas, and recursively
         check for implication of the larger.  */
      bool result;
      if (n1 <= n2)
        {
          formula dnf = decompose_antecedents (lhs);
          result = derive_proofs (dnf, rhs, left);
        }

          formula cnf = decompose_consequents (rhs);
          result = derive_proofs (cnf, lhs, right);

