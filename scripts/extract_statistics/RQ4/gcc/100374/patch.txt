static void tsubst_each_template_parm_constraints (tree, tree, tsubst_flags_t);

    	      tree freq = get_constraints (fn);
    	      tree dreq = get_constraints (decl);

    		  freq = tsubst_constraint_info (freq, fargs, complain, fn);

          if (treqs != TEMPLATE_PARMS_CONSTRAINTS (parms))
    	{
    	  TEMPLATE_PARMS_CONSTRAINTS (parms) = treqs;
    	  /* As well as each TEMPLATE_PARM_CONSTRAINTS.  */
    	  tsubst_each_template_parm_constraints (parms, args,
    						 tf_warning_or_error);
    	}

    	  tsubst_each_template_parm_constraints (parms, args,
    						 tf_warning_or_error);

    	      tsubst_each_template_parm_constraints (DECL_TEMPLATE_PARMS (tmpl),
    						     args, tf_warning_or_error);

      TEMPLATE_PARM_CONSTRAINTS (r) = TEMPLATE_PARM_CONSTRAINTS (t);

    /* Substitute in-place the TEMPLATE_PARM_CONSTRAINTS of each template
       parameter in PARMS for sake of declaration matching.  */
    
    static void
    tsubst_each_template_parm_constraints (tree parms, tree args,
    				       tsubst_flags_t complain)
    {
      ++processing_template_decl;
      for (; parms; parms = TREE_CHAIN (parms))
        {
          tree level = TREE_VALUE (parms);
          for (int i = 0; i < TREE_VEC_LENGTH (level); ++i)
    	{
    	  tree parm = TREE_VEC_ELT (level, i);
    	  TEMPLATE_PARM_CONSTRAINTS (parm)
    	    = tsubst_constraint (TEMPLATE_PARM_CONSTRAINTS (parm), args,
    				 complain, NULL_TREE);
    	}
        }
      --processing_template_decl;
    }
    

static void tsubst_each_template_parm_constraints (tree, tree, tsubst_flags_t);

    	      tree freq = get_constraints (fn);
    	      tree dreq = get_constraints (decl);

    		  freq = tsubst_constraint_info (freq, fargs, complain, fn);

          if (treqs != TEMPLATE_PARMS_CONSTRAINTS (parms))
    	{
    	  TEMPLATE_PARMS_CONSTRAINTS (parms) = treqs;
    	  /* As well as each TEMPLATE_PARM_CONSTRAINTS.  */
    	  tsubst_each_template_parm_constraints (parms, args,
    						 tf_warning_or_error);
    	}

    	  tsubst_each_template_parm_constraints (parms, args,
    						 tf_warning_or_error);

    	      tsubst_each_template_parm_constraints (DECL_TEMPLATE_PARMS (tmpl),
    						     args, tf_warning_or_error);

      TEMPLATE_PARM_CONSTRAINTS (r) = TEMPLATE_PARM_CONSTRAINTS (t);

    /* Substitute in-place the TEMPLATE_PARM_CONSTRAINTS of each template
       parameter in PARMS for sake of declaration matching.  */
    
    static void
    tsubst_each_template_parm_constraints (tree parms, tree args,
    				       tsubst_flags_t complain)
    {
      ++processing_template_decl;
      for (; parms; parms = TREE_CHAIN (parms))
        {
          tree level = TREE_VALUE (parms);
          for (tree parm : tree_vec_range (level))
    	TEMPLATE_PARM_CONSTRAINTS (parm)
    	  = tsubst_constraint (TEMPLATE_PARM_CONSTRAINTS (parm), args,
    			       complain, NULL_TREE);
        }
      --processing_template_decl;
    }
    

