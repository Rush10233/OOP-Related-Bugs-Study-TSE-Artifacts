
    extern void cxx_print_statistics		(void);
    extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);

    
    /* in ptree.c */
    extern void cxx_print_xnode			(FILE *, tree, int);

         suppress reports of deprecated items.  */
      if (type && TREE_DEPRECATED (type)
          && deprecated_state != DEPRECATED_SUPPRESS)

      if (type && TREE_CODE (type) == TYPE_DECL)
        {
          typedef_decl = type;
          type = TREE_TYPE (typedef_decl);
          if (TREE_DEPRECATED (type)
    	  && DECL_ARTIFICIAL (typedef_decl)
    	  && deprecated_state != DEPRECATED_SUPPRESS)

        }
      /* No type at all: default to `int', and set DEFAULTED_INT
         because it was not a user-defined typedef.  */

    		  explicitp = 2;
    	      }
    

    
    	    if (inner_declarator
    		&& inner_declarator->kind == cdk_id

    	    {
    	      tree deptype = type_is_deprecated (type);
    	      if (deptype)

    	    }
    
    	  /* Top-level qualifiers on the parameters are

        }
    }
    

    /* Implement -Wzero_as_null_pointer_constant.  Return true if the
       conditions for the warning hold, false otherwise.  */
    bool

          if (complain & tf_warning
    	  && TREE_DEPRECATED (type)
    	  && DECL_ARTIFICIAL (exp))

        }
      else
        type = exp;


    extern void cxx_print_statistics		(void);
    extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);

    
    /* in ptree.c */
    extern void cxx_print_xnode			(FILE *, tree, int);

         suppress reports of deprecated items.  */
      if (type && TREE_DEPRECATED (type)
          && deprecated_state != DEPRECATED_SUPPRESS)

      if (type && TREE_CODE (type) == TYPE_DECL)
        {
          typedef_decl = type;
          type = TREE_TYPE (typedef_decl);
          if (TREE_DEPRECATED (type)
    	  && DECL_ARTIFICIAL (typedef_decl)
    	  && deprecated_state != DEPRECATED_SUPPRESS)

        }
      /* No type at all: default to `int', and set DEFAULTED_INT
         because it was not a user-defined typedef.  */

    		  explicitp = 2;
    	      }
    

    
    	    if (inner_declarator
    		&& inner_declarator->kind == cdk_id

    	    {
    	      tree deptype = type_is_deprecated (type);
    	      if (deptype)

    	    }
    
    	  /* Top-level qualifiers on the parameters are

        }
    }
    

    /* Implement -Wzero_as_null_pointer_constant.  Return true if the
       conditions for the warning hold, false otherwise.  */
    bool

          if (complain & tf_warning
    	  && TREE_DEPRECATED (type)
    	  && DECL_ARTIFICIAL (exp))

        }
      else
        type = exp;


    extern void cxx_print_statistics		(void);
    extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);

    
    /* in ptree.c */
    extern void cxx_print_xnode			(FILE *, tree, int);

         suppress reports of deprecated items.  */
      if (type && TREE_DEPRECATED (type)
          && deprecated_state != DEPRECATED_SUPPRESS)

      if (type && TREE_CODE (type) == TYPE_DECL)
        {
          typedef_decl = type;
          type = TREE_TYPE (typedef_decl);
          if (TREE_DEPRECATED (type)
    	  && DECL_ARTIFICIAL (typedef_decl)
    	  && deprecated_state != DEPRECATED_SUPPRESS)

        }
      /* No type at all: default to `int', and set DEFAULTED_INT
         because it was not a user-defined typedef.  */

    		  error ("a conversion function cannot have a trailing return type");
    	      }
    

    
    	    if (inner_declarator
    		&& inner_declarator->kind == cdk_id

    	    {
    	      tree deptype = type_is_deprecated (type);
    	      if (deptype)

    	    }
    
    	  /* Top-level qualifiers on the parameters are

        }
    }
    

    /* Implement -Wzero_as_null_pointer_constant.  Return true if the
       conditions for the warning hold, false otherwise.  */
    bool

          if (complain & tf_warning
    	  && TREE_DEPRECATED (type)
    	  && DECL_ARTIFICIAL (exp))

        }
      else
        type = exp;

