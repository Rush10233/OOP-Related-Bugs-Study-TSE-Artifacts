= parser->in_unbraced_linkage_specification_p;
      parser->in_unbraced_linkage_specification_p = false;
    
      /* Start the class.  */
      if (nested_name_specifier_p)
        {

          fixup_attribute_variants (type);
        }
    

      /* We will have entered the scope containing the class; the names of
         base classes should be looked up in that context.  For example:
    

      return canon;
    }
    

    static bool
    is_compatible_template_arg (tree parm, tree arg)
    {

= parser->in_unbraced_linkage_specification_p;
      parser->in_unbraced_linkage_specification_p = false;
    
      /* Start the class.  */
      if (nested_name_specifier_p)
        {

          fixup_attribute_variants (type);
        }
    

      /* We will have entered the scope containing the class; the names of
         base classes should be looked up in that context.  For example:
    

      return canon;
    }
    

    static bool
    is_compatible_template_arg (tree parm, tree arg)
    {

