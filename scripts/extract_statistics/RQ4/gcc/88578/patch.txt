if (!split_nonconstant_init_1 (sub, value)
    		      /* For flexible array member with initializer we
    			 can't remove the initializer, because only the
    			 initializer determines how many elements the
    			 flexible array member has.  */
    		  || (!array_type_p
    		      && TREE_CODE (inner_type) == ARRAY_TYPE
    		      && TYPE_DOMAIN (inner_type) == NULL
    		      && TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE
    		      && COMPLETE_TYPE_P (TREE_TYPE (value))
    		      && !integer_zerop (TYPE_SIZE (TREE_TYPE (value)))
    		      && idx == CONSTRUCTOR_NELTS (init) - 1
    		      && TYPE_HAS_TRIVIAL_DESTRUCTOR
    				(strip_array_types (inner_type))))

    	  unsigned HOST_WIDE_INT fldsize
    	    = array_size_for_constructor (local->val);
    	  fieldsize = int_size_in_bytes (TREE_TYPE (local->val));
    	  /* In most cases fieldsize == fldsize as the size of the initializer
    	     determines how many elements the flexible array member has.  For
    	     C++ fldsize can be smaller though, if the last or several last or
    	     all initializers of the flexible array member have side-effects
    	     and the FE splits them into dynamic initialization.  */
    	  gcc_checking_assert (fieldsize >= fldsize);

if (!split_nonconstant_init_1 (sub, value, true)
    		      /* For flexible array member with initializer we
    			 can't remove the initializer, because only the
    			 initializer determines how many elements the
    			 flexible array member has.  */
    		  || (!array_type_p
    		      && TREE_CODE (inner_type) == ARRAY_TYPE
    		      && TYPE_DOMAIN (inner_type) == NULL
    		      && TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE
    		      && COMPLETE_TYPE_P (TREE_TYPE (value))
    		      && !integer_zerop (TYPE_SIZE (TREE_TYPE (value)))
    		      && idx == CONSTRUCTOR_NELTS (init) - 1
    		      && TYPE_HAS_TRIVIAL_DESTRUCTOR
    				(strip_array_types (inner_type))))

    	  unsigned HOST_WIDE_INT fldsize
    	    = array_size_for_constructor (local->val);
    	  fieldsize = int_size_in_bytes (TREE_TYPE (local->val));
    	  /* In most cases fieldsize == fldsize as the size of the initializer
    	     determines how many elements the flexible array member has.  For
    	     C++ fldsize can be smaller though, if the last or several last or
    	     all initializers of the flexible array member have side-effects
    	     and the FE splits them into dynamic initialization.  */
    	  gcc_checking_assert (fieldsize >= fldsize);

if (!split_nonconstant_init_1 (sub, value, true)
    		      /* For flexible array member with initializer we
    			 can't remove the initializer, because only the
    			 initializer determines how many elements the
    			 flexible array member has.  */
    		  || (!array_type_p
    		      && TREE_CODE (inner_type) == ARRAY_TYPE
    		      && TYPE_DOMAIN (inner_type) == NULL
    		      && TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE
    		      && COMPLETE_TYPE_P (TREE_TYPE (value))
    		      && !integer_zerop (TYPE_SIZE (TREE_TYPE (value)))
    		      && idx == CONSTRUCTOR_NELTS (init) - 1
    		      && TYPE_HAS_TRIVIAL_DESTRUCTOR
    				(strip_array_types (inner_type))))

    	  unsigned HOST_WIDE_INT fldsize
    	    = array_size_for_constructor (local->val);
    	  fieldsize = int_size_in_bytes (TREE_TYPE (local->val));
    	  /* In most cases fieldsize == fldsize as the size of the initializer
    	     determines how many elements the flexible array member has.  For
    	     C++ fldsize can be smaller though, if the last or several last or
    	     all initializers of the flexible array member have side-effects
    	     and the FE splits them into dynamic initialization.  */
    	  gcc_checking_assert (fieldsize >= fldsize);

if (!split_nonconstant_init_1 (sub, value, true)
    		      /* For flexible array member with initializer we
    			 can't remove the initializer, because only the
    			 initializer determines how many elements the
    			 flexible array member has.  */
    		  || (!array_type_p
    		      && TREE_CODE (inner_type) == ARRAY_TYPE
    		      && TYPE_DOMAIN (inner_type) == NULL
    		      && TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE
    		      && COMPLETE_TYPE_P (TREE_TYPE (value))
    		      && !integer_zerop (TYPE_SIZE (TREE_TYPE (value)))
    		      && idx == CONSTRUCTOR_NELTS (init) - 1
    		      && TYPE_HAS_TRIVIAL_DESTRUCTOR
    				(strip_array_types (inner_type))))

    	  unsigned HOST_WIDE_INT fldsize
    	    = array_size_for_constructor (local->val);
    	  fieldsize = int_size_in_bytes (TREE_TYPE (local->val));
    	  /* In most cases fieldsize == fldsize as the size of the initializer
    	     determines how many elements the flexible array member has.  For
    	     C++ fldsize can be smaller though, if the last or several last or
    	     all initializers of the flexible array member have side-effects
    	     and the FE splits them into dynamic initialization.  */
    	  gcc_checking_assert (fieldsize >= fldsize);

