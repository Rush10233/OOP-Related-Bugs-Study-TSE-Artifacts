if (TREE_CODE (comp) == TREE_LIST)
    	comp = TREE_VALUE (comp);

    	  tree lhs_mem = build3_loc (field_loc, COMPONENT_REF, expr_type, lhs,
    				     field, NULL_TREE);
    	  tree rhs_mem = build3_loc (field_loc, COMPONENT_REF, expr_type, rhs,
    				     field, NULL_TREE);
    	  tree loop_indexes = NULL_TREE;
    	  while (TREE_CODE (expr_type) == ARRAY_TYPE)
    	    {
    	      /* Flexible array member.  */
    	      if (TYPE_DOMAIN (expr_type) == NULL_TREE
    		  || TYPE_MAX_VALUE (TYPE_DOMAIN (expr_type)) == NULL_TREE)
    		{
    		  if (complain & tf_error)
    		    inform (field_loc, "cannot default compare "
    				       "flexible array member");
    		  bad = true;
    		  break;
    		}
    	      tree maxval = TYPE_MAX_VALUE (TYPE_DOMAIN (expr_type));
    	      /* [0] array.  No subobjects to compare, just skip it.  */
    	      if (integer_all_onesp (maxval))
    		break;
    	      tree idx;
    	      /* [1] array, no loop needed, just add [0] ARRAY_REF.
    		 Similarly if !info.defining.  */
    	      if (integer_zerop (maxval) || !info.defining)
    		idx = size_zero_node;
    	      /* Some other array, will need runtime loop.  */
    	      else
    		{
    		  idx = force_target_expr (sizetype, maxval, complain);
    		  loop_indexes = tree_cons (idx, NULL_TREE, loop_indexes);
    		}
    	      expr_type = TREE_TYPE (expr_type);
    	      lhs_mem = build4_loc (field_loc, ARRAY_REF, expr_type, lhs_mem,
    				    idx, NULL_TREE, NULL_TREE);
    	      rhs_mem = build4_loc (field_loc, ARRAY_REF, expr_type, rhs_mem,
    				    idx, NULL_TREE, NULL_TREE);
    	    }
    	  if (TREE_CODE (expr_type) == ARRAY_TYPE)
    	    continue;
    

    	  /* Most of the time, comp is the expression that should be evaluated
    	     to compare the two members.  If the expression needs to be
    	     evaluated more than once in a loop, it will be a TREE_LIST
    	     instead, whose TREE_VALUE is the expression for one array element,
    	     TREE_PURPOSE is innermost iterator temporary and if the array
    	     is multidimensional, TREE_CHAIN will contain another TREE_LIST
    	     with second innermost iterator in its TREE_PURPOSE and so on.  */
    	  if (loop_indexes)
    	    {
    	      TREE_VALUE (loop_indexes) = comp;
    	      comp = loop_indexes;
    	    }

    	  tree loop_indexes = NULL_TREE;

    	    {
    	      if (TREE_CODE (comp) == TREE_LIST)
    		{
    		  loop_indexes = comp;
    		  comp = TREE_VALUE (comp);
    		  loop_indexes = nreverse (loop_indexes);
    		  for (tree loop_index = loop_indexes; loop_index;
    		       loop_index = TREE_CHAIN (loop_index))
    		    {
    		      tree for_stmt = begin_for_stmt (NULL_TREE, NULL_TREE);
    		      tree idx = TREE_PURPOSE (loop_index);
    		      tree maxval = TARGET_EXPR_INITIAL (idx);
    		      TARGET_EXPR_INITIAL (idx) = size_zero_node;
    		      add_stmt (idx);
    		      finish_init_stmt (for_stmt);
    		      finish_for_cond (build2 (LE_EXPR, boolean_type_node, idx,
    					       maxval), for_stmt, false, 0);
    		      finish_for_expr (cp_build_unary_op (PREINCREMENT_EXPR,
    							  TARGET_EXPR_SLOT (idx),
    							  false, complain),
    							  for_stmt);
    		      /* Store in TREE_VALUE the for_stmt tree, so that we can
    			 later on call finish_for_stmt on it (in the reverse
    			 order).  */
    		      TREE_VALUE (loop_index) = for_stmt;
    		    }
    		  loop_indexes = nreverse (loop_indexes);
    		}
    	      if_ = begin_if_stmt ();
    	    }

    	      for (tree loop_index = loop_indexes; loop_index;
    		   loop_index = TREE_CHAIN (loop_index))
    		finish_for_stmt (TREE_VALUE (loop_index));

