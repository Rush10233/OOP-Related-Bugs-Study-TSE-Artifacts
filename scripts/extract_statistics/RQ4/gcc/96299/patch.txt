r = genericize_spaceship (loc, type, lhs, rhs);

      return genericize_spaceship (input_location, type, op0, op1);

    /* Wrapper that leaves out the usually-null op3 and overload parms.  */
    inline tree build_new_op (const op_location_t &loc, enum tree_code code,
    			  int flags, tree arg1, tree arg2,
    			  tsubst_flags_t complain)
    {
      return build_new_op (loc, code, flags, arg1, arg2, NULL_TREE, NULL, complain);
    }

    extern tree genericize_spaceship		(location_t, tree, tree, tree);

    /* Turn <=> with type TYPE and operands OP0 and OP1 into GENERIC.
       This is also used by build_comparison_op for fallback to op< and op==
       in a defaulted op<=>.  */

    genericize_spaceship (location_t loc, tree type, tree op0, tree op1)

    
      if (tag == cc_last && is_auto (type))
        {
          /* build_comparison_op is checking to see if we want to suggest changing
    	 the op<=> return type from auto to a specific comparison category; any
    	 category will do for now.  */
          tag = cc_strong_ordering;
          type = lookup_comparison_category (tag, tf_none);
          if (type == error_mark_node)
    	return error_mark_node;
        }
    

      if (SCALAR_TYPE_P (TREE_TYPE (op0)))
        {
          op0 = save_expr (op0);
          op1 = save_expr (op1);
        }

      int flags = LOOKUP_NORMAL;
      tsubst_flags_t complain = tf_none;
    

    	 op1 < op0 ? greater : unordered */

          tree comp = build_new_op (loc, LT_EXPR, flags, op1, op0, complain);
          r = build_conditional_expr (loc, comp, gt, uo, complain);

      tree comp = build_new_op (loc, LT_EXPR, flags, op0, op1, complain);
      r = build_conditional_expr (loc, comp, lt, r, complain);

      comp = build_new_op (loc, EQ_EXPR, flags, op0, op1, complain);
      r = build_conditional_expr (loc, comp, eq, r, complain);

      int flags = LOOKUP_NORMAL;

          comp_cat_tag retcat = cc_last;
          if (code == SPACESHIP_EXPR && !FNDECL_USED_AUTO (fndecl))
    	retcat = cat_tag_for (rettype);
    

    	  location_t field_loc = DECL_SOURCE_LOCATION (field);
    

    		inform (field_loc, "cannot default compare "

    		inform (field_loc, "cannot default compare "

    	  tree overload = NULL_TREE;
    	  tree comp = build_new_op (field_loc, code, flags, lhs_mem, rhs_mem,
    				    NULL_TREE, &overload,
    				    retcat != cc_last ? tf_none : complain);

    	      if (overload == NULL_TREE && code == SPACESHIP_EXPR
    		  && (retcat != cc_last || complain))
    		{
    		  tree comptype = (retcat != cc_last ? rettype
    				   : DECL_SAVED_AUTO_RETURN_TYPE (fndecl));
    		  /* No viable <=>, try using op< and op==.  */
    		  tree lteq = genericize_spaceship (field_loc, comptype,
    						    lhs_mem, rhs_mem);
    		  if (lteq != error_mark_node)
    		    {
    		      /* We found usable < and ==.  */
    		      if (retcat != cc_last)
    			/* Return type is a comparison category, use them.  */
    			comp = lteq;
    		      else if (complain & tf_error)
    			/* Return type is auto, suggest changing it.  */
    			inform (info.loc, "changing the return type from %qs "
    				"to a comparison category type will allow the "
    				"comparison to use %qs and %qs", "auto",
    				"operator<", "operator==");
    		    }
    		  else if (retcat != cc_last && complain != tf_none)
    		    /* No usable < and ==, give an error for op<=>.  */
    		    build_new_op (field_loc, code, flags, lhs_mem, rhs_mem,
    				  complain);
    		}
    	      if (comp == error_mark_node)
    		{
    		  bad = true;
    		  continue;
    		}

    	  if (code != SPACESHIP_EXPR)
    	    ;
    	  else if (FNDECL_USED_AUTO (fndecl)
    		   && cat_tag_for (TREE_TYPE (comp)) == cc_last)

    		inform (field_loc,

    	  else if (!FNDECL_USED_AUTO (fndecl)
    		   && !can_convert (rettype, TREE_TYPE (comp), complain))
    	    {
    	      if (complain & tf_error)
    		error_at (field_loc,
    			  "three-way comparison of %qD has type %qT, which "
    			  "does not convert to %qT",
    			  field, TREE_TYPE (comp), rettype);
    	      bad = true;
    	      continue;
    	    }

bool scalar = SCALAR_TYPE_P (TREE_TYPE (op0));
      if (scalar)

      tree comp;

          if (scalar)
    	{
    	  /* For scalars use the low level operations; using build_new_op causes
    	     trouble with constexpr eval in the middle of genericize (100367).  */
    	  comp = fold_build2 (LT_EXPR, boolean_type_node, op1, op0);
    	  r = fold_build3 (COND_EXPR, type, comp, gt, uo);
    	}
          else
    	{
    	  comp = build_new_op (loc, LT_EXPR, flags, op1, op0, complain);
    	  r = build_conditional_expr (loc, comp, gt, uo, complain);
    	}

      if (scalar)
        {
          comp = fold_build2 (LT_EXPR, boolean_type_node, op0, op1);
          r = fold_build3 (COND_EXPR, type, comp, lt, r);
        }
      else
        {
          comp = build_new_op (loc, LT_EXPR, flags, op0, op1, complain);
          r = build_conditional_expr (loc, comp, lt, r, complain);
        }

      if (scalar)
        {
          comp = fold_build2 (EQ_EXPR, boolean_type_node, op0, op1);
          r = fold_build3 (COND_EXPR, type, comp, eq, r);
        }
      else
        {
          comp = build_new_op (loc, EQ_EXPR, flags, op0, op1, complain);
          r = build_conditional_expr (loc, comp, eq, r, complain);
        }

bool scalar = SCALAR_TYPE_P (TREE_TYPE (op0));
      if (scalar)

      tree comp;

          if (scalar)
    	{
    	  /* For scalars use the low level operations; using build_new_op causes
    	     trouble with constexpr eval in the middle of genericize (100367).  */
    	  comp = fold_build2 (LT_EXPR, boolean_type_node, op1, op0);
    	  r = fold_build3 (COND_EXPR, type, comp, gt, uo);
    	}
          else
    	{
    	  comp = build_new_op (loc, LT_EXPR, flags, op1, op0, complain);
    	  r = build_conditional_expr (loc, comp, gt, uo, complain);
    	}

      if (scalar)
        {
          comp = fold_build2 (LT_EXPR, boolean_type_node, op0, op1);
          r = fold_build3 (COND_EXPR, type, comp, lt, r);
        }
      else
        {
          comp = build_new_op (loc, LT_EXPR, flags, op0, op1, complain);
          r = build_conditional_expr (loc, comp, lt, r, complain);
        }

      if (scalar)
        {
          comp = fold_build2 (EQ_EXPR, boolean_type_node, op0, op1);
          r = fold_build3 (COND_EXPR, type, comp, eq, r);
        }
      else
        {
          comp = build_new_op (loc, EQ_EXPR, flags, op0, op1, complain);
          r = build_conditional_expr (loc, comp, eq, r, complain);
        }

