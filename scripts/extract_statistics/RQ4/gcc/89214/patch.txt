{
    	  /* In C++17, aggregates can have bases, thus participate in
    	     aggregate initialization.  In the following case:
    
    	       struct B { int c; };
    	       struct D : B { };
    	       D d{{D{{42}}}};
    
    	    there's an extra set of braces, so the D temporary initializes
    	    the first element of d, which is the B base subobject.  The base
    	    of type B is copy-initialized from the D temporary, causing
    	    object slicing.  */
    	  tree field = next_initializable_field (TYPE_FIELDS (type));
    	  if (field && DECL_FIELD_IS_BASE (field))
    	    {
    	      if (warning_at (loc, 0, "initializing a base class of type %qT "
    			      "results in object slicing", TREE_TYPE (field)))
    		inform (loc, "remove %<{ }%> around initializer");
    	    }
    	  else
    	    /* We should have fixed this in reshape_init.  */
    	    gcc_unreachable ();
    	}

{
    	  /* In C++17, aggregates can have bases, thus participate in
    	     aggregate initialization.  In the following case:
    
    	       struct B { int c; };
    	       struct D : B { };
    	       D d{{D{{42}}}};
    
    	    there's an extra set of braces, so the D temporary initializes
    	    the first element of d, which is the B base subobject.  The base
    	    of type B is copy-initialized from the D temporary, causing
    	    object slicing.  */
    	  tree field = next_initializable_field (TYPE_FIELDS (type));
    	  if (field && DECL_FIELD_IS_BASE (field))
    	    {
    	      if (warning_at (loc, 0, "initializing a base class of type %qT "
    			      "results in object slicing", TREE_TYPE (field)))
    		inform (loc, "remove %<{ }%> around initializer");
    	    }
    	  else
    	    /* We should have fixed this in reshape_init.  */
    	    gcc_unreachable ();
    	}

