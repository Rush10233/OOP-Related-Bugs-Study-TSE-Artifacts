if (target_expr_needs_replace (from))

       Note:  The folding of non-omp cases is something to move into

    struct cp_fold_data
    {
      hash_set<tree> pset;
      bool genericize; // called from cp_fold_function?
    
      cp_fold_data (bool g): genericize (g) {}
    };
    

    cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)

      cp_fold_data *data = (cp_fold_data*)data_;

    	  if (!data->pset.add (stmt))

      if (data->pset.add (stmt))

          /* These are only for genericize time; they're here rather than in
    	 cp_genericize to avoid problems with the invisible reference
    	 transition.  */

          if (data->genericize)
    	cp_genericize_init_expr (stmt_p);

          if (data->genericize)
    	cp_genericize_target_expr (stmt_p);

      cp_fold_data data (/*genericize*/true);
      cp_walk_tree (&DECL_SAVED_TREE (fndecl), cp_fold_r, &data, NULL);

      cp_fold_data data (/*genericize*/false);
      cp_walk_tree (&x, cp_fold_r, &data, NULL);

    /* If T is a VEC_INIT_EXPR, return it, possibly stripping a TARGET_EXPR
       wrapper.  Otherwise, return null.  */
    inline tree
    get_vec_init_expr (tree t)
    {
      if (t && TREE_CODE (t) == TARGET_EXPR)
        t = TARGET_EXPR_INITIAL (t);
      if (t && TREE_CODE (t) == VEC_INIT_EXPR)
        return t;
      return NULL_TREE;
    }
    

    /* True if T is a TARGET_EXPR for which we'll need to replace_decl to use it as
       an initializer.  */
    inline bool
    target_expr_needs_replace (tree t)
    {
      if (!t || TREE_CODE (t) != TARGET_EXPR)
        return false;
      tree init = TARGET_EXPR_INITIAL (t);
      if (!init || !VOID_TYPE_P (TREE_TYPE (init)))
        return false;
      while (TREE_CODE (init) == COMPOUND_EXPR)
        init = TREE_OPERAND (init, 1);
      return TREE_CODE (init) != AGGR_INIT_EXPR;
    }
    

      if (tree vi = get_vec_init_expr (init))
        init = VEC_INIT_EXPR_INIT (vi);

    
    	     handle cleanup flags properly.  */
    	  gcc_checking_assert (!target_expr_needs_replace (elt));
    

    	  else if (tree vi = get_vec_init_expr (elt))
    	    one_init = expand_vec_init_expr (baseref, vi, complain, flags);

      if (tree vi = get_vec_init_expr (init))
        return vi;

    
    	     handle cleanup flags properly.  */
    	  gcc_checking_assert (!target_expr_needs_replace (value));
    

    	  else if (tree vi = get_vec_init_expr (value))

    	      add_stmt (expand_vec_init_expr (sub, vi, tf_warning_or_error,

          init = get_target_expr (init);

