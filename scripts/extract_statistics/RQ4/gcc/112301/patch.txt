if (!function_body)
    	{
    	  /* Clear the sentinel so we don't try to destroy the retval again on
    	     rethrow (c++/112301).  */
    	  tree clear = build2 (MODIFY_EXPR, boolean_type_node,
    			       current_retval_sentinel, boolean_false_node);
    	  dtor = build2 (COMPOUND_EXPR, void_type_node, clear, dtor);
    	}

      bool in_nrv_cleanup;

        {
          dp->in_nrv_cleanup = true;
          cp_walk_tree (&CLEANUP_BODY (*tp), finalize_nrv_r, data, 0);
          dp->in_nrv_cleanup = false;
          cp_walk_tree (&CLEANUP_EXPR (*tp), finalize_nrv_r, data, 0);
          *walk_subtrees = 0;
    
          CLEANUP_EH_ONLY (*tp) = true;
    
          /* If a cleanup might throw, we need to clear current_retval_sentinel on
    	 the exception path so an outer cleanup added by
    	 maybe_splice_retval_cleanup doesn't run.  */
          if (cp_function_chain->throwing_cleanup)
    	{
    	  tree clear = build2 (MODIFY_EXPR, boolean_type_node,
    			       current_retval_sentinel,
    			       boolean_false_node);
    
    	  /* We're already only on the EH path, just prepend it.  */
    	  tree &exp = CLEANUP_EXPR (*tp);
    	  exp = build2 (COMPOUND_EXPR, void_type_node, clear, exp);
    	}
        }
      /* Disable maybe_splice_retval_cleanup within the NRV cleanup scope, we don't
    
      else if (TREE_CODE (*tp) == CLEANUP_STMT
    	   && dp->in_nrv_cleanup
    	   && CLEANUP_DECL (*tp) == dp->result)
        CLEANUP_EXPR (*tp) = void_node;

      data.in_nrv_cleanup = false;

