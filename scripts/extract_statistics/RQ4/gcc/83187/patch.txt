tree probe = make_node (COMPLEX_TYPE);

      TREE_TYPE (probe) = TYPE_MAIN_VARIANT (component_type);

      hashval_t hash = type_hash_canon_hash (probe);
      tree t = type_hash_canon (hash, probe);

      if (t == probe)

          /* We created a new type.  The hash insertion will have laid
    	 out the type.  We need to check the canonicalization and
    	 maybe set the name.  */
          gcc_checking_assert (COMPLETE_TYPE_P (t)
    			   && !TYPE_NAME (t)
    			   && TYPE_CANONICAL (t) == t);
    
          if (TYPE_STRUCTURAL_EQUALITY_P (TREE_TYPE (t)))

          else if (TYPE_CANONICAL (TREE_TYPE (t)) != TREE_TYPE (t))

    	  = build_complex_type (TYPE_CANONICAL (TREE_TYPE (t)), named);

          /* We need to create a name, since complex is a fundamental type.  */
          if (named)
    	{
    	  const char *name = NULL;
    
    	  if (TREE_TYPE (t) == char_type_node)
    	    name = "complex char";
    	  else if (TREE_TYPE (t) == signed_char_type_node)
    	    name = "complex signed char";
    	  else if (TREE_TYPE (t) == unsigned_char_type_node)
    	    name = "complex unsigned char";
    	  else if (TREE_TYPE (t) == short_integer_type_node)
    	    name = "complex short int";
    	  else if (TREE_TYPE (t) == short_unsigned_type_node)
    	    name = "complex short unsigned int";
    	  else if (TREE_TYPE (t) == integer_type_node)
    	    name = "complex int";
    	  else if (TREE_TYPE (t) == unsigned_type_node)
    	    name = "complex unsigned int";
    	  else if (TREE_TYPE (t) == long_integer_type_node)
    	    name = "complex long int";
    	  else if (TREE_TYPE (t) == long_unsigned_type_node)
    	    name = "complex long unsigned int";
    	  else if (TREE_TYPE (t) == long_long_integer_type_node)
    	    name = "complex long long int";
    	  else if (TREE_TYPE (t) == long_long_unsigned_type_node)
    	    name = "complex long long unsigned int";
    
    	  if (name != NULL)
    	    TYPE_NAME (t) = build_decl (UNKNOWN_LOCATION, TYPE_DECL,
    					get_identifier (name), t);
    	}

