tree current = (*member_vec)[0], name = OVL_NAME (current);
      tree next = NULL_TREE, next_name = NULL_TREE;
      for (unsigned jx, ix = 0; ix < len;
           ix = jx, current = next, name = next_name)

          if (IDENTIFIER_CONV_OP_P (name))
    	{
    	  marker = current;
    	  current = OVL_CHAIN (current);
    	  name = DECL_NAME (OVL_FUNCTION (marker));
    	  gcc_checking_assert (name == conv_op_identifier);
    	}

          if (TREE_CODE (current) == USING_DECL)

    	  current = strip_using_decl (current);
    	  if (is_overloaded_fn (current))
    	    current = NULL_TREE;
    	  else if (TREE_CODE (current) == USING_DECL)

    	      to_using = current;
    	      current = NULL_TREE;

    	}

          if (current && DECL_DECLARES_TYPE_P (current))
    	{
    	  to_type = current;
    	  current = NULL_TREE;
    	}
    
          for (jx = ix + 1; jx < len; jx++)
    	{
    	  next = (*member_vec)[jx];
    	  next_name = OVL_NAME (next);
    	  if (next_name != name)
    	    break;
    
    	  if (marker)

    	      gcc_checking_assert (OVL_FUNCTION (marker)
    				   == OVL_FUNCTION (next));

    	      if (is_overloaded_fn (next))
    		next = NULL_TREE;
    	      else if (TREE_CODE (next) == USING_DECL)

    		  next = NULL_TREE;

    	  if (next && DECL_DECLARES_TYPE_P (next))
    	    to_type = next;

          gcc_assert (current);
          if (marker)

    	  OVL_CHAIN (marker) = current;
    	  current = marker;

          (*member_vec)[store++] = current;

