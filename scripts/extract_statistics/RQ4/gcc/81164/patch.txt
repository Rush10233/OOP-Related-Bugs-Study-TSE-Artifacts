extern bool binfo_direct_p			(tree);

          else if (name == ctor_identifier && !binfo_direct_p (binfo))

    /* BINFO is for a base class in some hierarchy.  Return true iff it is a
       direct base.  */
    
    bool
    binfo_direct_p (tree binfo)
    {
      tree d_binfo = BINFO_INHERITANCE_CHAIN (binfo);
      if (BINFO_INHERITANCE_CHAIN (d_binfo))
        /* A second inheritance chain means indirect.  */
        return false;
      if (!BINFO_VIRTUAL_P (binfo))
        /* Non-virtual, so only one inheritance chain means direct.  */
        return true;
      /* A virtual base looks like a direct base, so we need to look through the
         direct bases to see if it's there.  */
      tree b_binfo;
      for (int i = 0; BINFO_BASE_ITERATE (d_binfo, i, b_binfo); ++i)
        if (b_binfo == binfo)
          return true;
      return false;
    }
    

extern bool binfo_direct_p			(tree);

          else if (name == ctor_identifier && !binfo_direct_p (binfo))

    /* BINFO is for a base class in some hierarchy.  Return true iff it is a
       direct base.  */
    
    bool
    binfo_direct_p (tree binfo)
    {
      tree d_binfo = BINFO_INHERITANCE_CHAIN (binfo);
      if (BINFO_INHERITANCE_CHAIN (d_binfo))
        /* A second inheritance chain means indirect.  */
        return false;
      if (!BINFO_VIRTUAL_P (binfo))
        /* Non-virtual, so only one inheritance chain means direct.  */
        return true;
      /* A virtual base looks like a direct base, so we need to look through the
         direct bases to see if it's there.  */
      tree b_binfo;
      for (int i = 0; BINFO_BASE_ITERATE (d_binfo, i, b_binfo); ++i)
        if (b_binfo == binfo)
          return true;
      return false;
    }
    

