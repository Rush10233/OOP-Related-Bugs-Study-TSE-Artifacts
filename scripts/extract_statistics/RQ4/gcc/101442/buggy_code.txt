push_cleanup (decl, t, false);

    	push_cleanup (decl, t, false);

       meant to apply to normal control flow transfer.  */

tree
    set_up_extended_ref_temp (tree decl, tree expr, tree *cleanup, tree *initp)

    	*cleanup = cxx_maybe_build_cleanup (var, tf_warning_or_error);

       initializing a variable of that TYPE.  If DECL is non-NULL, it is
       the VAR_DECL being initialized with the EXPR.  (In that case, the
       type of DECL will be TYPE.)  If DECL is non-NULL, then CLEANUP must
       also be non-NULL, and with *CLEANUP initialized to NULL.  Upon
       return, if *CLEANUP is no longer NULL, it will be an expression
       that should be pushed as a cleanup after the returned expression
       is used to initialize DECL.
    
       Return the converted expression.  */

    initialize_reference (tree type, tree expr, tree decl, tree *cleanup,

      /* If DECL is non-NULL, then this special rule applies:
    
           [class.temporary]
    
           The temporary to which the reference is bound or the temporary
           that is the complete object to which the reference is bound
           persists for the lifetime of the reference.

           The temporaries created during the evaluation of the expression
           initializing the reference, except the temporary to which the
           reference is bound, are destroyed at the end of the
           full-expression in which they are created.

         In that case, we store the converted expression into a new
         VAR_DECL in a new scope.

         However, we want to be careful not to create temporaries when
         they are not required.  For example, given:

           struct B {};
           struct D : public B {};
           D f();
           const B& b = f();

         there is no need to copy the return value from "f"; we can just
         extend its lifetime.  Similarly, given:

           struct S {};
           struct T { operator S(); };
           T t;
           const S& s = t;

        we can extend the lifetime of the return value of the conversion
        operator.  */
      gcc_assert (conv->kind == ck_ref_bind);
      if (decl)

          tree var;
          tree base_conv_type;
    
          gcc_assert (complain == tf_warning_or_error);
    
          /* Skip over the REF_BIND.  */
          conv = conv->u.next;
          /* If the next conversion is a BASE_CONV, skip that too -- but
    	 remember that the conversion was required.  */
          if (conv->kind == ck_base)
    	{
    	  base_conv_type = conv->type;
    	  conv = conv->u.next;
    	}
          else
    	base_conv_type = NULL_TREE;
          /* Perform the remainder of the conversion.  */
          expr = convert_like_real (conv, expr,
    				/*fn=*/NULL_TREE, /*argnum=*/0,
    				/*inner=*/-1,
    				/*issue_conversion_warnings=*/true,
    				/*c_cast_p=*/false,
    				complain);
          if (error_operand_p (expr))
    	expr = error_mark_node;
          else

    	  if (!lvalue_or_rvalue_with_address_p (expr))
    	    {
    	      tree init;
    	      var = set_up_extended_ref_temp (decl, expr, cleanup, &init);
    	      /* Use its address to initialize the reference variable.  */
    	      expr = build_address (var);
    	      if (base_conv_type)
    		expr = convert_to_base (expr,
    					build_pointer_type (base_conv_type),
    					/*check_access=*/true,
    					/*nonnull=*/true, complain);
    	      if (init)
    		expr = build2 (COMPOUND_EXPR, TREE_TYPE (expr), init, expr);
    	    }
    	  else
    	    /* Take the address of EXPR.  */
    	    expr = cp_build_addr_expr (expr, complain);
    	  /* If a BASE_CONV was required, perform it now.  */
    	  if (base_conv_type)
    	    expr = (perform_implicit_conversion
    		    (build_pointer_type (base_conv_type), expr,
    		     complain));
    	  expr = build_nop (type, expr);

      else
        /* Perform the conversion.  */
        expr = convert_like (conv, expr, complain);
    
      /* Free all the conversions we allocated.  */
      obstack_free (&conversion_obstack, p);

      return expr;

    extern tree set_up_extended_ref_temp		(tree, tree, tree *, tree *);
    extern tree initialize_reference		(tree, tree, tree, tree *, int,

    extern tree store_init_value			(tree, tree, int);

push_cleanup (decl, t, false);

    	push_cleanup (decl, t, false);

       meant to apply to normal control flow transfer.  */

push_cleanup (decl, t, false);

    	push_cleanup (decl, t, false);

       meant to apply to normal control flow transfer.  */

push_cleanup (decl, t, false);

    	push_cleanup (decl, t, false);

       meant to apply to normal control flow transfer.  */

