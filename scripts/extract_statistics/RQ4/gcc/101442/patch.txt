push_cleanup (NULL_TREE, t, false);

    	push_cleanup (NULL_TREE, t, false);

       meant to apply to normal control flow transfer.  DECL is the VAR_DECL
       being cleaned up, if any, or null for temporaries or subobjects.  */

/* When initializing a reference that lasts longer than a full-expression,
       this special rule applies:
    
         [class.temporary]
    
         The temporary to which the reference is bound or the temporary
         that is the complete object to which the reference is bound
         persists for the lifetime of the reference.
    
         The temporaries created during the evaluation of the expression
         initializing the reference, except the temporary to which the
         reference is bound, are destroyed at the end of the
         full-expression in which they are created.
    
       In that case, we store the converted expression into a new
       VAR_DECL in a new scope.
    
       However, we want to be careful not to create temporaries when
       they are not required.  For example, given:
    
         struct B {};
         struct D : public B {};
         D f();
         const B& b = f();
    
       there is no need to copy the return value from "f"; we can just
       extend its lifetime.  Similarly, given:
    
         struct S {};
         struct T { operator S(); };
         T t;
         const S& s = t;
    
      we can extend the lifetime of the return value of the conversion
      operator.
    
      The next several functions are involved in this lifetime extension.  */
    

          /* FIXME share comdat with decl?  */

    static tree
    set_up_extended_ref_temp (tree decl, tree expr, VEC(tree,gc) **cleanups,
    			  tree *initp)

      /* Recursively extend temps in this initializer.  */
      TARGET_EXPR_INITIAL (expr)
        = extend_ref_init_temps (decl, TARGET_EXPR_INITIAL (expr), cleanups);
    

    	{
    	  tree cleanup = cxx_maybe_build_cleanup (var, tf_warning_or_error);
    	  if (cleanup)
    	    VEC_safe_push (tree, gc, *cleanups, cleanup);
    	}

       initializing a variable of that TYPE.  */

    initialize_reference (tree type, tree expr,

      gcc_assert (conv->kind == ck_ref_bind);

      /* Perform the conversion.  */
      expr = convert_like (conv, expr, complain);

      /* Free all the conversions we allocated.  */
      obstack_free (&conversion_obstack, p);

      return expr;
    }

    /* Subroutine of extend_ref_init_temps.  Possibly extend one initializer,
       which is bound either to a reference or a std::initializer_list.  */

    static tree
    extend_ref_init_temps_1 (tree decl, tree init, VEC(tree,gc) **cleanups)
    {
      tree sub = init;
      tree *p;
      STRIP_NOPS (sub);
      if (TREE_CODE (sub) != ADDR_EXPR)
        return init;
      /* Deal with binding to a subobject.  */
      for (p = &TREE_OPERAND (sub, 0); TREE_CODE (*p) == COMPONENT_REF; )
        p = &TREE_OPERAND (*p, 0);
      if (TREE_CODE (*p) == TARGET_EXPR)
        {
          tree subinit = NULL_TREE;
          *p = set_up_extended_ref_temp (decl, *p, cleanups, &subinit);
          if (subinit)
    	init = build2 (COMPOUND_EXPR, TREE_TYPE (init), subinit, init);
        }
      return init;
    }

    /* INIT is part of the initializer for DECL.  If there are any
       reference or initializer lists being initialized, extend their
       lifetime to match that of DECL.  */

    tree
    extend_ref_init_temps (tree decl, tree init, VEC(tree,gc) **cleanups)
    {
      tree type = TREE_TYPE (init);
      if (processing_template_decl)
        return init;
      if (TREE_CODE (type) == REFERENCE_TYPE)
        init = extend_ref_init_temps_1 (decl, init, cleanups);
      else if (is_std_init_list (type))

          /* The temporary array underlying a std::initializer_list
    	 is handled like a reference temporary.  */
          tree ctor = init;
          if (TREE_CODE (ctor) == TARGET_EXPR)
    	ctor = TARGET_EXPR_INITIAL (ctor);
          if (TREE_CODE (ctor) == CONSTRUCTOR)

    	  tree array = CONSTRUCTOR_ELT (ctor, 0)->value;
    	  array = extend_ref_init_temps_1 (decl, array, cleanups);
    	  CONSTRUCTOR_ELT (ctor, 0)->value = array;

      else if (TREE_CODE (init) == CONSTRUCTOR)
        {
          unsigned i;
          constructor_elt *p;
          VEC(constructor_elt,gc) *elts = CONSTRUCTOR_ELTS (init);
          FOR_EACH_VEC_ELT (constructor_elt, elts, i, p)
    	p->value = extend_ref_init_temps (decl, p->value, cleanups);
        }

      return init;

    extern tree initialize_reference		(tree, tree, int,

    extern tree extend_ref_init_temps		(tree, tree, VEC(tree,gc)**);

    extern tree store_init_value			(tree, tree, VEC(tree,gc)**, int);

push_cleanup (NULL_TREE, t, false);

    	push_cleanup (NULL_TREE, t, false);

       meant to apply to normal control flow transfer.  DECL is the VAR_DECL
       being cleaned up, if any, or null for temporaries or subobjects.  */

push_cleanup (NULL_TREE, t, false);

    	push_cleanup (NULL_TREE, t, false);

       meant to apply to normal control flow transfer.  DECL is the VAR_DECL
       being cleaned up, if any, or null for temporaries or subobjects.  */

push_cleanup (NULL_TREE, t, false);

    	push_cleanup (NULL_TREE, t, false);

       meant to apply to normal control flow transfer.  DECL is the VAR_DECL
       being cleaned up, if any, or null for temporaries or subobjects.  */

