tree name = DECL_NAME (t);

    	    if (identifier_p (name)
    		&& IDENTIFIER_CONV_OP_P (name)
    		&& PACK_EXPANSION_P (TREE_TYPE (name)))
    	      {
    		name = make_conv_op_name (PACK_EXPANSION_PATTERN
    					  (TREE_TYPE (name)));
    		variadic = true;
    	      }

    
          /* A parameter pack can appear in the qualifying scope, and/or in the
    	 terminal name (if naming a conversion function).  Logically they're
    	 part of a single pack expansion of the overall USING_DECL, but we
    	 express them as separate pack expansions within the USING_DECL since
    	 we can't create a pack expansion over a USING_DECL.  */
          bool saw_parm_pack = false;
          if (uses_parameter_packs (qscope))
    	{
    	  qscope = make_pack_expansion (qscope);
    	  saw_parm_pack = true;
    	}
          if (identifier_p (identifier)
    	  && IDENTIFIER_CONV_OP_P (identifier)
    	  && uses_parameter_packs (TREE_TYPE (identifier)))
    	{
    	  identifier = make_conv_op_name (make_pack_expansion
    					  (TREE_TYPE (identifier)));
    	  saw_parm_pack = true;
    	}
          if (!saw_parm_pack)
    	{
    	  /* Issue an error in terms using a SCOPE_REF that includes both
    	     components.  */
    	  tree name
    	    = build_qualified_name (NULL_TREE, qscope, identifier, false);
    	  make_pack_expansion (name);
    	  gcc_assert (seen_error ());
    	  qscope = identifier = error_mark_node;
    	}

    	  /* True iff this using-decl was written as a pack expansion
    	     (and a pack appeared in its scope or name).  If a pack
    	     appeared in both, we expand the packs separately and
    	     manually merge them.  */
    	  bool variadic_p = false;
    

    	      scope = tsubst_pack_expansion (scope, args, complain, in_decl);
    	      variadic_p = true;
    	    }
    	  else
    	    scope = tsubst_copy (scope, args, complain, in_decl);
    
    	  tree name = DECL_NAME (t);
    	  if (IDENTIFIER_CONV_OP_P (name)
    	      && PACK_EXPANSION_P (TREE_TYPE (name)))
    	    {
    	      name = tsubst_pack_expansion (TREE_TYPE (name), args,
    					    complain, in_decl);
    	      if (name == error_mark_node)

    		  r = error_mark_node;
    		  break;

    	      for (tree& elt : tree_vec_range (name))
    		elt = make_conv_op_name (elt);
    	      variadic_p = true;

    	    name = tsubst_copy (name, args, complain, in_decl);
    
    	  int len;
    	  if (!variadic_p)
    	    len = 1;
    	  else if (TREE_CODE (scope) == TREE_VEC
    		   && TREE_CODE (name) == TREE_VEC)

    	      if (TREE_VEC_LENGTH (scope) != TREE_VEC_LENGTH (name))

    		  error ("mismatched argument pack lengths (%d vs %d)",
    			 TREE_VEC_LENGTH (scope), TREE_VEC_LENGTH (name));
    		  r = error_mark_node;
    		  break;

    	      len = TREE_VEC_LENGTH (scope);

    	  else if (TREE_CODE (scope) == TREE_VEC)
    	    len = TREE_VEC_LENGTH (scope);
    	  else /* TREE_CODE (name) == TREE_VEC  */
    	    len = TREE_VEC_LENGTH (name);
    
    	  r = make_tree_vec (len);
    	  for (int i = 0; i < len; ++i)
    	    {
    	      tree escope = (TREE_CODE (scope) == TREE_VEC
    			     ? TREE_VEC_ELT (scope, i)
    			     : scope);
    	      tree ename = (TREE_CODE (name) == TREE_VEC
    			    ? TREE_VEC_ELT (name, i)
    			    : name);
    	      tree elt = do_class_using_decl (escope, ename);
    	      if (!elt)
    		{
    		  r = error_mark_node;
    		  break;
    		}
    	      TREE_PROTECTED (elt) = TREE_PROTECTED (t);
    	      TREE_PRIVATE (elt) = TREE_PRIVATE (t);
    	      TREE_VEC_ELT (r, i) = elt;
    	    }
    
    	  if (!variadic_p && r != error_mark_node)
    	    r = TREE_VEC_ELT (r, 0);

