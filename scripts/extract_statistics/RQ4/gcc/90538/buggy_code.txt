DECLTYPE_FOR_INIT_CAPTURE (in DECLTYPE_TYPE)

       decltype: lambda capture just drops references, init capture
       uses auto semantics, lambda proxies look through implicit dereference.  */

    #define DECLTYPE_FOR_INIT_CAPTURE(NODE) \
      TREE_LANG_FLAG_1 (DECLTYPE_TYPE_CHECK (NODE))

    extern bool uses_parameter_packs                (tree);

      if (!is_this && type_dependent_expression_p (expr))
        {
          type = cxx_make_type (DECLTYPE_TYPE);
          DECLTYPE_TYPE_EXPR (type) = expr;
          DECLTYPE_FOR_LAMBDA_CAPTURE (type) = true;
          DECLTYPE_FOR_INIT_CAPTURE (type) = explicit_init_p;
          DECLTYPE_FOR_REF_CAPTURE (type) = by_reference_p;
          SET_TYPE_STRUCTURAL_EQUALITY (type);
        }
      else if (!is_this && explicit_init_p)

        type = make_pack_expansion (type);

    bool

      return parameter_packs != NULL_TREE;

      // Any local specialization bindings arising from this substitution
      // cannot be reused for a different INDEX.
      local_specialization_stack lss (lss_copy);
    

    	if (DECLTYPE_FOR_INIT_CAPTURE (t))
    	  {
    	    if (type == NULL_TREE)
    	      {
    		if (complain & tf_error)
    		  error ("empty initializer in lambda init-capture");
    		type = error_mark_node;
    	      }
    	    else if (TREE_CODE (type) == TREE_LIST)
    	      type = build_x_compound_expr_from_list (type, ELK_INIT, complain);
    	  }
    

    					    DECLTYPE_FOR_INIT_CAPTURE (t),

      /* If we have already specialized this lambda expr, reuse it.  See
         PR c++/87322.  */
      if (local_specializations)
        if (tree r = retrieve_local_specialization (t))
          return r;
    

      if (local_specializations)
        register_local_specialization (r, t);
    

    	    LAMBDA_EXPR_CAPTURE_LIST (r)
    	      = tree_cons (TREE_VEC_ELT (field, i),
    			   TREE_VEC_ELT (init, i),
    			   LAMBDA_EXPR_CAPTURE_LIST (r));

    	  LAMBDA_EXPR_CAPTURE_LIST (r)
    	    = tree_cons (field, init, LAMBDA_EXPR_CAPTURE_LIST (r));

DECLTYPE_FOR_INIT_CAPTURE (in DECLTYPE_TYPE)

       decltype: lambda capture just drops references, init capture
       uses auto semantics, lambda proxies look through implicit dereference.  */

    #define DECLTYPE_FOR_INIT_CAPTURE(NODE) \
      TREE_LANG_FLAG_1 (DECLTYPE_TYPE_CHECK (NODE))

    extern bool uses_parameter_packs                (tree);

      if (!is_this && type_dependent_expression_p (expr))
        {
          type = cxx_make_type (DECLTYPE_TYPE);
          DECLTYPE_TYPE_EXPR (type) = expr;
          DECLTYPE_FOR_LAMBDA_CAPTURE (type) = true;
          DECLTYPE_FOR_INIT_CAPTURE (type) = explicit_init_p;
          DECLTYPE_FOR_REF_CAPTURE (type) = by_reference_p;
          SET_TYPE_STRUCTURAL_EQUALITY (type);
        }
      else if (!is_this && explicit_init_p)

        type = make_pack_expansion (type);

    bool

      return parameter_packs != NULL_TREE;

      // Any local specialization bindings arising from this substitution
      // cannot be reused for a different INDEX.
      local_specialization_stack lss (lss_copy);
    

    	if (DECLTYPE_FOR_INIT_CAPTURE (t))
    	  {
    	    if (type == NULL_TREE)
    	      {
    		if (complain & tf_error)
    		  error ("empty initializer in lambda init-capture");
    		type = error_mark_node;
    	      }
    	    else if (TREE_CODE (type) == TREE_LIST)
    	      type = build_x_compound_expr_from_list (type, ELK_INIT, complain);
    	  }
    

    					    DECLTYPE_FOR_INIT_CAPTURE (t),

      /* If we have already specialized this lambda expr, reuse it.  See
         PR c++/87322.  */
      if (local_specializations)
        if (tree r = retrieve_local_specialization (t))
          return r;
    

      if (local_specializations)
        register_local_specialization (r, t);
    

    	    LAMBDA_EXPR_CAPTURE_LIST (r)
    	      = tree_cons (TREE_VEC_ELT (field, i),
    			   TREE_VEC_ELT (init, i),
    			   LAMBDA_EXPR_CAPTURE_LIST (r));

    	  LAMBDA_EXPR_CAPTURE_LIST (r)
    	    = tree_cons (field, init, LAMBDA_EXPR_CAPTURE_LIST (r));

