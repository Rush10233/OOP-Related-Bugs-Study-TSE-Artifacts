TEMPLATE_TYPE_PARM_FOR_CLASS (TEMPLATE_TYPE_PARM)

    /* True if this type-parameter belongs to a class template, used by C++17
       class template argument deduction.  */
    #define TEMPLATE_TYPE_PARM_FOR_CLASS(NODE) \
      (TREE_LANG_FLAG_0 (TEMPLATE_TYPE_PARM_CHECK (NODE)))
    

    static int maybe_adjust_types_for_deduction (unification_kind_t, tree*, tree*,
    					     tree);

    	{
    	  /* Class template, set TEMPLATE_TYPE_PARM_FOR_CLASS.  */
    	  tree parms = INNERMOST_TEMPLATE_PARMS (current_template_parms);
    	  for (int i = 0; i < TREE_VEC_LENGTH (parms); ++i)
    	    {
    	      tree t = TREE_VALUE (TREE_VEC_ELT (parms, i));
    	      if (TREE_CODE (t) == TYPE_DECL)
    		t = TREE_TYPE (t);
    	      if (TREE_CODE (t) == TEMPLATE_TYPE_PARM)
    		TEMPLATE_TYPE_PARM_FOR_CLASS (t) = true;
    	    }
    	}

    
          if (TREE_CODE (parm) == TYPE_DECL)
    	TEMPLATE_TYPE_PARM_FOR_CLASS (TREE_TYPE (parm)) = true;

    maybe_adjust_types_for_deduction (unification_kind_t strict,

          if (TYPE_REF_P (*parm)
    	  && TYPE_REF_IS_RVALUE (*parm)
    	  && TREE_CODE (TREE_TYPE (*parm)) == TEMPLATE_TYPE_PARM
    	  && cp_type_quals (TREE_TYPE (*parm)) == TYPE_UNQUALIFIED

      /* [14.8.2.1/3 temp.deduct.call], "A forwarding reference is an rvalue
         reference to a cv-unqualified template parameter that does not represent a
         template parameter of a class template (during class template argument
         deduction (13.3.1.8)). If P is a forwarding reference and the argument is
         an lvalue, the type "lvalue reference to A" is used in place of A for type
         deduction. */
      if (TYPE_REF_P (*parm)
          && TYPE_REF_IS_RVALUE (*parm)
          && TREE_CODE (TREE_TYPE (*parm)) == TEMPLATE_TYPE_PARM
          && !TEMPLATE_TYPE_PARM_FOR_CLASS (TREE_TYPE (*parm))
          && cp_type_quals (TREE_TYPE (*parm)) == TYPE_UNQUALIFIED

          arg_strict |=
    	maybe_adjust_types_for_deduction (strict, &parm, &arg, arg_expr);

      sub_strict |= maybe_adjust_types_for_deduction (strict, &parm, &arg, NULL);

    		  (DEDUCE_CALL, &elttype, &type, elt);

          if (TREE_CODE (oldtype) == TEMPLATE_TYPE_PARM)
    	TEMPLATE_TYPE_PARM_FOR_CLASS (newtype)
    	  = TEMPLATE_TYPE_PARM_FOR_CLASS (oldtype);

