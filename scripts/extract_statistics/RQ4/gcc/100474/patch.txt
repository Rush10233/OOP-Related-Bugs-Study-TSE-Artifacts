case CPTK_IS_AGGREGATE:
          inform (loc, "  %qT is not an aggregate", t1);
          break;
        case CPTK_IS_TRIVIALLY_COPYABLE:
          inform (loc, "  %qT is not trivially copyable", t1);
          break;
        case CPTK_IS_ASSIGNABLE:
          inform (loc, "  %qT is not assignable from %qT", t1, t2);
          break;
        case CPTK_IS_TRIVIALLY_ASSIGNABLE:
          inform (loc, "  %qT is not trivially assignable from %qT", t1, t2);
          break;
        case CPTK_IS_NOTHROW_ASSIGNABLE:
          inform (loc, "  %qT is not %<nothrow%> assignable from %qT", t1, t2);
          break;
        case CPTK_IS_CONSTRUCTIBLE:
          if (!t2)
    	inform (loc, "  %qT is not default constructible", t1);
          else
    	inform (loc, "  %qT is not constructible from %qE", t1, t2);
          break;
        case CPTK_IS_TRIVIALLY_CONSTRUCTIBLE:
          if (!t2)
    	inform (loc, "  %qT is not trivially default constructible", t1);
          else
    	inform (loc, "  %qT is not trivially constructible from %qE", t1, t2);
          break;
        case CPTK_IS_NOTHROW_CONSTRUCTIBLE:
          if (!t2)
    	inform (loc, "  %qT is not %<nothrow%> default constructible", t1);
          else
    	inform (loc, "  %qT is not %<nothrow%> constructible from %qE", t1, t2);
          break;
        case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:
          inform (loc, "  %qT does not have unique object representations", t1);
          break;
        case CPTK_BASES:
        case CPTK_DIRECT_BASES:
        case CPTK_UNDERLYING_TYPE:
          /* We shouldn't see these non-expression traits.  */

        /* We deliberately omit the default case so that when adding a new
           trait we'll get reminded (by way of a warning) to handle it here.  */

case CPTK_IS_AGGREGATE:
          inform (loc, "  %qT is not an aggregate", t1);
          break;
        case CPTK_IS_TRIVIALLY_COPYABLE:
          inform (loc, "  %qT is not trivially copyable", t1);
          break;
        case CPTK_IS_ASSIGNABLE:
          inform (loc, "  %qT is not assignable from %qT", t1, t2);
          break;
        case CPTK_IS_TRIVIALLY_ASSIGNABLE:
          inform (loc, "  %qT is not trivially assignable from %qT", t1, t2);
          break;
        case CPTK_IS_NOTHROW_ASSIGNABLE:
          inform (loc, "  %qT is not %<nothrow%> assignable from %qT", t1, t2);
          break;
        case CPTK_IS_CONSTRUCTIBLE:
          if (!t2)
    	inform (loc, "  %qT is not default constructible", t1);
          else
    	inform (loc, "  %qT is not constructible from %qE", t1, t2);
          break;
        case CPTK_IS_TRIVIALLY_CONSTRUCTIBLE:
          if (!t2)
    	inform (loc, "  %qT is not trivially default constructible", t1);
          else
    	inform (loc, "  %qT is not trivially constructible from %qE", t1, t2);
          break;
        case CPTK_IS_NOTHROW_CONSTRUCTIBLE:
          if (!t2)
    	inform (loc, "  %qT is not %<nothrow%> default constructible", t1);
          else
    	inform (loc, "  %qT is not %<nothrow%> constructible from %qE", t1, t2);
          break;
        case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:
          inform (loc, "  %qT does not have unique object representations", t1);
          break;
        case CPTK_BASES:
        case CPTK_DIRECT_BASES:
        case CPTK_UNDERLYING_TYPE:
          /* We shouldn't see these non-expression traits.  */

        /* We deliberately omit the default case so that when adding a new
           trait we'll get reminded (by way of a warning) to handle it here.  */

