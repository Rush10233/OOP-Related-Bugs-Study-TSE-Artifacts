static tree tsubst_aggr_type_1 (tree, tree, tsubst_flags_t, tree, int);

      /* Handle typedefs via tsubst so that they get consistently reused.  */
      if (typedef_variant_p (t))
        {
          t = tsubst (t, args, complain, in_decl);
          if (t == error_mark_node)
    	return error_mark_node;
    
          /* The effect of entering_scope is that for a dependent specialization
    	 A<T>, lookup_template_class prefers to return A's primary template
    	 type instead of the implicit instantiation.  So when entering_scope,
    	 we mirror this behavior by inspecting TYPE_CANONICAL appropriately,
    	 taking advantage of the fact that lookup_template_class links the two
    	 types by setting TYPE_CANONICAL of the latter to the former.  */
          if (entering_scope
    	  && CLASS_TYPE_P (t)
    	  && dependent_type_p (t)
    	  && TYPE_CANONICAL (t) == TREE_TYPE (TYPE_TI_TEMPLATE (t)))
    	t = TYPE_CANONICAL (t);
    
          return t;
        }

          case RECORD_TYPE:
          case ENUMERAL_TYPE:
          case UNION_TYPE:
    	return tsubst_aggr_type_1 (t, args, complain, in_decl, entering_scope);

          default:
    	return tsubst (t, args, complain, in_decl);
        }
    }

    /* The part of tsubst_aggr_type that's shared with the RECORD_, UNION_
       and ENUMERAL_TYPE cases of tsubst.  */
    
    static tree
    tsubst_aggr_type_1 (tree t,
    		    tree args,
    		    tsubst_flags_t complain,
    		    tree in_decl,
    		    int entering_scope)
    {
      if (TYPE_TEMPLATE_INFO (t) && uses_template_parms (t))
        {
          tree argvec;
          tree r;

          /* Figure out what arguments are appropriate for the
    	 type we are trying to find.  For example, given:

    	   template <class T> struct S;
    	   template <class T, class U> void f(T, U) { S<U> su; }

    	 and supposing that we are instantiating f<int, double>,
    	 then our ARGS will be {int, double}, but, when looking up
    	 S we only want {double}.  */
          argvec = tsubst_template_args (TYPE_TI_ARGS (t), args,
    				     complain, in_decl);
          if (argvec == error_mark_node)
    	r = error_mark_node;

    	{
    	  r = lookup_template_class (t, argvec, in_decl, NULL_TREE,
    				     entering_scope, complain);
    	  r = cp_build_qualified_type (r, cp_type_quals (t), complain);
    	}

          return r;

      else
        /* This is not a template type, so there's nothing to do.  */
        return t;

          if (TYPE_PTRMEMFUNC_P (t))
    	return tsubst (TYPE_PTRMEMFUNC_FN_TYPE (t), args, complain, in_decl);
          /* Fall through.  */

          return tsubst_aggr_type_1 (t, args, complain, in_decl,
    				 /*entering_scope=*/0);

