static bool begin_init_stmts (tree *, tree *);
    static tree finish_init_stmts (bool, tree, tree);
    static void construct_virtual_base (tree, tree);

    static void perform_member_init (tree, tree);
    static int member_init_ok_or_else (tree, tree, tree);
    static void expand_virtual_init (tree, tree);

      is_global = begin_init_stmts (&stmt_expr, &compound_stmt);
      destroy_temps = stmts_are_full_exprs_p ();
      current_stmt_tree ()->stmts_are_full_exprs_p = 0;

      stmt_expr = finish_init_stmts (is_global, stmt_expr, compound_stmt);
      current_stmt_tree ()->stmts_are_full_exprs_p = destroy_temps;
      TREE_READONLY (exp) = was_const;
      TREE_THIS_VOLATILE (exp) = was_volatile;

    
      if ((VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)
          && TREE_SIDE_EFFECTS (stmt_expr)

      return stmt_expr;
    }
    

    expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,
                         tsubst_flags_t complain)
    {

           happen for direct-initialization, too.  */
        init = digest_init (type, init, complain);
    

      /* A CONSTRUCTOR of the target's type is a previously digested
         initializer, whether that happened just above or in
         cp_parser_late_parsing_nsdmi.

          init = build2 (INIT_EXPR, TREE_TYPE (exp), exp, init);
          TREE_SIDE_EFFECTS (init) = 1;
          finish_expr_stmt (init);

        }
    
      if (init && TREE_CODE (init) != TREE_LIST

    	   have already built up the constructor call so we could wrap it
    	   in an exception region.  */;
          else

    
          if (TREE_CODE (init) == MUST_NOT_THROW_EXPR)
    	/* We need to protect the initialization of a catch parm with a

    	init = build2 (INIT_EXPR, TREE_TYPE (exp), exp, init);
          TREE_SIDE_EFFECTS (init) = 1;
          finish_expr_stmt (init);

        }
    
      if (init == NULL_TREE)

    					&parms, binfo, flags,
    					complain);
          base = fold_build_cleanup_point_expr (void_type_node, base);

          rval = build_if_in_charge (complete, base);
        }
       else

    
          rval = build_special_member_call (exp, ctor_name, &parms, binfo, flags,
    					complain);

        }
    
      if (parms != NULL)

      /* FIXME put back convert_to_void?  */
      if (TREE_SIDE_EFFECTS (rval))
        finish_expr_stmt (rval);

    }
    
    /* This function is responsible for initializing EXP with INIT

    
       BINFO is the binfo of the type for who we are performing the
       initialization.  For example, if W is a virtual base class of A and B,

       FLAGS is just passed to `build_new_method_call'.  See that function
       for its description.  */
    

    expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,
                        tsubst_flags_t complain)
    {

          if (init)
    	finish_expr_stmt (init);
          gcc_assert (!cleanups);

        }
    
      /* List-initialization from {} becomes value-initialization for non-aggregate

          /* If we don't need to mess with the constructor at all,
    	 then we're done.  */
          if (! type_build_ctor_call (type))

    
          /* Otherwise fall through and call the constructor.  */
          init = NULL_TREE;
        }
    
      /* We know that expand_default_init can handle everything we want
         at this point.  */

    }
    
    /* Report an error if TYPE is not a user-defined, class type.  If

