which is likely to be a waste of time (109678).  */
          if (is_empty_class (type)
    	  && CLASS_TYPE_P (optype)

    	{
    	  if (empty_base)
    	    *empty_base = true;

    extern tree get_parent_with_private_access 	(tree decl, tree binfo);
    extern bool accessible_base_p			(tree, tree, bool);
    extern tree lookup_base                         (tree, tree, base_access,

    extern tree dcast_base_hint			(tree, tree);
    extern int accessible_p				(tree, tree, bool);
    extern int accessible_in_template_p		(tree, tree);

    
    struct lookup_base_data_s
    {

      tree t;		/* type being searched.  */
      tree base;		/* The base type we're looking for.  */
      tree binfo;		/* Found binfo.  */

    {
      struct lookup_base_data_s *data = (struct lookup_base_data_s *) data_;
    

      if (SAME_BINFO_TYPE_P (BINFO_TYPE (binfo), data->base))
        {
          if (!data->binfo)

    /* Lookup BASE in the hierarchy dominated by T.  Do access checking as
       ACCESS specifies.  Return the binfo we discover.  If KIND_PTR is
       non-NULL, fill with information about what kind of base we

    
       If the base is inaccessible, or ambiguous, then error_mark_node is
       returned.  If the tf_error bit of COMPLAIN is not set, no error
       is issued.  */
    
    tree
    lookup_base (tree t, tree base, base_access access,

    {
      tree binfo;
      tree t_binfo;

          data.base = base;
          data.binfo = NULL_TREE;
          data.ambiguous = data.via_virtual = false;

          data.want_any = access == ba_any;

    
          dfs_walk_once (t_binfo, dfs_lookup_base, NULL, &data);
          binfo = data.binfo;


    static tree cxx_eval_constant_expression (const constexpr_ctx *, tree,
    					  value_cat, bool *, bool *, tree * = NULL);
    static tree find_heap_var_refs (tree *, int *, void *);
    
    /* Attempt to evaluate T which represents a call to a builtin function.

    	 At this point it has already been evaluated in the call
    	 to cxx_bind_parameters_in_call.  */
          new_obj = TREE_VEC_ELT (new_call.bindings, 0);

    
          if (ctx->call && ctx->call->fundef
    	  && DECL_CONSTRUCTOR_P (ctx->call->fundef->decl))

    	  && CLASS_TYPE_P (optype)
    	  && DERIVED_FROM_P (type, optype))
    	{

    	  return op;
    	}
        }

    
    static tree
    cxx_fold_indirect_ref (const constexpr_ctx *ctx, location_t loc, tree type,

    {
      tree sub = op0;
      tree subtype;

return ret;
    	      }
    	  }

          for (tree field = TYPE_FIELDS (optype);
    	   field; field = DECL_CHAIN (field))
    	if (TREE_CODE (field) == FIELD_DECL

    		  return ret;
    	      }
    	  }
        }
    
      return NULL_TREE;

return ret;
    	      }
    	  }

          for (tree field = TYPE_FIELDS (optype);
    	   field; field = DECL_CHAIN (field))
    	if (TREE_CODE (field) == FIELD_DECL

    		  return ret;
    	      }
    	  }
        }
    
      return NULL_TREE;

