
      /* True if we're in the middle of computing this satisfaction result.
         Used during both quiet and noisy satisfaction to detect self-recursive
         satisfaction.  */
      bool evaluating;

          entry->evaluating = false;

      if (entry->evaluating)
        {
          /* If we get here, it means satisfaction is self-recursive.  */
          gcc_checking_assert (!entry->result);
          if (info.noisy ())
    	error_at (EXPR_LOCATION (ATOMIC_CONSTR_EXPR (entry->atom)),
    		  "satisfaction of atomic constraint %qE depends on itself",
    		  entry->atom);
          return error_mark_node;
        }
    
      if (info.noisy () || entry->maybe_unstable || !entry->result)
        {
          /* We're computing the satisfaction result from scratch.  */
          entry->evaluating = true;
          return NULL_TREE;
        }

      gcc_checking_assert (entry->evaluating);
      entry->evaluating = false;
    

      /* In case there is a diagnostic, we want to establish the context
         prior to printing errors.  If no errors occur, this context is
    */
      diagnosing_failed_constraint failure (t, args, info.noisy ());
    

