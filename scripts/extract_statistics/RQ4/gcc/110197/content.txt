
      /* Not found.  */
    

      if (TREE_CODE (ary) == CONSTRUCTOR
          && CONSTRUCTOR_NO_CLEARING (ary))
        {

         directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */
      tree val;
      constexpr_ctx new_ctx;

        {
          tree empty_ctor = build_constructor (init_list_type_node, NULL);
          val = digest_init (elem_type, empty_ctor, tf_warning_or_error);

      FOR_EACH_CONSTRUCTOR_ELT (v, i, index, value)
        {
          tree orig_value = value;
          init_subob_ctx (ctx, new_ctx, index, value);

          int pos_hint = -1;
          if (new_ctx.ctor != ctx->ctor && !no_slot)
    	{

          bool reuse = false;
          constexpr_ctx new_ctx;
          init_subob_ctx (ctx, new_ctx, idx, pre_init ? init : elttype);

    	{
    	  if (zeroed_out)
    	    CONSTRUCTOR_NO_CLEARING (new_ctx.ctor) = false;

    	}
          if (*non_constant_p)
    	break;

    	{
    	  /* We appended this element above; update the value.  */
    	  gcc_assert ((*p)->last().index == idx);


      /* Not found.  */
    

      if (TREE_CODE (ary) == CONSTRUCTOR
          && CONSTRUCTOR_NO_CLEARING (ary))
        {

         directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */
      tree val;
      constexpr_ctx new_ctx;

        {
          tree empty_ctor = build_constructor (init_list_type_node, NULL);
          val = digest_init (elem_type, empty_ctor, tf_warning_or_error);

      FOR_EACH_CONSTRUCTOR_ELT (v, i, index, value)
        {
          tree orig_value = value;
          init_subob_ctx (ctx, new_ctx, index, value);

          int pos_hint = -1;
          if (new_ctx.ctor != ctx->ctor && !no_slot)
    	{

          bool reuse = false;
          constexpr_ctx new_ctx;
          init_subob_ctx (ctx, new_ctx, idx, pre_init ? init : elttype);

    	{
    	  if (zeroed_out)
    	    CONSTRUCTOR_NO_CLEARING (new_ctx.ctor) = false;

    	}
          if (*non_constant_p)
    	break;

    	{
    	  /* We appended this element above; update the value.  */
    	  gcc_assert ((*p)->last().index == idx);

