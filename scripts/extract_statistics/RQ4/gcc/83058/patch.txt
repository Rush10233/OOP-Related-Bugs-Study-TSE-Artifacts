Although intermediate results may be negative (as in a[3] - 2) a valid
         final result cannot be.  */
      offset_int adjust = 0;

          /* If the offset is compile-time constant, use it to compute a more

    	adjust += wi::to_offset (convert (ssizetype, adj));

          const_tree adj = fold_non_dependent_expr (TREE_OPERAND (oper, 1));

    	adjust += wi::to_offset (adj);

      /* For COMPONENT_REF (i.e., a struct member) the size of the entire
         enclosing struct.  Used to validate the adjustment (offset) into
         an array at the end of a struct.  */
      offset_int compsize = 0;
    

          tree comptype = TREE_TYPE (TREE_OPERAND (oper, 0));
          compsize = wi::to_offset (TYPE_SIZE_UNIT (comptype));
    

      tree opertype = TREE_TYPE (oper);
      if ((addr_expr || !POINTER_TYPE_P (opertype))

          offset_int bytes_avail = 0;

    	  bytes_avail = wi::to_offset (DECL_SIZE_UNIT (oper));

          else if (tree opersize = TYPE_SIZE_UNIT (opertype))

    	     as the optimistic estimate of the available space in it.
    	     Use the maximum possible size for zero-size arrays and
    	     flexible array members (except of initialized objects
    	     thereof).  */
    	  if (TREE_CODE (opersize) == INTEGER_CST)
    	    bytes_avail = wi::to_offset (opersize);

    
          if (bytes_avail == 0)

    	  if (var_decl)
    	    {
    	      /* Constructing into a buffer provided by the flexible array
    		 member of a declared object (which is permitted as a G++
    		 extension).  If the array member has been initialized,
    		 determine its size from the initializer.  Otherwise,
    		 the array size is zero.  */
    	      if (tree init = find_field_init (oper, DECL_INITIAL (var_decl)))
    		bytes_avail = wi::to_offset (TYPE_SIZE_UNIT (TREE_TYPE (init)));
    	    }
    	  else
    	    bytes_avail = (wi::to_offset (TYPE_MAX_VALUE (ptrdiff_type_node))
    			   - compsize);

          tree_code oper_code = TREE_CODE (opertype);

    	  tree nelts = array_type_nelts_top (opertype);

          if (bytes_avail < adjust || adjust < 0)

    	{
    	  tree elttype = (TREE_CODE (opertype) == ARRAY_TYPE
    			  ? TREE_TYPE (opertype) : opertype);
    	  if (tree eltsize = TYPE_SIZE_UNIT (elttype))
    	    {
    	      bytes_avail -= adjust * wi::to_offset (eltsize);
    	      if (bytes_avail < 0)
    		bytes_avail = 0;
    	    }
    	}

          offset_int bytes_need;

    	bytes_need = wi::to_offset (size);

    	bytes_need = (wi::to_offset (nelts)
    		      * wi::to_offset (TYPE_SIZE_UNIT (type)));

    	bytes_need = wi::to_offset (TYPE_SIZE_UNIT (type));

    			  type, tree_to_uhwi (nelts), bytes_need.to_uhwi (),
    			  opertype, bytes_avail.to_uhwi ());

    			  type, bytes_need.to_uhwi (), opertype,
    			  bytes_avail.to_uhwi ());

    			type, bytes_need.to_uhwi (), opertype,
    			bytes_avail.to_uhwi ());

