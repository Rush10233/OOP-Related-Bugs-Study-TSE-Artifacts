/* maybe_thunk_body clears TREE_PUBLIC on the maybe-in-charge 'tor
    	 variants, check one of the "clones" for the real linkage.  */

    	     but have no TEMPLATE_INFO.  Their containing template
    	     function does, and the local class could be constrained
    	     by that.  */
    	  if (template_decl)
    	    template_decl = fn;

/* maybe_thunk_body clears TREE_PUBLIC on the maybe-in-charge 'tor
    	 variants, check one of the "clones" for the real linkage.  */

    	     but have no TEMPLATE_INFO.  Their containing template
    	     function does, and the local class could be constrained
    	     by that.  */
    	  if (DECL_LANG_SPECIFIC (fn) && DECL_USE_TEMPLATE (fn))
    	    template_decl = fn;
    	  else if (template_decl)
    	    {
    	      /* FN must be a regenerated lambda function, since they don't
    		 have template arguments.  Find a containing non-lambda
    		 template instantiation.  */
    	      tree ctx = fn;
    	      while (ctx && !get_template_info (ctx))
    		ctx = get_containing_scope (ctx);
    	      template_decl = ctx;
    	    }

/* maybe_thunk_body clears TREE_PUBLIC on the maybe-in-charge 'tor
    	 variants, check one of the "clones" for the real linkage.  */

    	     but have no TEMPLATE_INFO.  Their containing template
    	     function does, and the local class could be constrained
    	     by that.  */
    	  if (DECL_LANG_SPECIFIC (fn) && DECL_USE_TEMPLATE (fn))
    	    template_decl = fn;
    	  else if (template_decl)
    	    {
    	      /* FN must be a regenerated lambda function, since they don't
    		 have template arguments.  Find a containing non-lambda
    		 template instantiation.  */
    	      tree ctx = fn;
    	      while (ctx && !get_template_info (ctx))
    		ctx = get_containing_scope (ctx);
    	      template_decl = ctx;
    	    }

