/* Set to the index of the last element with a non-zero initializer.
         Initializers for elements past this one can be dropped.  */
      unsigned HOST_WIDE_INT last_nonzero = -1;

          if (!initializer_zerop (elt_init))
    	last_nonzero = index;
    

      if (sized_array_p
          && (!CLASS_TYPE_P (elt_type)
    	  || TYPE_HAS_TRIVIAL_DFLT (elt_type)))
        {
          /* Strip trailing zero-initializers from an array of a trivial
    	 type of known size.  They are redundant and get in the way
    	 of telling them apart from those with implicit zero value.  */
          unsigned HOST_WIDE_INT nelts = CONSTRUCTOR_NELTS (new_init);
          if (last_nonzero > nelts)
    	nelts = 0;
          else if (last_nonzero < nelts - 1)
    	nelts = last_nonzero + 1;
    
          vec_safe_truncate (CONSTRUCTOR_ELTS (new_init), nelts);
        }
    

          bool braced_init = BRACE_ENCLOSED_INITIALIZER_P (expr);
          tree etype = TREE_TYPE (expr);

          if (braced_init)

    	  write_type (etype);
    	}
    
          if (!initializer_zerop (expr) || !trivial_type_p (etype))
    	{
    	  /* Convert braced initializer lists to STRING_CSTs so that
    	     A<"Foo"> mangles the same as A<{'F', 'o', 'o', 0}> while
    	     still using the latter mangling for strings that
    	     originated as braced initializer lists.  */
    	  expr = braced_lists_to_strings (etype, expr);
    
    	  if (TREE_CODE (expr) == CONSTRUCTOR)
    	    {
    	      vec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (expr);
    	      unsigned last_nonzero = -1, i;
    	      tree val;
    
    	      FOR_EACH_CONSTRUCTOR_VALUE (elts, i, val)
    		if (!initializer_zerop (val))
    		  last_nonzero = i;
    
    	      FOR_EACH_CONSTRUCTOR_VALUE (elts, i, val)
    		{
    		  if (i > last_nonzero)
    		    break;
    		  write_expression (val);
    		}
    	    }
    	  else
    	    {
    	      gcc_assert (TREE_CODE (expr) == STRING_CST);
    	      write_expression (expr);
    	    }

      if (TREE_CODE (value) == STRING_CST)
        /* Temporarily mangle strings as braced initializer lists.  */
        write_string ("tl");
      else
        write_char ('L');
    
      tree valtype = TREE_TYPE (value);
      write_type (valtype);

    	{
    	  /* Mangle strings the same as braced initializer lists.  */
    	  unsigned n = TREE_STRING_LENGTH (value);
    	  const char *str = TREE_STRING_POINTER (value);
    
    	  /* Count the number of trailing nuls and subtract them from
    	     STRSIZE because they don't need to be mangled.  */
    	  for (const char *p = str + n - 1; ; --p)
    	    {
    	      if (*p || p == str)
    		{
    		  n -= str + n - !!*p - p;
    		  break;
    		}
    	    }
    	  tree eltype = TREE_TYPE (valtype);
    	  for (const char *p = str; n--; ++p)
    	    {
    	      write_char ('L');
    	      write_type (eltype);
    	      write_unsigned_number (*(const unsigned char*)p);
    	      write_string ("E");
    	    }
    	  break;
    	}

