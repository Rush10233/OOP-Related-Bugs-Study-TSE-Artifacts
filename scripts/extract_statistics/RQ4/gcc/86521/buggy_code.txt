prvalue returned from a conversion function, replace CAND with the candidate
       for the conversion and return true.  Otherwise, return false.  */

    joust_maybe_elide_copy (z_candidate *&cand)

    	{
    	  cand = uc;
    	  return true;
    	}

      /* Handle C++17 copy elision in [over.match.ctor] (direct-init) context.  The
         standard currently says that only constructors are candidates, but if one
         copies a prvalue returned by a conversion function we want to treat the
         conversion as the candidate instead.
    
         Clang does something similar, as discussed at
         http://lists.isocpp.org/core/2017/10/3166.php
         http://lists.isocpp.org/core/2019/03/5721.php  */
      int elided_tiebreaker = 0;
      if (len == 1 && cxx_dialect >= cxx17
          && DECL_P (cand1->fn)
          && DECL_COMPLETE_CONSTRUCTOR_P (cand1->fn)
          && !(cand1->flags & LOOKUP_ONLYCONVERTING))
        {
          bool elided1 = joust_maybe_elide_copy (cand1);
          bool elided2 = joust_maybe_elide_copy (cand2);
          /* As a tiebreaker below we will prefer a constructor to a conversion
    	 operator exposed this way.  */
          elided_tiebreaker = elided2 - elided1;
        }
    

      /* Put this tiebreaker first, so that we don't try to look at second_conv of
         a constructor candidate that doesn't have one.  */
      if (elided_tiebreaker)
        return elided_tiebreaker;
    

