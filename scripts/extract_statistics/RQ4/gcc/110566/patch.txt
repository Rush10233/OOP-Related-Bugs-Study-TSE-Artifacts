tree parm_parms = DECL_INNERMOST_TEMPLATE_PARMS (parm_tmpl);
      tree arg_parms = DECL_INNERMOST_TEMPLATE_PARMS (arg_tmpl);
      tree gen_arg_tmpl = most_general_template (arg_tmpl);
      tree gen_arg_parms = DECL_INNERMOST_TEMPLATE_PARMS (gen_arg_tmpl);

          pargs = coerce_template_parms (gen_arg_parms, pargs, NULL_TREE, tf_none);

inner = build_lang_decl_loc (DECL_SOURCE_LOCATION (decl),
    				       TYPE_DECL, DECL_NAME (decl), type);

    	  tree parms = tsubst_template_parms (DECL_TEMPLATE_PARMS (orig_decl),
    					      args, complain);
    	  DECL_TEMPLATE_PARMS (decl) = parms;
    	  tree orig_inner = DECL_TEMPLATE_RESULT (orig_decl);
    	  DECL_TEMPLATE_INFO (inner)
    	    = build_template_info (DECL_TI_TEMPLATE (orig_inner),
    				   template_parms_to_args (parms));

      tree oresult = DECL_TEMPLATE_RESULT (otmpl);
      tree gen_otmpl = DECL_TI_TEMPLATE (oresult);
      tree gen_ntmpl;
      if (gen_otmpl == otmpl)
        gen_ntmpl = ntmpl;
      else
        gen_ntmpl = add_defaults_to_ttp (gen_otmpl);
    
      tree nresult = copy_decl (oresult);
      DECL_TEMPLATE_INFO (nresult)
        = build_template_info (gen_ntmpl, TI_ARGS (DECL_TEMPLATE_INFO (oresult)));
      DECL_TEMPLATE_RESULT (ntmpl) = nresult;
    

    	 parameter, we can assume that it's in the current scope.  */

          if (DECL_TEMPLATE_TEMPLATE_PARM_P (arg_tmpl))
    	{
    	  int level = TEMPLATE_TYPE_LEVEL (TREE_TYPE (gen_arg_tmpl));
    	  int scope_depth = TMPL_ARGS_DEPTH (scope_args);
    	  tree full_pargs = make_tree_vec (level + 1);
    
    	/* Only use as many levels from the scope as needed
    	   (excluding the level of ARG).  */
    	  for (int i = 0; i < level - 1; ++i)
    	    if (i < scope_depth)
    	      TREE_VEC_ELT (full_pargs, i) = TMPL_ARGS_LEVEL (scope_args, i + 1);
    	    else
    	      TREE_VEC_ELT (full_pargs, i) = make_tree_vec (0);

    	  /* Add the arguments that appear at the levels of ARG.  */
    	  tree adjacent = DECL_TI_ARGS (DECL_TEMPLATE_RESULT (arg_tmpl));
    	  adjacent = TMPL_ARGS_LEVEL (adjacent, TMPL_ARGS_DEPTH (adjacent) - 1);
    	  TREE_VEC_ELT (full_pargs, level - 1) = adjacent;
    
    	  TREE_VEC_ELT (full_pargs, level) = pargs;
    	  pargs = full_pargs;
    	}
          else
    	pargs = add_to_template_args (scope_args, pargs);
    
          pargs = coerce_template_parms (gen_arg_parms, pargs,
    				     NULL_TREE, tf_none);

      if (DECL_TEMPLATE_TEMPLATE_PARM_P (decl))
        return DECL_TI_TEMPLATE (DECL_TEMPLATE_RESULT (decl));
    

    	  tree newresult
    	    = build_lang_decl_loc (DECL_SOURCE_LOCATION (olddecl), TYPE_DECL,
    				   DECL_NAME (olddecl), newtype);
    	  DECL_ARTIFICIAL (newresult) = true;
    	  DECL_TEMPLATE_RESULT (newdecl) = newresult;

    	  DECL_TEMPLATE_INFO (newresult)
    	    = build_template_info (newdecl, template_parms_to_args (ttparms));

tree parm_parms = DECL_INNERMOST_TEMPLATE_PARMS (parm_tmpl);
      tree arg_parms = DECL_INNERMOST_TEMPLATE_PARMS (arg_tmpl);
      tree gen_arg_tmpl = most_general_template (arg_tmpl);
      tree gen_arg_parms = DECL_INNERMOST_TEMPLATE_PARMS (gen_arg_tmpl);

          pargs = coerce_template_parms (gen_arg_parms, pargs, NULL_TREE, tf_none);

