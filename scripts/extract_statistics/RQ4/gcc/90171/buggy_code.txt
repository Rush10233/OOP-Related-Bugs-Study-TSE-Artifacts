if (aligned_new_threshold && t
          && same_type_p (TREE_VALUE (t), align_type_node)
          && TREE_CHAIN (t) == void_list_node)
        return true;

      /* If a class T has a member deallocation function named operator delete
         with exactly one parameter, then that function is a usual
         (non-placement) deallocation function. If class T does not declare
         such an operator delete but does declare a member deallocation
         function named operator delete with exactly two parameters, the second
         of which has type std::size_t (18.2), then this function is a usual
         deallocation function.  */

    	  && second_parm_is_size_t (t)))

    	    bool fn_size = second_parm_is_size_t (fn);
    	    bool elt_size = second_parm_is_size_t (elt);

    	  if (second_parm_is_size_t (fn))

/* Returns true iff T, an element of an OVERLOAD chain, is a usual deallocation
       function (3.7.4.2 [basic.stc.dynamic.deallocation]) with a parameter of
       std::align_val_t.  */
    
    static bool
    aligned_deallocation_fn_p (tree t)

      if (!aligned_new_threshold)
        return false;
    
      /* A template instance is never a usual deallocation function,
         regardless of its signature.  */
      if (TREE_CODE (t) == TEMPLATE_DECL
          || primary_template_specialization_p (t))
        return false;
    
      tree a = FUNCTION_ARG_CHAIN (t);
      if (destroying_delete_p (t))
        a = TREE_CHAIN (a);
      if (same_type_p (TREE_VALUE (a), align_type_node)
          && TREE_CHAIN (a) == void_list_node)
        return true;
      if (!same_type_p (TREE_VALUE (a), size_type_node))
        return false;
      a = TREE_CHAIN (a);
      if (a && same_type_p (TREE_VALUE (a), align_type_node)
          && TREE_CHAIN (a) == void_list_node)
        return true;
      return false;
    }

    /* Returns true if FN is a usual deallocation fn with a size_t parameter.  */

    sized_deallocation_fn_p (tree fn)

      tree t = FUNCTION_ARG_CHAIN (fn);
      if (destroying_delete_p (fn))
        t = TREE_CHAIN (t);
      if (!t || !same_type_p (TREE_VALUE (t), size_type_node))
        return false;
      t = TREE_CHAIN (t);
      if (t == void_list_node)
        return true;
      if (aligned_new_threshold && t
          && same_type_p (TREE_VALUE (t), align_type_node)
          && TREE_CHAIN (t) == void_list_node)
        return true;
      return false;
    }

    /* Returns true iff T, an element of an OVERLOAD chain, is a usual
       deallocation function (3.7.4.2 [basic.stc.dynamic.deallocation]).  */
    
    bool
    usual_deallocation_fn_p (tree t)
    {

      if (!chain)
        return false;
      if (destroying_delete_p (t))
        chain = TREE_CHAIN (chain);
      if (chain == void_list_node
          || ((!global || flag_sized_deallocation)
    	  && sized_deallocation_fn_p (t)))
        return true;
      if (aligned_deallocation_fn_p (t))
        return true;
      return false;

    	if (usual_deallocation_fn_p (elt))

    	    bool fn_destroying = destroying_delete_p (fn);
    	    bool elt_destroying = destroying_delete_p (elt);
    	    if (elt_destroying != fn_destroying)

    		if (elt_destroying)
    		  fn = elt;

    		bool fn_align = aligned_deallocation_fn_p (fn);
    		bool elt_align = aligned_deallocation_fn_p (elt);
    
    		if (elt_align != fn_align)

    		    if (want_align == elt_align)
    		      fn = elt;

    	    bool fn_size = sized_deallocation_fn_p (fn);
    	    bool elt_size = sized_deallocation_fn_p (elt);
    	    gcc_assert (fn_size != elt_size);
    	    if (want_size == elt_size)
    	      fn = elt;

    	  tree destroying = destroying_delete_p (fn);

    	  if (sized_deallocation_fn_p (fn))

    	  if (aligned_deallocation_fn_p (fn))

