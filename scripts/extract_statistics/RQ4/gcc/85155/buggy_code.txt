/* 8.4.2/2: An explicitly-defaulted function (...) may have an explicit
         exception-specification only if it is compatible (15.4) with the 
         exception-specification on the implicit declaration.  If a function
         is explicitly defaulted on its first declaration, (...) it is
         implicitly considered to have the same exception-specification as if
         it had been implicitly declared.  */
      maybe_instantiate_noexcept (fn);
      tree fn_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));
      if (!fn_spec)
        {
          if (DECL_DEFAULTED_IN_CLASS_P (fn))
    	TREE_TYPE (fn) = build_exception_variant (TREE_TYPE (fn), eh_spec);
        }
      else if (UNEVALUATED_NOEXCEPT_SPEC_P (fn_spec))
        /* Equivalent to the implicit spec.  */;
      else if (DECL_DEFAULTED_IN_CLASS_P (fn)
    	   && !CLASSTYPE_TEMPLATE_INSTANTIATION (ctx))
        /* We can't compare an explicit exception-specification on a
           constructor defaulted in the class body to the implicit
           exception-specification until after we've parsed any NSDMI; see
           after_nsdmi_defaulted_late_checks.  */;
      else
        {
          tree eh_spec = get_defaulted_eh_spec (fn);
          if (!comp_except_specs (fn_spec, eh_spec, ce_normal))
    	{
    	  if (DECL_DEFAULTED_IN_CLASS_P (fn))
    	    DECL_DELETED_FN (fn) = true;
    	  else
    	    error ("function %q+D defaulted on its redeclaration "
    		   "with an exception-specification that differs from "
    		   "the implicit exception-specification %qX", fn, eh_spec);
    	}
        }

    /* OK, we've parsed the NSDMI for class T, now we can check any explicit
       exception-specifications on functions defaulted in the class body.  */
    
    void
    after_nsdmi_defaulted_late_checks (tree t)
    {
      if (uses_template_parms (t))
        return;
      if (t == error_mark_node)
        return;
      for (tree fn = TYPE_FIELDS (t); fn; fn = DECL_CHAIN (fn))
        if (!DECL_ARTIFICIAL (fn)
    	&& DECL_DECLARES_FUNCTION_P (fn)
    	&& DECL_DEFAULTED_IN_CLASS_P (fn))
          {
    	tree fn_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));
    	if (UNEVALUATED_NOEXCEPT_SPEC_P (fn_spec))
    	  continue;
    
    	tree eh_spec = get_defaulted_eh_spec (fn);
    	if (eh_spec == error_mark_node)
    	  continue;
    
    	if (!comp_except_specs (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)),
    				eh_spec, ce_normal))
    	  DECL_DELETED_FN (fn) = true;
          }
    }
    

    #define unparsed_classes \
      parser->unparsed_queues->last ().classes

      cp_unparsed_functions_entry e = { NULL, make_tree_vector (), NULL, NULL,
    				    NULL };

    	  vec_safe_truncate (unparsed_classes, 0);

          /* Now do some post-NSDMI bookkeeping.  */
          FOR_EACH_VEC_SAFE_ELT (unparsed_classes, ix, class_type)
    	after_nsdmi_defaulted_late_checks (class_type);
          vec_safe_truncate (unparsed_classes, 0);
          after_nsdmi_defaulted_late_checks (type);
    

      else
        vec_safe_push (unparsed_classes, type);

      /* Nested classes go in this vector, so that we can do some final
         processing after parsing any NSDMIs.  */
      vec<tree, va_gc> *classes;
    

