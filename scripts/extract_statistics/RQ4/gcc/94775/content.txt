TYPE_ATTRIBUTES (base)))
        return false;
      /* Check alignment.  */

        return true;
      /* Atomic types increase minimal alignment.  We must to do so as well
         or we get duplicated canonical types. See PR88686.  */

    	  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)
    	  /* Check alignment.  */
    	  && TYPE_ALIGN (cand) == align

    	  && attribute_list_equal (TYPE_ATTRIBUTES (cand),
    				   TYPE_ATTRIBUTES (base))
    	  && check_lang_type (cand, base));

TYPE_ATTRIBUTES (base)))
        return false;
      /* Check alignment.  */

        return true;
      /* Atomic types increase minimal alignment.  We must to do so as well
         or we get duplicated canonical types. See PR88686.  */

    	  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)
    	  /* Check alignment.  */
    	  && TYPE_ALIGN (cand) == align
    	  && attribute_list_equal (TYPE_ATTRIBUTES (cand),
    				   TYPE_ATTRIBUTES (base))
    	  && check_lang_type (cand, base));

result = TYPE_MAIN_VARIANT (t);
        }
      gcc_assert (!typedef_variant_p (result));

        {

    	{

    	  else

    	}
        }

      return cp_build_qualified_type (result, cp_type_quals (t));
    }
    

TYPE_ATTRIBUTES (base)))
        return false;
      /* Check alignment.  */

        return true;
      /* Atomic types increase minimal alignment.  We must to do so as well
         or we get duplicated canonical types. See PR88686.  */

    	  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)
    	  /* Check alignment.  */
    	  && TYPE_ALIGN (cand) == align
    	  && attribute_list_equal (TYPE_ATTRIBUTES (cand),
    				   TYPE_ATTRIBUTES (base))
    	  && check_lang_type (cand, base));

However, where strict alignment is not required, avoid
         over-aligning structures, since most compilers do not do this
         alignment.  */

      if (TYPE_MODE (type) != BLKmode
          && TYPE_MODE (type) != VOIDmode
          && (STRICT_ALIGNMENT || !AGGREGATE_TYPE_P (type)))

          if (mode_align >= TYPE_ALIGN (type))
    	{
    	  SET_TYPE_ALIGN (type, mode_align);

    	}
        }
    

    
          /* Copy it into all variants.  */
          for (variant = TYPE_MAIN_VARIANT (type);

    	   variant = TYPE_NEXT_VARIANT (variant))
    	{
    	  TYPE_SIZE (variant) = size;
    	  TYPE_SIZE_UNIT (variant) = size_unit;
    	  unsigned valign = align;
    	  if (TYPE_USER_ALIGN (variant))

    	  else
    	    TYPE_USER_ALIGN (variant) = user_align;
    	  SET_TYPE_ALIGN (variant, valign);

    			        TYPE_ATTRIBUTES (base)))
        return false;
      /* Check alignment.  */

        return true;
      /* Atomic types increase minimal alignment.  We must to do so as well
         or we get duplicated canonical types. See PR88686.  */

    	  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)
    	  /* Check alignment.  */
    	  && TYPE_ALIGN (cand) == align

    	  && attribute_list_equal (TYPE_ATTRIBUTES (cand),
    				   TYPE_ATTRIBUTES (base))
    	  && check_lang_type (cand, base));

