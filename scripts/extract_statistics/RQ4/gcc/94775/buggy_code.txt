if (TYPE_ALIGN (cand) == TYPE_ALIGN (base))

if (TYPE_ALIGN (cand) == TYPE_ALIGN (base)
          && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base))

    	  && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base)

if (TYPE_USER_ALIGN (t) != TYPE_USER_ALIGN (result)
          || TYPE_ALIGN (t) != TYPE_ALIGN (result))

          gcc_assert (TYPE_USER_ALIGN (t));
          if (remove_attributes)
    	*remove_attributes = true;
          else

    	  if (TYPE_ALIGN (t) == TYPE_ALIGN (result))
    	    result = build_variant_type_copy (result);

    	    result = build_aligned_type (result, TYPE_ALIGN (t));
    	  TYPE_USER_ALIGN (result) = true;

      if (TYPE_ATTRIBUTES (t))
        {
          if (remove_attributes)
    	result = apply_identity_attributes (result, TYPE_ATTRIBUTES (t),
    					    remove_attributes);
          else
    	result = cp_build_type_attribute_variant (result, TYPE_ATTRIBUTES (t));
        }

if (TYPE_ALIGN (cand) == TYPE_ALIGN (base)
          && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base))

    	  && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base)

TYPE_USER_ALIGN (type) = 0;

    	   variant != 0;

    	    valign = MAX (valign, TYPE_ALIGN (variant));

      if (TYPE_ALIGN (cand) == TYPE_ALIGN (base))

