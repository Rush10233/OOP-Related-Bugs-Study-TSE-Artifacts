{
    		  /* If it would be valid albeit deprecated expression in
    		     C++20, just pedwarn on it and treat it as if wrapped
    		     in ().  */
    		  pedwarn (loc, OPT_Wcomma_subscript,
    			   "top-level comma expression in array subscript "
    			   "changed meaning in C++23");
    		  if (processing_template_decl)
    		    {
    		      orig_index_exp
    			= build_x_compound_expr_from_vec (orig_index_exp_list,
    							  NULL, complain);
    		      if (orig_index_exp == error_mark_node)
    			expr = error_mark_node;
    		      release_tree_vector (orig_index_exp_list);
    		    }
    		}

    	  if (processing_template_decl)
    	    {
    	      orig_index_exp
    		= build_x_compound_expr_from_vec (orig_index_exp_list,
    						  NULL, complain);
    	      release_tree_vector (orig_index_exp_list);
    	      if (orig_index_exp == error_mark_node)
    		return error_mark_node;
    	    }

{
    		  /* If it would be valid albeit deprecated expression in
    		     C++20, just pedwarn on it and treat it as if wrapped
    		     in ().  */
    		  pedwarn (loc, OPT_Wcomma_subscript,
    			   "top-level comma expression in array subscript "
    			   "changed meaning in C++23");
    		  if (processing_template_decl)
    		    {
    		      orig_index_exp
    			= build_x_compound_expr_from_vec (orig_index_exp_list,
    							  NULL, complain);
    		      if (orig_index_exp == error_mark_node)
    			expr = error_mark_node;
    		      release_tree_vector (orig_index_exp_list);
    		    }
    		}

    	  if (processing_template_decl)
    	    {
    	      orig_index_exp
    		= build_x_compound_expr_from_vec (orig_index_exp_list,
    						  NULL, complain);
    	      release_tree_vector (orig_index_exp_list);
    	      if (orig_index_exp == error_mark_node)
    		return error_mark_node;
    	    }

