tree ctx_parms = NULL_TREE;

          ctx_parms = DECL_TEMPLATE_PARMS (decl);

          ctx_parms = current_template_parms;

      tree parms = find_template_parameters (expr, ctx_parms);

    extern tree find_template_parameters		(tree, tree);

      explicit find_template_parameter_info (tree ctx_parms)
        : ctx_parms (ctx_parms),
          max_depth (TMPL_PARMS_DEPTH (ctx_parms))

      tree ctx_parms;

        case TEMPLATE_DECL:
          {
    	/* If T is a member template that shares template parameters with
    	   ctx_parms, we need to mark all those parameters for mapping.  */
    	tree dparms = DECL_TEMPLATE_PARMS (t);
    	tree cparms = ftpi->ctx_parms;
    	while (TMPL_PARMS_DEPTH (dparms) > ftpi->max_depth)
    	  dparms = TREE_CHAIN (dparms);
    	while (dparms
    	       && (TREE_TYPE (TREE_VALUE (dparms))
    		   != TREE_TYPE (TREE_VALUE (cparms))))
    	  dparms = TREE_CHAIN (dparms),
    	    cparms = TREE_CHAIN (cparms);
    	if (dparms)
    	  {
    	    int ddepth = TMPL_PARMS_DEPTH (dparms);
    	    tree dargs = TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (t)));
    	    for (int i = 0; i < ddepth; ++i)
    	      WALK_SUBTREE (TMPL_ARGS_LEVEL (dargs, i+1));
    	  }
          }
          break;
    

    /* Returns a list of unique template parameters found within T, where CTX_PARMS
       are the template parameters in scope.  */

    find_template_parameters (tree t, tree ctx_parms)

      if (!ctx_parms)
        return NULL_TREE;
    
      find_template_parameter_info ftpi (ctx_parms);

