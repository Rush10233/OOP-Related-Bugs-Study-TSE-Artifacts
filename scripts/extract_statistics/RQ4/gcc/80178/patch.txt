; 12: Corrects the calling convention for classes with only deleted copy/move
    ;     constructors.
    ;     Default in G++ 8.
    ;

      if (complain & tf_warning)

          if (warn_suggest_attribute_format)
    	{
    	  tree rhstype = TREE_TYPE (val);
    	  const enum tree_code coder = TREE_CODE (rhstype);
    	  const enum tree_code codel = TREE_CODE (type);
    	  if ((codel == POINTER_TYPE || codel == REFERENCE_TYPE)
    	      && coder == codel
    	      && check_missing_format_attribute (type, rhstype))
    	    warning (OPT_Wsuggest_attribute_format,
    		     "argument of function call might be a candidate "
    		     "for a format attribute");
    	}
          maybe_warn_parm_abi (type, EXPR_LOC_OR_LOC (val, input_location));

    	{
    	  fn = build_cplus_new (TREE_TYPE (fn), fn, complain);
    	  maybe_warn_parm_abi (TREE_TYPE (fn), loc);
    	}

    extern void maybe_warn_parm_abi			(tree, location_t);

    
    	  maybe_warn_parm_abi (TREE_TYPE (parms),
    			       DECL_SOURCE_LOCATION (parms));

        {
          abstract_virtuals_error (decl, TREE_TYPE (fntype));
          maybe_warn_parm_abi (TREE_TYPE (fntype),
    			   DECL_SOURCE_LOCATION (decl));
        }

    #include "flags.h"

    /* Track classes with only deleted copy/move constructors so that we can warn
       if they are used in call/return by value.  */
    
    static GTY(()) hash_set<tree>* deleted_copy_types;
    static void
    remember_deleted_copy (const_tree t)
    {
      if (!deleted_copy_types)
        deleted_copy_types = hash_set<tree>::create_ggc(37);
      deleted_copy_types->add (CONST_CAST_TREE (t));
    }
    void
    maybe_warn_parm_abi (tree t, location_t loc)
    {
      if (!deleted_copy_types
          || !deleted_copy_types->contains (t))
        return;
    
      warning_at (loc, OPT_Wabi, "the calling convention for %qT changes in "
    	      "-fabi-version=12 (GCC 8)", t);
      static bool explained = false;
      if (!explained)
        {
          inform (loc, " because all of its copy and move constructors "
    	      "are deleted");
          explained = true;
        }
    }
    

       constructors and no non-trivial move constructors, and not all copy/move
       constructors are deleted.  This function implements the ABI notion of
       non-trivial copy, which has diverged from the one in the standard.  */

    type_has_nontrivial_copy_init (const_tree type)

      tree t = strip_array_types (CONST_CAST_TREE (type));

    
          if (TYPE_HAS_COMPLEX_COPY_CTOR (t)
    	  || TYPE_HAS_COMPLEX_MOVE_CTOR (t))
    	/* Nontrivial.  */
    	return true;
    
          if (cxx_dialect < cxx11)
    
    	return false;
    
          /* Before ABI v12 we did a bitwise copy of types with only deleted
    	 copy/move constructors.  */
          if (!abi_version_at_least (12)
    	  && !(warn_abi && abi_version_crosses (12)))
    	return false;
    
          bool saw_copy = false;
          bool saw_non_deleted = false;
    
          if (CLASSTYPE_LAZY_MOVE_CTOR (t))
    	saw_copy = saw_non_deleted = true;
          else if (CLASSTYPE_LAZY_COPY_CTOR (t))
    	{
    	  saw_copy = true;
    	  if (type_has_user_declared_move_constructor (t)
    	      || type_has_user_declared_move_assign (t))
    	    /* [class.copy]/8 If the class definition declares a move
    	       constructor or move assignment operator, the implicitly declared
    	       copy constructor is defined as deleted.... */;
    	  else
    	    /* Any other reason the implicitly-declared function would be
    	       deleted would also cause TYPE_HAS_COMPLEX_COPY_CTOR to be
    	       set.  */
    	    saw_non_deleted = true;
    	}
    
          if (!saw_non_deleted && CLASSTYPE_METHOD_VEC (t))
    	for (tree fns = CLASSTYPE_CONSTRUCTORS (t); fns; fns = OVL_NEXT (fns))
    	  {
    	    tree fn = OVL_CURRENT (fns);
    	    if (copy_fn_p (fn))
    	      {
    		saw_copy = true;
    		if (!DECL_DELETED_FN (fn))
    		  {
    		    /* Not deleted, therefore trivial.  */
    		    saw_non_deleted = true;
    		    break;
    		  }
    	      }
    	  }
    
          gcc_assert (saw_copy);
    
          if (saw_copy && !saw_non_deleted)
    	{
    	  if (warn_abi && abi_version_crosses (12))
    	    remember_deleted_copy (t);
    	  if (abi_version_at_least (12))
    	    return true;
    	}
    
          return false;

