/* Issue diagnostics about a disallowed access of DECL, using DIAG_DECL
       in the diagnostics.
    
       If ISSUE_ERROR is true, then issue an error about the
       access, followed by a note showing the declaration.
       Otherwise, just show the note.  */
    
    void
    complain_about_access (tree decl, tree diag_decl, bool issue_error)
    {
      if (TREE_PRIVATE (decl))
        {
          if (issue_error)
    	error ("%q#D is private within this context", diag_decl);
          inform (DECL_SOURCE_LOCATION (diag_decl),
    	      "declared private here");
        }
      else if (TREE_PROTECTED (decl))
        {
          if (issue_error)
    	error ("%q#D is protected within this context", diag_decl);
          inform (DECL_SOURCE_LOCATION (diag_decl),
    	      "declared protected here");
        }
      else
        {
          if (issue_error)
    	error ("%q#D is inaccessible within this context", diag_decl);
          inform (DECL_SOURCE_LOCATION (diag_decl), "declared here");
        }
    }
    

          if (flag_new_inheriting_ctors)
    	diag_decl = strip_inheriting_ctors (diag_decl);

    	complain_about_access (decl, diag_decl, true);
          if (afi)
    	afi->record_access_failure (basetype_path, decl, diag_decl);

      access_failure_info () : m_was_inaccessible (false),
        m_basetype_path (NULL_TREE),
        m_decl (NULL_TREE), m_diag_decl (NULL_TREE) {}

      void record_access_failure (tree basetype_path, tree decl, tree diag_decl);
    
      bool was_inaccessible_p () const { return m_was_inaccessible; }
      tree get_decl () const { return m_decl; }
      tree get_diag_decl () const { return m_diag_decl; }
      tree get_any_accessor (bool const_p) const;

      static void add_fixit_hint (rich_location *richloc, tree accessor);

      tree m_decl;
      tree m_diag_decl;

    extern void complain_about_access		(tree, tree, bool);

       to access DECL, where DIAG_DECL should be used for diagnostics.  */

    					    tree decl, tree diag_decl)

      m_decl = decl;
      m_diag_decl = diag_decl;

       accessor function for the pertinent field.
       Otherwise, return NULL_TREE.  */

    tree
    access_failure_info::get_any_accessor (bool const_p) const

      if (!was_inaccessible_p ())
        return NULL_TREE;

        = locate_field_accessor (m_basetype_path, m_diag_decl, const_p);

        return NULL_TREE;

        return NULL_TREE;

      return accessor;
    }
    
    /* Add a fix-it hint to RICHLOC suggesting the use of ACCESSOR_DECL, by
       replacing the primary location in RICHLOC with "accessor()".  */
    
    void
    access_failure_info::add_fixit_hint (rich_location *richloc,
    				     tree accessor_decl)
    {

      pp_printf (&pp, "%s()", IDENTIFIER_POINTER (DECL_NAME (accessor_decl)));
      richloc->add_fixit_replace (pp_formatted_text (&pp));
    }
    
    /* If an access failure was recorded, then attempt to locate an
       accessor function for the pertinent field, and if one is
       available, add a note and fix-it hint suggesting using it.  */
    
    void
    access_failure_info::maybe_suggest_accessor (bool const_p) const
    {
      tree accessor = get_any_accessor (const_p);
      if (accessor == NULL_TREE)
        return;
      rich_location richloc (line_table, input_location);
      add_fixit_hint (&richloc, accessor);

    	  m_diag_decl, accessor);
    }
    
    /* Subroutine of finish_class_member_access_expr.
       Issue an error about NAME not being a member of ACCESS_PATH (or
       OBJECT_TYPE), potentially providing a fix-it hint for misspelled
       names.  */
    
    static void
    complain_about_unrecognized_member (tree access_path, tree name,
    				    tree object_type)
    {
      /* Attempt to provide a hint about misspelled names.  */
      tree guessed_id = lookup_member_fuzzy (access_path, name,
    					 /*want_type=*/false);
      if (guessed_id == NULL_TREE)
        {
          /* No hint.  */
          error ("%q#T has no member named %qE",
    	     TREE_CODE (access_path) == TREE_BINFO
    	     ? TREE_TYPE (access_path) : object_type, name);
          return;
        }
    
      location_t bogus_component_loc = input_location;
      gcc_rich_location rich_loc (bogus_component_loc);
    
      /* Check that the guessed name is accessible along access_path.  */
      access_failure_info afi;
      lookup_member (access_path, guessed_id, /*protect=*/1,
    		 /*want_type=*/false, /*complain=*/false,
    		 &afi);
      if (afi.was_inaccessible_p ())
        {
          tree accessor = afi.get_any_accessor (TYPE_READONLY (object_type));
          if (accessor)
    	{
    	  /* The guessed name isn't directly accessible, but can be accessed
    	     via an accessor member function.  */
    	  afi.add_fixit_hint (&rich_loc, accessor);
    	  error_at (&rich_loc,
    		    "%q#T has no member named %qE;"
    		    " did you mean %q#D? (accessible via %q#D)",
    		    TREE_CODE (access_path) == TREE_BINFO
    		    ? TREE_TYPE (access_path) : object_type,
    		    name, afi.get_diag_decl (), accessor);
    	}
          else
    	{
    	  /* The guessed name isn't directly accessible, and no accessor
    	     member function could be found.  */
    	  error_at (&rich_loc,
    		    "%q#T has no member named %qE;"
    		    " did you mean %q#D? (not accessible from this context)",
    		    TREE_CODE (access_path) == TREE_BINFO
    		    ? TREE_TYPE (access_path) : object_type,
    		    name, afi.get_diag_decl ());
    	  complain_about_access (afi.get_decl (), afi.get_diag_decl (), false);
    	}
        }
      else
        {
          /* The guessed name is directly accessible; suggest it.  */
          rich_loc.add_fixit_misspelled_id (bogus_component_loc,
    					guessed_id);
          error_at (&rich_loc,
    		"%q#T has no member named %qE;"
    		" did you mean %qE?",
    		TREE_CODE (access_path) == TREE_BINFO
    		? TREE_TYPE (access_path) : object_type,
    		name, guessed_id);
        }

    		complain_about_unrecognized_member (access_path, name,
    						    object_type);

