{
    	  if (flag_new_inheriting_ctors)
    	    diag_decl = strip_inheriting_ctors (diag_decl);
    	  if (TREE_PRIVATE (decl))
    	    {
    	      error ("%q#D is private within this context", diag_decl);
    	      inform (DECL_SOURCE_LOCATION (diag_decl),
    		      "declared private here");
    	      if (afi)
    		afi->record_access_failure (basetype_path, diag_decl);
    	    }
    	  else if (TREE_PROTECTED (decl))
    	    {
    	      error ("%q#D is protected within this context", diag_decl);
    	      inform (DECL_SOURCE_LOCATION (diag_decl),
    		      "declared protected here");
    	      if (afi)
    		afi->record_access_failure (basetype_path, diag_decl);
    	    }
    	  else
    	    {
    	      error ("%q#D is inaccessible within this context", diag_decl);
    	      inform (DECL_SOURCE_LOCATION (diag_decl), "declared here");
    	      if (afi)
    		afi->record_access_failure (basetype_path, diag_decl);
    	    }
    	}

      access_failure_info () : m_was_inaccessible (false), m_basetype_path (NULL_TREE),
        m_field_decl (NULL_TREE) {}

      void record_access_failure (tree basetype_path, tree field_decl);

      tree m_field_decl;

       to access FIELD_DECL.  */

    					    tree field_decl)

      m_field_decl = field_decl;

       accessor function for the pertinent field, and if one is
       available, add a note and fix-it hint suggesting using it.  */

    void
    access_failure_info::maybe_suggest_accessor (bool const_p) const

      if (!m_was_inaccessible)
        return;

        = locate_field_accessor (m_basetype_path, m_field_decl, const_p);

        return;

        return;

      rich_location richloc (line_table, input_location);

      pp_printf (&pp, "%s()", IDENTIFIER_POINTER (DECL_NAME (accessor)));
      richloc.add_fixit_replace (pp_formatted_text (&pp));

    	  m_field_decl, accessor);

    		{
    		  tree guessed_id = lookup_member_fuzzy (access_path, name,
    							 /*want_type=*/false);
    		  if (guessed_id)
    		    {
    		      location_t bogus_component_loc = input_location;
    		      gcc_rich_location rich_loc (bogus_component_loc);
    		      rich_loc.add_fixit_misspelled_id (bogus_component_loc,
    							guessed_id);
    		      error_at (&rich_loc,
    				"%q#T has no member named %qE;"
    				" did you mean %qE?",
    				TREE_CODE (access_path) == TREE_BINFO
    				? TREE_TYPE (access_path) : object_type,
    				name, guessed_id);
    		    }
    		  else
    		    error ("%q#T has no member named %qE",
    			   TREE_CODE (access_path) == TREE_BINFO
    			   ? TREE_TYPE (access_path) : object_type, name);
    		}

