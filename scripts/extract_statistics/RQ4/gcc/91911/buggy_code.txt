if (level > ftpi->max_depth)

    	    tree sub_args = args;
    	    if (tree auto_node = type_uses_auto (type))
    	      {
    		/* Mask off any template args past the variable's context so we
    		   don't replace the auto with an unrelated argument.  */
    		int nouter = TEMPLATE_TYPE_LEVEL (auto_node) - 1;
    		int extra = TMPL_ARGS_DEPTH (args) - nouter;
    		if (extra > 0)
    		  /* This should never happen with the new lambda instantiation
    		     model, but keep the handling just in case.  */
    		  gcc_assert (!CHECKING_P),
    		  sub_args = strip_innermost_template_args (args, extra);
    	      }
    	    type = tsubst (type, sub_args, complain, in_decl);

    		     && !CLASS_PLACEHOLDER_TEMPLATE (t)

    		  {

    		    if (tree ci = PLACEHOLDER_TYPE_CONSTRAINTS_INFO (t))
    		      PLACEHOLDER_TYPE_CONSTRAINTS_INFO (r) = ci;
    		    else if (tree pl = CLASS_PLACEHOLDER_TEMPLATE (t))
    		      {
    			pl = tsubst_copy (pl, args, complain, in_decl);
    			if (TREE_CODE (pl) == TEMPLATE_TEMPLATE_PARM)
    			  pl = TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (pl);
    			CLASS_PLACEHOLDER_TEMPLATE (r) = pl;
    		      }
    		  }

       TEMPLATE_TYPE_PARM with a level one deeper than the actual template
       parms.  If set_canonical is true, we set TYPE_CANONICAL on it.  */

    make_auto_1 (tree name, bool set_canonical)

        (0, current_template_depth + 1, current_template_depth + 1,
         TYPE_NAME (au), NULL_TREE);

    /* Return a C++17 deduction placeholder for class template TMPL.  */

      tree t = make_auto_1 (auto_identifier, false);

