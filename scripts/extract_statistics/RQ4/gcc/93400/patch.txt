/* If DECL is a friend, substitute into REQS to produce requirements suitable
       for declaration matching.  */
    
    tree
    maybe_substitute_reqs_for (tree reqs, const_tree decl_)
    {
      if (reqs == NULL_TREE)
        return NULL_TREE;
      tree decl = CONST_CAST_TREE (decl_);
      tree result = STRIP_TEMPLATE (decl);
      if (DECL_FRIEND_P (result))
        {
          tree tmpl = decl == result ? DECL_TI_TEMPLATE (result) : decl;
          tree gargs = generic_targs_for (tmpl);
          processing_template_decl_sentinel s;
          if (uses_template_parms (gargs))
    	++processing_template_decl;
          reqs = tsubst_constraint (reqs, gargs,
    				tf_warning_or_error, NULL_TREE);
        }
      return reqs;
    }
    

    extern tree maybe_substitute_reqs_for		(tree, const_tree);

      reqs1 = maybe_substitute_reqs_for (reqs1, newfn);
      reqs2 = maybe_substitute_reqs_for (reqs2, oldfn);

          /* Substitute TEMPLATE_PARMS_CONSTRAINTS so that parameter levels will
    	 match in decls_match.  */
          tree parms = DECL_TEMPLATE_PARMS (new_friend);
          tree treqs = TEMPLATE_PARMS_CONSTRAINTS (parms);
          treqs = maybe_substitute_reqs_for (treqs, new_friend);
          TEMPLATE_PARMS_CONSTRAINTS (parms) = treqs;

          TEMPLATE_PARMS_CONSTRAINTS (*new_parms)
    	= TEMPLATE_PARMS_CONSTRAINTS (parms);

