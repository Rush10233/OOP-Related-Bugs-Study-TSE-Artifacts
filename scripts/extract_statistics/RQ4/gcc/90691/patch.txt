bool lval,

          r = cxx_eval_constant_expression (ctx, r, lval, non_constant_p,

          return r;

      r = cxx_eval_outermost_constant_expr (t, true, true, false, false,
    					decl, uid_sensitive);

      /* Wrap the whole thing in a TARGET_EXPR like build_conditional_expr_1.  */
      r = get_target_expr (r);
    

/* Whether we should error on a non-constant expression or fail quietly.
         This flag needs to be here, but some of the others could move to global
         if they get larger than a word.  */

      /* Whether we want to avoid doing anything that will cause extra DECL_UID
         generation.  */
      bool uid_sensitive;

    get_fundef_copy (const constexpr_ctx *ctx, constexpr_fundef *fundef)

          if (ctx->uid_sensitive)
    	return NULL_TREE;
    

          && !ctx->uid_sensitive

          else if (tree copy = get_fundef_copy (ctx, new_call.fundef))

          else
    	/* Couldn't get a function copy to evaluate.  */
    	*non_constant_p = true;

    				  tree object = NULL_TREE,
    				  bool uid_sensitive = false)

    			manifestly_const_eval || !allow_non_constant,
    			uid_sensitive };

      if (!uid_sensitive)
        instantiate_constexpr_fns (r);

       as per P0595.  UID_SENSITIVE is true if we can't do anything that
       would affect DECL_UID ordering.  */

    maybe_constant_value (tree t, tree decl, bool manifestly_const_eval,
    		      bool uid_sensitive)

        return cxx_eval_outermost_constant_expr (t, true, true, true, false,
    					     decl, uid_sensitive);

          if (r != t || TREE_CONSTANT (t) || !manifestly_const_eval)
    	return r;
          /* If we cached this as non-constant and we need a constant value, try
    */

    extern tree maybe_constant_value		(tree, tree = NULL_TREE, bool = false, bool = false);

      else if (cxx_dialect >= cxx11)
        x = maybe_constant_value (x, NULL_TREE, false, true);

