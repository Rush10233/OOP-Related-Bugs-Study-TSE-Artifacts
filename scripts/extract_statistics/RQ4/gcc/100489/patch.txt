gcc_assert (TREE_CODE (index) == FIELD_DECL);

if (tree id = DECL_NAME (d->cur->index))
    		    gcc_checking_assert (d->cur->index
    					 == get_class_binding (type, id));

    
    	  /* If the element is an anonymous union object and the initializer
    	     list is a designated-initializer-list, the anonymous union object
    	     is initialized by the designated-initializer-list { D }, where D
    	     is the designated-initializer-clause naming a member of the
    	     anonymous union object.  */
    	  tree ictx = DECL_CONTEXT (field);
    	  if (!same_type_ignoring_top_level_qualifiers_p (ictx, type))
    	    {
    	      gcc_assert (ANON_AGGR_TYPE_P (ictx));
    	      /* Find the anon aggr that is a direct member of TYPE.  */
    	      while (true)
    		{
    		  tree cctx = TYPE_CONTEXT (ictx);
    		  if (same_type_ignoring_top_level_qualifiers_p (cctx, type))
    		    break;
    		  ictx = cctx;
    		}
    	      /* And then the TYPE member with that anon aggr type.  */
    	      tree aafield = TYPE_FIELDS (type);
    	      for (; aafield; aafield = TREE_CHAIN (aafield))
    		if (TREE_TYPE (aafield) == ictx)
    		  break;
    	      gcc_assert (aafield);
    	      field = aafield;
    	    }

if (tree id = DECL_NAME (d->cur->index))
    		    gcc_checking_assert (d->cur->index
    					 == get_class_binding (type, id));

    
    	  /* If the element is an anonymous union object and the initializer
    	     list is a designated-initializer-list, the anonymous union object
    	     is initialized by the designated-initializer-list { D }, where D
    	     is the designated-initializer-clause naming a member of the
    	     anonymous union object.  */
    	  tree ictx = DECL_CONTEXT (field);
    	  if (!same_type_ignoring_top_level_qualifiers_p (ictx, type))
    	    {
    	      gcc_assert (ANON_AGGR_TYPE_P (ictx));
    	      /* Find the anon aggr that is a direct member of TYPE.  */
    	      while (true)
    		{
    		  tree cctx = TYPE_CONTEXT (ictx);
    		  if (same_type_ignoring_top_level_qualifiers_p (cctx, type))
    		    break;
    		  ictx = cctx;
    		}
    	      /* And then the TYPE member with that anon aggr type.  */
    	      tree aafield = TYPE_FIELDS (type);
    	      for (; aafield; aafield = TREE_CHAIN (aafield))
    		if (TREE_TYPE (aafield) == ictx)
    		  break;
    	      gcc_assert (aafield);
    	      field = aafield;
    	    }

